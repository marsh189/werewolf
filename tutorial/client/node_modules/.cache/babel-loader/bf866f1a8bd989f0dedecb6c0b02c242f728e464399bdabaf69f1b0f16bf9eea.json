{"ast":null,"code":"import { fromByteArray } from 'base64-js';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport axios from 'axios';\nimport FormData from 'form-data';\nimport WebSocket from 'isomorphic-ws';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _wrapNativeSuper from '@babel/runtime/helpers/wrapNativeSuper';\nfunction isString$1(arrayOrString) {\n  return typeof arrayOrString === 'string';\n}\nfunction isMapStringCallback(arrayOrString, callback) {\n  return !!callback && isString$1(arrayOrString);\n} // source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\n\nfunction map(arrayOrString, callback) {\n  var res = [];\n  if (isString$1(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (var k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        var kValue = arrayOrString.charAt(k);\n        var mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (!isString$1(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n    for (var _k = 0, _len = arrayOrString.length; _k < _len; _k++) {\n      if (_k in arrayOrString) {\n        var _kValue = arrayOrString[_k];\n        var _mappedValue = callback(_kValue, _k, arrayOrString);\n        res[_k] = _mappedValue;\n      }\n    }\n  }\n  return res;\n}\nvar encodeBase64 = function encodeBase64(data) {\n  return fromByteArray(new Uint8Array(map(data, function (char) {\n    return char.charCodeAt(0);\n  })));\n}; // base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\n\nvar decodeBase64 = function decodeBase64(s) {\n  var e = {},\n    w = String.fromCharCode,\n    L = s.length;\n  var i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  var A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\nvar Campaign = /*#__PURE__*/function () {\n  function Campaign(client, id, data) {\n    _classCallCheck(this, Campaign);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    _defineProperty(this, \"client\", void 0);\n    this.client = client;\n    this.id = id;\n    this.data = data;\n  }\n  _createClass(Campaign, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this$data, _this$data2, _this$data3, _this$data4, _this$data5, _this$data6, _this$data7, _this$data8, _this$data9;\n        var body, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                body = {\n                  id: this.id,\n                  message_template: (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.message_template,\n                  segment_ids: (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.segment_ids,\n                  sender_id: (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.sender_id,\n                  sender_mode: (_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.sender_mode,\n                  channel_template: (_this$data5 = this.data) === null || _this$data5 === void 0 ? void 0 : _this$data5.channel_template,\n                  create_channels: (_this$data6 = this.data) === null || _this$data6 === void 0 ? void 0 : _this$data6.create_channels,\n                  description: (_this$data7 = this.data) === null || _this$data7 === void 0 ? void 0 : _this$data7.description,\n                  name: (_this$data8 = this.data) === null || _this$data8 === void 0 ? void 0 : _this$data8.name,\n                  user_ids: (_this$data9 = this.data) === null || _this$data9 === void 0 ? void 0 : _this$data9.user_ids\n                };\n                _context.next = 3;\n                return this.client.createCampaign(body);\n              case 3:\n                result = _context.sent;\n                this.id = result.campaign.id;\n                this.data = result.campaign;\n                return _context.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function create() {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n  }, {\n    key: \"verifyCampaignId\",\n    value: function verifyCampaignId() {\n      if (!this.id) {\n        throw new Error('Campaign id is missing. Either create the campaign using campaign.create() or set the id during instantiation - const campaign = client.campaign(id)');\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.verifyCampaignId();\n                _context2.next = 3;\n                return this.client.startCampaign(this.id, options);\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function start(_x) {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.verifyCampaignId();\n                return _context3.abrupt(\"return\", this.client.updateCampaign(this.id, data));\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function update(_x2) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.verifyCampaignId();\n                _context4.next = 3;\n                return this.client.deleteCampaign(this.id);\n              case 3:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.verifyCampaignId();\n                return _context5.abrupt(\"return\", this.client.stopCampaign(this.id));\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(options) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.verifyCampaignId();\n                return _context6.abrupt(\"return\", this.client.getCampaign(this.id, options));\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function get(_x3) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n  }]);\n  return Campaign;\n}();\nvar https = null;\nfunction ownKeys$e(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$e(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$e(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$e(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createForOfIteratorHelper$5(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          function e(_x2) {\n            return _e.apply(this, arguments);\n          }\n          e.toString = function () {\n            return _e.toString();\n          };\n          return e;\n        }(function (e) {\n          throw e;\n        }),\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      function e(_x3) {\n        return _e2.apply(this, arguments);\n      }\n      e.toString = function () {\n        return _e2.toString();\n      };\n      return e;\n    }(function (e) {\n      didErr = true;\n      err = e;\n    }),\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$5(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$5(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen);\n}\nfunction _arrayLikeToArray$5(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */\nfunction logChatPromiseExecution(promise, name) {\n  promise.then().catch(function (error) {\n    console.warn(\"failed to do \".concat(name, \", ran into error: \"), error);\n  });\n}\nvar sleep = function sleep(m) {\n  return new Promise(function (r) {\n    return setTimeout(r, m);\n  });\n};\nfunction isFunction(value) {\n  return value && (Object.prototype.toString.call(value) === '[object Function]' || 'function' === typeof value || value instanceof Function);\n}\nvar chatCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000\n};\nfunction isReadableStream(obj) {\n  return obj !== null && _typeof(obj) === 'object' && (obj.readable || typeof obj._read === 'function');\n}\nfunction isBuffer(obj) {\n  return obj != null && obj.constructor != null &&\n  // @ts-expect-error\n  typeof obj.constructor.isBuffer === 'function' &&\n  // @ts-expect-error\n  obj.constructor.isBuffer(obj);\n}\nfunction isFileWebAPI(uri) {\n  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;\n}\nfunction isOwnUser(user) {\n  return (user === null || user === void 0 ? void 0 : user.total_unread_count) !== undefined;\n}\nfunction isBlobWebAPI(uri) {\n  return typeof window !== 'undefined' && 'Blob' in window && uri instanceof Blob;\n}\nfunction isOwnUserBaseProperty(property) {\n  var ownUserBaseProperties = {\n    channel_mutes: true,\n    devices: true,\n    mutes: true,\n    total_unread_count: true,\n    unread_channels: true,\n    unread_count: true,\n    unread_threads: true,\n    invisible: true,\n    privacy_settings: true,\n    roles: true,\n    push_preferences: true\n  };\n  return ownUserBaseProperties[property];\n}\nfunction addFileToFormData(uri, name, contentType) {\n  var data = new FormData();\n  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {\n    if (name) data.append('file', uri, name);else data.append('file', uri);\n  } else {\n    data.append('file', {\n      uri: uri,\n      name: name || uri.split('/').reverse()[0],\n      contentType: contentType || undefined,\n      type: contentType || undefined\n    });\n  }\n  return data;\n}\nfunction normalizeQuerySort(sort) {\n  var sortFields = [];\n  var sortArr = Array.isArray(sort) ? sort : [sort];\n  var _iterator = _createForOfIteratorHelper$5(sortArr),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _item = _step.value;\n      var entries = Object.entries(_item);\n      if (entries.length > 1) {\n        console.warn(\"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\");\n      }\n      for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {\n        var _entries$_i = _slicedToArray(_entries[_i], 2),\n          field = _entries$_i[0],\n          direction = _entries$_i[1];\n        sortFields.push({\n          field: field,\n          direction: direction\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return sortFields;\n}\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\n\nfunction retryInterval(numberOfFailures) {\n  // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)\n  var max = Math.min(500 + numberOfFailures * 2000, 25000);\n  var min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\nfunction randomId() {\n  return generateUUIDv4();\n}\nfunction hex(bytes) {\n  var s = '';\n  for (var i = 0; i < bytes.length; i++) {\n    s += bytes[i].toString(16).padStart(2, '0');\n  }\n  return s;\n} // https://tools.ietf.org/html/rfc4122\n\nfunction generateUUIDv4() {\n  var bytes = getRandomBytes(16);\n  bytes[6] = bytes[6] & 0x0f | 0x40; // version\n\n  bytes[8] = bytes[8] & 0xbf | 0x80; // variant\n\n  return hex(bytes.subarray(0, 4)) + '-' + hex(bytes.subarray(4, 6)) + '-' + hex(bytes.subarray(6, 8)) + '-' + hex(bytes.subarray(8, 10)) + '-' + hex(bytes.subarray(10, 16));\n}\nfunction getRandomValuesWithMathRandom(bytes) {\n  var max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n  for (var i = 0; i < bytes.length; i++) {\n    bytes[i] = Math.random() * max;\n  }\n}\nvar getRandomValues = function () {\n  var _crypto;\n  if (typeof crypto !== 'undefined' && typeof ((_crypto = crypto) === null || _crypto === void 0 ? void 0 : _crypto.getRandomValues) !== 'undefined') {\n    return crypto.getRandomValues.bind(crypto);\n  } else if (typeof msCrypto !== 'undefined') {\n    return msCrypto.getRandomValues.bind(msCrypto);\n  } else {\n    return getRandomValuesWithMathRandom;\n  }\n}();\nfunction getRandomBytes(length) {\n  var bytes = new Uint8Array(length);\n  getRandomValues(bytes);\n  return bytes;\n}\nfunction convertErrorToJson(err) {\n  var jsonObj = {};\n  if (!err) return jsonObj;\n  try {\n    Object.getOwnPropertyNames(err).forEach(function (key) {\n      jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n    });\n  } catch (_) {\n    return {\n      error: 'failed to serialize the error'\n    };\n  }\n  return jsonObj;\n}\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */\n\nfunction isOnline() {\n  var nav = typeof navigator !== 'undefined' ? navigator : typeof window !== 'undefined' && window.navigator ? window.navigator : undefined;\n  if (!nav) {\n    console.warn('isOnline failed to access window.navigator and assume browser is online');\n    return true;\n  } // RN navigator has undefined for onLine\n\n  if (typeof nav.onLine !== 'boolean') {\n    return true;\n  }\n  return nav.onLine;\n}\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */\n\nfunction addConnectionEventListeners(cb) {\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('offline', cb);\n    window.addEventListener('online', cb);\n  }\n}\nfunction removeConnectionEventListeners(cb) {\n  if (typeof window !== 'undefined' && window.removeEventListener) {\n    window.removeEventListener('offline', cb);\n    window.removeEventListener('online', cb);\n  }\n}\nvar axiosParamsSerializer = function axiosParamsSerializer(params) {\n  var newParams = [];\n  for (var k in params) {\n    // Stream backend doesn't treat \"undefined\" value same as value not being present.\n    // So, we need to skip the undefined values.\n    if (params[k] === undefined) continue;\n    if (Array.isArray(params[k]) || _typeof(params[k]) === 'object') {\n      newParams.push(\"\".concat(k, \"=\").concat(encodeURIComponent(JSON.stringify(params[k]))));\n    } else {\n      newParams.push(\"\".concat(k, \"=\").concat(encodeURIComponent(params[k])));\n    }\n  }\n  return newParams.join('&');\n};\n/**\n * Takes the message object, parses the dates, sets `__html`\n * and sets the status to `received` if missing; returns a new message object.\n *\n * @param {MessageResponse<StreamChatGenerics>} message `MessageResponse` object\n */\n\nfunction formatMessage(message) {\n  return _objectSpread$e(_objectSpread$e({}, message), {}, {\n    /**\n     * @deprecated please use `html`\n     */\n    __html: message.html,\n    // parse the dates\n    pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n    created_at: message.created_at ? new Date(message.created_at) : new Date(),\n    updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n    deleted_at: message.deleted_at ? new Date(message.deleted_at) : null,\n    status: message.status || 'received',\n    reaction_groups: maybeGetReactionGroupsFallback(message.reaction_groups, message.reaction_counts, message.reaction_scores)\n  });\n}\nvar findIndexInSortedArray = function findIndexInSortedArray(_ref) {\n  var needle = _ref.needle,\n    sortedArray = _ref.sortedArray,\n    selectKey = _ref.selectKey,\n    _ref$selectValueToCom = _ref.selectValueToCompare,\n    selectValueToCompare = _ref$selectValueToCom === void 0 ? function (e) {\n      return e;\n    } : _ref$selectValueToCom,\n    _ref$sortDirection = _ref.sortDirection,\n    sortDirection = _ref$sortDirection === void 0 ? 'ascending' : _ref$sortDirection;\n  if (!sortedArray.length) return 0;\n  var left = 0;\n  var right = sortedArray.length - 1;\n  var middle = 0;\n  var recalculateMiddle = function recalculateMiddle() {\n    middle = Math.round((left + right) / 2);\n  };\n  var comparableNeedle = selectValueToCompare(needle);\n  while (left <= right) {\n    recalculateMiddle();\n    var comparableMiddle = selectValueToCompare(sortedArray[middle]);\n    if (sortDirection === 'ascending' && comparableNeedle < comparableMiddle || sortDirection === 'descending' && comparableNeedle >= comparableMiddle) {\n      right = middle - 1;\n    } else {\n      left = middle + 1;\n    }\n  } // In case there are several array elements with the same comparable value, search around the insertion\n  // point to possibly find an element with the same key. If found, prefer it.\n  // This, for example, prevents duplication of messages with the same creation date.\n\n  if (selectKey) {\n    var needleKey = selectKey(needle);\n    var step = sortDirection === 'ascending' ? -1 : +1;\n    for (var i = left + step; 0 <= i && i < sortedArray.length && selectValueToCompare(sortedArray[i]) === comparableNeedle; i += step) {\n      if (selectKey(sortedArray[i]) === needleKey) {\n        return i;\n      }\n    }\n  }\n  return left;\n};\nfunction addToMessageList(messages, newMessage) {\n  var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'created_at';\n  var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  var addMessageToList = addIfDoesNotExist || timestampChanged;\n  var newMessages = _toConsumableArray(messages); // if created_at has changed, message should be filtered and re-inserted in correct order\n  // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n\n  if (timestampChanged) {\n    newMessages = newMessages.filter(function (message) {\n      return !(message.id && newMessage.id === message.id);\n    });\n  } // for empty list just concat and return unless it's an update or deletion\n\n  if (newMessages.length === 0 && addMessageToList) {\n    return newMessages.concat(newMessage);\n  } else if (newMessages.length === 0) {\n    return newMessages;\n  } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n  var messageTime = newMessage[sortBy].getTime(); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n  var messageIsNewest = newMessages.at(-1)[sortBy].getTime() < messageTime; // if message is newer than last item in the list concat and return unless it's an update or deletion\n\n  if (messageIsNewest && addMessageToList) {\n    return newMessages.concat(newMessage);\n  } else if (messageIsNewest) {\n    return newMessages;\n  } // find the closest index to push the new message\n\n  var insertionIndex = findIndexInSortedArray({\n    needle: newMessage,\n    sortedArray: newMessages,\n    sortDirection: 'ascending',\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    selectValueToCompare: function selectValueToCompare(m) {\n      return m[sortBy].getTime();\n    },\n    selectKey: function selectKey(m) {\n      return m.id;\n    }\n  }); // message already exists and not filtered with timestampChanged, update and return\n\n  if (!timestampChanged && newMessage.id && newMessages[insertionIndex] && newMessage.id === newMessages[insertionIndex].id) {\n    newMessages[insertionIndex] = newMessage;\n    return newMessages;\n  } // do not add updated or deleted messages to the list if they already exist or come with a timestamp change\n\n  if (addMessageToList) {\n    newMessages.splice(insertionIndex, 0, newMessage);\n  }\n  return newMessages;\n}\nfunction maybeGetReactionGroupsFallback(groups, counts, scores) {\n  if (groups) {\n    return groups;\n  }\n  if (counts && scores) {\n    var fallback = {};\n    for (var _i2 = 0, _Object$keys = Object.keys(counts); _i2 < _Object$keys.length; _i2++) {\n      var type = _Object$keys[_i2];\n      fallback[type] = {\n        count: counts[type],\n        sum_scores: scores[type]\n      };\n    }\n    return fallback;\n  }\n  return null;\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n// works exactly the same as lodash.debounce\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar debounce = function debounce(fn) {\n  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref2$leading = _ref2.leading,\n    leading = _ref2$leading === void 0 ? false : _ref2$leading,\n    _ref2$trailing = _ref2.trailing,\n    trailing = _ref2$trailing === void 0 ? true : _ref2$trailing;\n  var runningTimeout = null;\n  var argsForTrailingExecution = null;\n  var lastResult;\n  var debouncedFn = function debouncedFn() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (runningTimeout) {\n      clearTimeout(runningTimeout);\n    } else if (leading) {\n      lastResult = fn.apply(void 0, args);\n    }\n    if (trailing) argsForTrailingExecution = args;\n    var timeoutHandler = function timeoutHandler() {\n      if (argsForTrailingExecution) {\n        lastResult = fn.apply(void 0, _toConsumableArray(argsForTrailingExecution));\n        argsForTrailingExecution = null;\n      }\n      runningTimeout = null;\n    };\n    runningTimeout = setTimeout(timeoutHandler, timeout);\n    return lastResult;\n  };\n  debouncedFn.cancel = function () {\n    if (runningTimeout) clearTimeout(runningTimeout);\n  };\n  debouncedFn.flush = function () {\n    if (runningTimeout) {\n      clearTimeout(runningTimeout);\n      runningTimeout = null;\n      if (argsForTrailingExecution) {\n        lastResult = fn.apply(void 0, _toConsumableArray(argsForTrailingExecution));\n      }\n    }\n    return lastResult;\n  };\n  return debouncedFn;\n}; // works exactly the same as lodash.throttle\n\nvar throttle = function throttle(fn) {\n  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref3$leading = _ref3.leading,\n    leading = _ref3$leading === void 0 ? true : _ref3$leading,\n    _ref3$trailing = _ref3.trailing,\n    trailing = _ref3$trailing === void 0 ? false : _ref3$trailing;\n  var runningTimeout = null;\n  var storedArgs = null;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (runningTimeout) {\n      if (trailing) storedArgs = args;\n      return;\n    }\n    if (leading) fn.apply(void 0, args);\n    var timeoutHandler = function timeoutHandler() {\n      if (storedArgs) {\n        fn.apply(void 0, _toConsumableArray(storedArgs));\n        storedArgs = null;\n        runningTimeout = setTimeout(timeoutHandler, timeout);\n        return;\n      }\n      runningTimeout = null;\n    };\n    runningTimeout = setTimeout(timeoutHandler, timeout);\n  };\n};\nvar get = function get(obj, path) {\n  return path.split('.').reduce(function (acc, key) {\n    if (acc && _typeof(acc) === 'object' && key in acc) {\n      return acc[key];\n    }\n    return undefined;\n  }, obj);\n}; // works exactly the same as lodash.uniqBy\n\nvar uniqBy = function uniqBy(array, iteratee) {\n  if (!Array.isArray(array)) return [];\n  var seen = new Set();\n  return array.filter(function (item) {\n    var key = typeof iteratee === 'function' ? iteratee(item) : get(item, iteratee);\n    if (seen.has(key)) return false;\n    seen.add(key);\n    return true;\n  });\n};\nfunction binarySearchByDateEqualOrNearestGreater(array, targetDate) {\n  var left = 0;\n  var right = array.length - 1;\n  while (left <= right) {\n    var mid = Math.floor((left + right) / 2);\n    var midCreatedAt = array[mid].created_at;\n    if (!midCreatedAt) {\n      left += 1;\n      continue;\n    }\n    var midDate = new Date(midCreatedAt);\n    if (midDate.getTime() === targetDate.getTime()) {\n      return mid;\n    } else if (midDate.getTime() < targetDate.getTime()) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n  return left;\n}\nvar messagePaginationCreatedAtAround = function messagePaginationCreatedAtAround(_ref4) {\n  var parentSet = _ref4.parentSet,\n    requestedPageSize = _ref4.requestedPageSize,\n    returnedPage = _ref4.returnedPage,\n    messagePaginationOptions = _ref4.messagePaginationOptions;\n  var newPagination = _objectSpread$e({}, parentSet.pagination);\n  if (!(messagePaginationOptions !== null && messagePaginationOptions !== void 0 && messagePaginationOptions.created_at_around)) return newPagination;\n  var hasPrev;\n  var hasNext;\n  var updateHasPrev;\n  var updateHasNext;\n  var createdAtAroundDate = new Date(messagePaginationOptions.created_at_around);\n  var _ref5 = [returnedPage[0], returnedPage.slice(-1)[0]],\n    firstPageMsg = _ref5[0],\n    lastPageMsg = _ref5[1]; // expect ASC order (from oldest to newest)\n\n  var wholePageHasNewerMessages = !!(firstPageMsg !== null && firstPageMsg !== void 0 && firstPageMsg.created_at) && new Date(firstPageMsg.created_at) > createdAtAroundDate;\n  var wholePageHasOlderMessages = !!(lastPageMsg !== null && lastPageMsg !== void 0 && lastPageMsg.created_at) && new Date(lastPageMsg.created_at) < createdAtAroundDate;\n  var requestedPageSizeNotMet = requestedPageSize > parentSet.messages.length && requestedPageSize > returnedPage.length;\n  var noMoreMessages = (requestedPageSize > parentSet.messages.length || parentSet.messages.length >= returnedPage.length) && requestedPageSize > returnedPage.length;\n  if (wholePageHasNewerMessages) {\n    hasPrev = false;\n    updateHasPrev = true;\n    if (requestedPageSizeNotMet) {\n      hasNext = false;\n      updateHasNext = true;\n    }\n  } else if (wholePageHasOlderMessages) {\n    hasNext = false;\n    updateHasNext = true;\n    if (requestedPageSizeNotMet) {\n      hasPrev = false;\n      updateHasPrev = true;\n    }\n  } else if (noMoreMessages) {\n    hasNext = hasPrev = false;\n    updateHasPrev = updateHasNext = true;\n  } else {\n    var _parentSet$messages$, _parentSet$messages$s;\n    var firstPageMsgIsFirstInSet = (firstPageMsg === null || firstPageMsg === void 0 ? void 0 : firstPageMsg.id) && firstPageMsg.id === ((_parentSet$messages$ = parentSet.messages[0]) === null || _parentSet$messages$ === void 0 ? void 0 : _parentSet$messages$.id),\n      lastPageMsgIsLastInSet = (lastPageMsg === null || lastPageMsg === void 0 ? void 0 : lastPageMsg.id) && lastPageMsg.id === ((_parentSet$messages$s = parentSet.messages.slice(-1)[0]) === null || _parentSet$messages$s === void 0 ? void 0 : _parentSet$messages$s.id);\n    updateHasPrev = firstPageMsgIsFirstInSet;\n    updateHasNext = lastPageMsgIsLastInSet;\n    var midPointByCount = Math.floor(returnedPage.length / 2);\n    var midPointByCreationDate = binarySearchByDateEqualOrNearestGreater(returnedPage, createdAtAroundDate);\n    if (midPointByCreationDate !== -1) {\n      hasPrev = midPointByCount <= midPointByCreationDate;\n      hasNext = midPointByCount >= midPointByCreationDate;\n    }\n  }\n  if (updateHasPrev && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;\n  if (updateHasNext && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;\n  return newPagination;\n};\nvar messagePaginationIdAround = function messagePaginationIdAround(_ref6) {\n  var _parentSet$messages$2, _parentSet$messages$s2;\n  var parentSet = _ref6.parentSet,\n    requestedPageSize = _ref6.requestedPageSize,\n    returnedPage = _ref6.returnedPage,\n    messagePaginationOptions = _ref6.messagePaginationOptions;\n  var newPagination = _objectSpread$e({}, parentSet.pagination);\n  var _ref7 = messagePaginationOptions || {},\n    id_around = _ref7.id_around;\n  if (!id_around) return newPagination;\n  var hasPrev;\n  var hasNext;\n  var _ref8 = [returnedPage[0], returnedPage.slice(-1)[0]],\n    firstPageMsg = _ref8[0],\n    lastPageMsg = _ref8[1];\n  var firstPageMsgIsFirstInSet = (firstPageMsg === null || firstPageMsg === void 0 ? void 0 : firstPageMsg.id) === ((_parentSet$messages$2 = parentSet.messages[0]) === null || _parentSet$messages$2 === void 0 ? void 0 : _parentSet$messages$2.id),\n    lastPageMsgIsLastInSet = (lastPageMsg === null || lastPageMsg === void 0 ? void 0 : lastPageMsg.id) === ((_parentSet$messages$s2 = parentSet.messages.slice(-1)[0]) === null || _parentSet$messages$s2 === void 0 ? void 0 : _parentSet$messages$s2.id);\n  var updateHasPrev = firstPageMsgIsFirstInSet;\n  var updateHasNext = lastPageMsgIsLastInSet;\n  var midPoint = Math.floor(returnedPage.length / 2);\n  var noMoreMessages = (requestedPageSize > parentSet.messages.length || parentSet.messages.length >= returnedPage.length) && requestedPageSize > returnedPage.length;\n  if (noMoreMessages) {\n    hasNext = hasPrev = false;\n    updateHasPrev = updateHasNext = true;\n  } else if (!returnedPage[midPoint]) {\n    return newPagination;\n  } else if (returnedPage[midPoint].id === id_around) {\n    hasPrev = hasNext = true;\n  } else {\n    var targetMsg;\n    var halves = [returnedPage.slice(0, midPoint), returnedPage.slice(midPoint)];\n    hasPrev = hasNext = true;\n    for (var i = 0; i < halves.length; i++) {\n      targetMsg = halves[i].find(function (message) {\n        return message.id === id_around;\n      });\n      if (targetMsg && i === 0) {\n        hasPrev = false;\n      }\n      if (targetMsg && i === 1) {\n        hasNext = false;\n      }\n    }\n  }\n  if (updateHasPrev && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;\n  if (updateHasNext && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;\n  return newPagination;\n};\nvar messagePaginationLinear = function messagePaginationLinear(_ref9) {\n  var _parentSet$messages$3, _parentSet$messages$s3;\n  var parentSet = _ref9.parentSet,\n    requestedPageSize = _ref9.requestedPageSize,\n    returnedPage = _ref9.returnedPage,\n    messagePaginationOptions = _ref9.messagePaginationOptions;\n  var newPagination = _objectSpread$e({}, parentSet.pagination);\n  var hasPrev;\n  var hasNext;\n  var _ref10 = [returnedPage[0], returnedPage.slice(-1)[0]],\n    firstPageMsg = _ref10[0],\n    lastPageMsg = _ref10[1];\n  var firstPageMsgIsFirstInSet = (firstPageMsg === null || firstPageMsg === void 0 ? void 0 : firstPageMsg.id) && firstPageMsg.id === ((_parentSet$messages$3 = parentSet.messages[0]) === null || _parentSet$messages$3 === void 0 ? void 0 : _parentSet$messages$3.id),\n    lastPageMsgIsLastInSet = (lastPageMsg === null || lastPageMsg === void 0 ? void 0 : lastPageMsg.id) && lastPageMsg.id === ((_parentSet$messages$s3 = parentSet.messages.slice(-1)[0]) === null || _parentSet$messages$s3 === void 0 ? void 0 : _parentSet$messages$s3.id);\n  var queriedNextMessages = messagePaginationOptions && (messagePaginationOptions.created_at_after_or_equal || messagePaginationOptions.created_at_after || messagePaginationOptions.id_gt || messagePaginationOptions.id_gte);\n  var queriedPrevMessages = typeof messagePaginationOptions === 'undefined' ? true : messagePaginationOptions.created_at_before_or_equal || messagePaginationOptions.created_at_before || messagePaginationOptions.id_lt || messagePaginationOptions.id_lte || messagePaginationOptions.offset;\n  var containsUnrecognizedOptionsOnly = !queriedNextMessages && !queriedPrevMessages && !(messagePaginationOptions !== null && messagePaginationOptions !== void 0 && messagePaginationOptions.id_around) && !(messagePaginationOptions !== null && messagePaginationOptions !== void 0 && messagePaginationOptions.created_at_around);\n  var hasMore = returnedPage.length >= requestedPageSize;\n  if (typeof queriedPrevMessages !== 'undefined' || containsUnrecognizedOptionsOnly) {\n    hasPrev = hasMore;\n  }\n  if (typeof queriedNextMessages !== 'undefined') {\n    hasNext = hasMore;\n  }\n  var returnedPageIsEmpty = returnedPage.length === 0;\n  if ((firstPageMsgIsFirstInSet || returnedPageIsEmpty) && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;\n  if ((lastPageMsgIsLastInSet || returnedPageIsEmpty) && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;\n  return newPagination;\n};\nvar messageSetPagination = function messageSetPagination(params) {\n  var _params$messagePagina, _params$messagePagina2;\n  if (params.parentSet.messages.length < params.returnedPage.length) {\n    var _params$logger;\n    (_params$logger = params.logger) === null || _params$logger === void 0 ? void 0 : _params$logger.call(params, 'error', 'Corrupted message set state: parent set size < returned page size');\n    return params.parentSet.pagination;\n  }\n  if ((_params$messagePagina = params.messagePaginationOptions) !== null && _params$messagePagina !== void 0 && _params$messagePagina.created_at_around) {\n    return messagePaginationCreatedAtAround(params);\n  } else if ((_params$messagePagina2 = params.messagePaginationOptions) !== null && _params$messagePagina2 !== void 0 && _params$messagePagina2.id_around) {\n    return messagePaginationIdAround(params);\n  } else {\n    return messagePaginationLinear(params);\n  }\n};\n/**\n * A utility object used to prevent duplicate invocation of channel.watch() to be triggered when\n * 'notification.message_new' and 'notification.added_to_channel' events arrive at the same time.\n */\n\nvar WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL = {};\n\n/**\n * Calls channel.watch() if it was not already recently called. Waits for watch promise to resolve even if it was invoked previously.\n * If the channel is not passed as a property, it will get it either by its channel.cid or by its members list and do the same.\n * @param client\n * @param members\n * @param options\n * @param type\n * @param id\n * @param channel\n */\nvar getAndWatchChannel = /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref11) {\n    var channel, client, id, members, options, type, channelToWatch, originalCid, queryPromise;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            channel = _ref11.channel, client = _ref11.client, id = _ref11.id, members = _ref11.members, options = _ref11.options, type = _ref11.type;\n            if (!(!channel && !type)) {\n              _context.next = 3;\n              break;\n            }\n            throw new Error('Channel or channel type have to be provided to query a channel.');\n          case 3:\n            // unfortunately typescript is not able to infer that if (!channel && !type) === false, then channel or type has to be truthy\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            channelToWatch = channel || client.channel(type, id, {\n              members: members\n            }); // need to keep as with call to channel.watch the id can be changed from undefined to an actual ID generated server-side\n\n            originalCid = channelToWatch.id ? channelToWatch.cid : members && members.length ? generateChannelTempCid(channelToWatch.type, members) : undefined;\n            if (originalCid) {\n              _context.next = 7;\n              break;\n            }\n            throw new Error('Channel ID or channel members array have to be provided to query a channel.');\n          case 7:\n            queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n            if (!queryPromise) {\n              _context.next = 13;\n              break;\n            }\n            _context.next = 11;\n            return queryPromise;\n          case 11:\n            _context.next = 20;\n            break;\n          case 13:\n            _context.prev = 13;\n            WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = channelToWatch.watch(options);\n            _context.next = 17;\n            return WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n          case 17:\n            _context.prev = 17;\n            delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n            return _context.finish(17);\n          case 20:\n            return _context.abrupt(\"return\", channelToWatch);\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[13,, 17, 20]]);\n  }));\n  return function getAndWatchChannel(_x) {\n    return _ref12.apply(this, arguments);\n  };\n}();\n/**\n * Generates a temporary channel.cid for channels created without ID, as they need to be referenced\n * by an identifier until the back-end generates the final ID. The cid is generated by its member IDs\n * which are sorted and can be recreated the same every time given the same arguments.\n * @param channelType\n * @param members\n */\n\nvar generateChannelTempCid = function generateChannelTempCid(channelType, members) {\n  if (!members) return;\n  var membersStr = _toConsumableArray(members).sort().join(',');\n  if (!membersStr) return;\n  return \"\".concat(channelType, \":!members-\").concat(membersStr);\n};\n/**\n * Checks if a channel is pinned or not. Will return true only if channel.state.membership.pinned_at exists.\n * @param channel\n */\n\nvar isChannelPinned = function isChannelPinned(channel) {\n  if (!channel) return false;\n  var member = channel.state.membership;\n  return !!(member !== null && member !== void 0 && member.pinned_at);\n};\n/**\n * Checks if a channel is archived or not. Will return true only if channel.state.membership.archived_at exists.\n * @param channel\n */\n\nvar isChannelArchived = function isChannelArchived(channel) {\n  if (!channel) return false;\n  var member = channel.state.membership;\n  return !!(member !== null && member !== void 0 && member.archived_at);\n};\n/**\n * A utility that tells us whether we should consider archived channels or not based\n * on filters. Will return true only if filters.archived exists and is a boolean value.\n * @param filters\n */\n\nvar shouldConsiderArchivedChannels = function shouldConsiderArchivedChannels(filters) {\n  if (!filters) return false;\n  return typeof filters.archived === 'boolean';\n};\n/**\n * Extracts the value of the sort parameter at a given index, for a targeted key. Can\n * handle both array and object versions of sort. Will return null if the index/key\n * combination does not exist.\n * @param atIndex - the index at which we'll examine the sort value, if it's an array one\n * @param sort - the sort value - both array and object notations are accepted\n * @param targetKey - the target key which needs to exist for the sort at a certain index\n */\n\nvar extractSortValue = function extractSortValue(_ref13) {\n  var _option$targetKey, _option;\n  var atIndex = _ref13.atIndex,\n    sort = _ref13.sort,\n    targetKey = _ref13.targetKey;\n  if (!sort) return null;\n  var option = null;\n  if (Array.isArray(sort)) {\n    var _sort$atIndex;\n    option = (_sort$atIndex = sort[atIndex]) !== null && _sort$atIndex !== void 0 ? _sort$atIndex : null;\n  } else {\n    var index = 0;\n    for (var _key3 in sort) {\n      if (index !== atIndex) {\n        index++;\n        continue;\n      }\n      if (_key3 !== targetKey) {\n        return null;\n      }\n      option = sort;\n      break;\n    }\n  }\n  return (_option$targetKey = (_option = option) === null || _option === void 0 ? void 0 : _option[targetKey]) !== null && _option$targetKey !== void 0 ? _option$targetKey : null;\n};\n/**\n * Returns true only if `{ pinned_at: -1 }` or `{ pinned_at: 1 }` option is first within the `sort` array.\n */\n\nvar shouldConsiderPinnedChannels = function shouldConsiderPinnedChannels(sort) {\n  var value = findPinnedAtSortOrder({\n    sort: sort\n  });\n  if (typeof value !== 'number') return false;\n  return Math.abs(value) === 1;\n};\n/**\n * Checks whether the sort value of type object contains a pinned_at value or if\n * an array sort value type has the first value be an object containing pinned_at.\n * @param sort\n */\n\nvar findPinnedAtSortOrder = function findPinnedAtSortOrder(_ref14) {\n  var sort = _ref14.sort;\n  return extractSortValue({\n    atIndex: 0,\n    sort: sort,\n    targetKey: 'pinned_at'\n  });\n};\n/**\n * Finds the index of the last consecutively pinned channel, starting from the start of the\n * array. Will not consider any pinned channels after the contiguous subsequence at the\n * start of the array.\n * @param channels\n */\n\nvar findLastPinnedChannelIndex = function findLastPinnedChannelIndex(_ref15) {\n  var channels = _ref15.channels;\n  var lastPinnedChannelIndex = null;\n  var _iterator2 = _createForOfIteratorHelper$5(channels),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var channel = _step2.value;\n      if (!isChannelPinned(channel)) break;\n      if (typeof lastPinnedChannelIndex === 'number') {\n        lastPinnedChannelIndex++;\n      } else {\n        lastPinnedChannelIndex = 0;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return lastPinnedChannelIndex;\n};\n/**\n * A utility used to move a channel towards the beginning of a list of channels (promote it to a higher position). It\n * considers pinned channels in the process if needed and makes sure to only update the list reference if the list\n * should actually change. It will try to move the channel as high as it can within the list.\n * @param channels - the list of channels we want to modify\n * @param channelToMove - the channel we want to promote\n * @param channelToMoveIndexWithinChannels - optionally, the index of the channel we want to move if we know it (will skip a manual check)\n * @param sort - the sort value used to check for pinned channels\n */\n\nvar promoteChannel = function promoteChannel(_ref16) {\n  var channels = _ref16.channels,\n    channelToMove = _ref16.channelToMove,\n    channelToMoveIndexWithinChannels = _ref16.channelToMoveIndexWithinChannels,\n    sort = _ref16.sort;\n  // get index of channel to move up\n  var targetChannelIndex = channelToMoveIndexWithinChannels !== null && channelToMoveIndexWithinChannels !== void 0 ? channelToMoveIndexWithinChannels : channels.findIndex(function (channel) {\n    return channel.cid === channelToMove.cid;\n  });\n  var targetChannelExistsWithinList = targetChannelIndex >= 0;\n  var targetChannelAlreadyAtTheTop = targetChannelIndex === 0; // pinned channels should not move within the list based on recent activity, channels which\n  // receive messages and are not pinned should move upwards but only under the last pinned channel\n  // in the list\n\n  var considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n  var isTargetChannelPinned = isChannelPinned(channelToMove);\n  if (targetChannelAlreadyAtTheTop || considerPinnedChannels && isTargetChannelPinned) {\n    return channels;\n  }\n  var newChannels = _toConsumableArray(channels); // target channel index is known, remove it from the list\n\n  if (targetChannelExistsWithinList) {\n    newChannels.splice(targetChannelIndex, 1);\n  } // as position of pinned channels has to stay unchanged, we need to\n  // find last pinned channel in the list to move the target channel after\n\n  var lastPinnedChannelIndex = null;\n  if (considerPinnedChannels) {\n    lastPinnedChannelIndex = findLastPinnedChannelIndex({\n      channels: newChannels\n    });\n  } // re-insert it at the new place (to specific index if pinned channels are considered)\n\n  newChannels.splice(typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0, 0, channelToMove);\n  return newChannels;\n};\nvar DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE = 25;\nvar DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE = 100;\nvar DEFAULT_MESSAGE_SET_PAGINATION = {\n  hasNext: false,\n  hasPrev: false\n};\nfunction ownKeys$d(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$d(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$d(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$d(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/**\n * ChannelState - A container class for the channel state.\n */\nvar ChannelState = /*#__PURE__*/function () {\n  /**\n   * Flag which indicates if channel state contain latest/recent messages or no.\n   * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   * When false, any new message (received by websocket event - message.new) will not\n   * be pushed on to message list.\n   */\n\n  /**\n   * Disjoint lists of messages\n   * Users can jump in the message list (with searching) and this can result in disjoint lists of messages\n   * The state manages these lists and merges them when lists overlap\n   * The messages array contains the currently active set\n   */\n  function ChannelState(channel) {\n    var _this = this,\n      _channel$state;\n    _classCallCheck(this, ChannelState);\n    _defineProperty(this, \"_channel\", void 0);\n    _defineProperty(this, \"watcher_count\", void 0);\n    _defineProperty(this, \"typing\", void 0);\n    _defineProperty(this, \"read\", void 0);\n    _defineProperty(this, \"pinnedMessages\", void 0);\n    _defineProperty(this, \"pending_messages\", void 0);\n    _defineProperty(this, \"threads\", void 0);\n    _defineProperty(this, \"mutedUsers\", void 0);\n    _defineProperty(this, \"watchers\", void 0);\n    _defineProperty(this, \"members\", void 0);\n    _defineProperty(this, \"unreadCount\", void 0);\n    _defineProperty(this, \"membership\", void 0);\n    _defineProperty(this, \"last_message_at\", void 0);\n    _defineProperty(this, \"isUpToDate\", void 0);\n    _defineProperty(this, \"messageSets\", []);\n    _defineProperty(this, \"formatMessage\", function (message) {\n      return formatMessage(message);\n    });\n    _defineProperty(this, \"setIsUpToDate\", function (isUpToDate) {\n      _this.isUpToDate = isUpToDate;\n    });\n    _defineProperty(this, \"removeMessageFromArray\", function (msgArray, msg) {\n      var result = msgArray.filter(function (message) {\n        return !(!!message.id && !!msg.id && message.id === msg.id);\n      });\n      return {\n        removed: result.length < msgArray.length,\n        result: result\n      };\n    });\n    _defineProperty(this, \"updateUserMessages\", function (user) {\n      var _updateUserMessages = function _updateUserMessages(messages, user) {\n        for (var i = 0; i < messages.length; i++) {\n          var _m$user;\n          var m = messages[i];\n          if (((_m$user = m.user) === null || _m$user === void 0 ? void 0 : _m$user.id) === user.id) {\n            messages[i] = _objectSpread$d(_objectSpread$d({}, m), {}, {\n              user: user\n            });\n          }\n        }\n      };\n      _this.messageSets.forEach(function (set) {\n        return _updateUserMessages(set.messages, user);\n      });\n      for (var parentId in _this.threads) {\n        _updateUserMessages(_this.threads[parentId], user);\n      }\n      _updateUserMessages(_this.pinnedMessages, user);\n    });\n    _defineProperty(this, \"deleteUserMessages\", function (user) {\n      var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _deleteUserMessages = function _deleteUserMessages(messages, user) {\n        var hardDelete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        for (var i = 0; i < messages.length; i++) {\n          var _m$user2;\n          var m = messages[i];\n          if (((_m$user2 = m.user) === null || _m$user2 === void 0 ? void 0 : _m$user2.id) !== user.id) {\n            continue;\n          }\n          if (hardDelete) {\n            /**\n             * In case of hard delete, we need to strip down all text, html,\n             * attachments and all the custom properties on message\n             */\n            messages[i] = {\n              cid: m.cid,\n              created_at: m.created_at,\n              deleted_at: user.deleted_at,\n              id: m.id,\n              latest_reactions: [],\n              mentioned_users: [],\n              own_reactions: [],\n              parent_id: m.parent_id,\n              reply_count: m.reply_count,\n              status: m.status,\n              thread_participants: m.thread_participants,\n              type: 'deleted',\n              updated_at: m.updated_at,\n              user: m.user\n            };\n          } else {\n            messages[i] = _objectSpread$d(_objectSpread$d({}, m), {}, {\n              type: 'deleted',\n              deleted_at: user.deleted_at ? new Date(user.deleted_at) : null\n            });\n          }\n        }\n      };\n      _this.messageSets.forEach(function (set) {\n        return _deleteUserMessages(set.messages, user, hardDelete);\n      });\n      for (var parentId in _this.threads) {\n        _deleteUserMessages(_this.threads[parentId], user, hardDelete);\n      }\n      _deleteUserMessages(_this.pinnedMessages, user, hardDelete);\n    });\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = {};\n    this.read = {};\n    this.initMessages();\n    this.pinnedMessages = [];\n    this.pending_messages = [];\n    this.threads = {}; // a list of users to hide messages from\n\n    this.mutedUsers = [];\n    this.watchers = {};\n    this.members = {};\n    this.membership = {};\n    this.unreadCount = 0;\n    /**\n     * Flag which indicates if channel state contain latest/recent messages or no.\n     * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     * When false, any new message (received by websocket event - message.new) will not\n     * be pushed on to message list.\n     */\n\n    this.isUpToDate = true;\n    this.last_message_at = (channel === null || channel === void 0 ? void 0 : (_channel$state = channel.state) === null || _channel$state === void 0 ? void 0 : _channel$state.last_message_at) != null ? new Date(channel.state.last_message_at) : null;\n  }\n  _createClass(ChannelState, [{\n    key: \"messages\",\n    get: function get() {\n      var _this$messageSets$fin;\n      return ((_this$messageSets$fin = this.messageSets.find(function (s) {\n        return s.isCurrent;\n      })) === null || _this$messageSets$fin === void 0 ? void 0 : _this$messageSets$fin.messages) || [];\n    },\n    set: function set(messages) {\n      var index = this.messageSets.findIndex(function (s) {\n        return s.isCurrent;\n      });\n      this.messageSets[index].messages = messages;\n    }\n    /**\n     * The list of latest messages\n     * The messages array not always contains the latest messages (for example if a user searched for an earlier message, that is in a different message set)\n     */\n  }, {\n    key: \"latestMessages\",\n    get: function get() {\n      var _this$messageSets$fin2;\n      return ((_this$messageSets$fin2 = this.messageSets.find(function (s) {\n        return s.isLatest;\n      })) === null || _this$messageSets$fin2 === void 0 ? void 0 : _this$messageSets$fin2.messages) || [];\n    },\n    set: function set(messages) {\n      var index = this.messageSets.findIndex(function (s) {\n        return s.isLatest;\n      });\n      this.messageSets[index].messages = messages;\n    }\n  }, {\n    key: \"messagePagination\",\n    get: function get() {\n      var _this$messageSets$fin3;\n      return ((_this$messageSets$fin3 = this.messageSets.find(function (s) {\n        return s.isCurrent;\n      })) === null || _this$messageSets$fin3 === void 0 ? void 0 : _this$messageSets$fin3.pagination) || DEFAULT_MESSAGE_SET_PAGINATION;\n    }\n    /**\n     * addMessageSorted - Add a message to the state\n     *\n     * @param {MessageResponse<StreamChatGenerics>} newMessage A new message\n     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n     * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if message is not in the list (only used if addIfDoesNotExist is true)\n     */\n  }, {\n    key: \"addMessageSorted\",\n    value: function addMessageSorted(newMessage) {\n      var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var addIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var messageSetToAddToIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'latest';\n      return this.addMessagesSorted([newMessage], timestampChanged, false, addIfDoesNotExist, messageSetToAddToIfDoesNotExist);\n    }\n    /**\n     * Takes the message object, parses the dates, sets `__html`\n     * and sets the status to `received` if missing; returns a new message object.\n     *\n     * @param {MessageResponse<StreamChatGenerics>} message `MessageResponse` object\n     */\n  }, {\n    key: \"addMessagesSorted\",\n    value:\n    /**\n     * addMessagesSorted - Add the list of messages to state and resorts the messages\n     *\n     * @param {Array<MessageResponse<StreamChatGenerics>>} newMessages A list of messages\n     * @param {boolean} timestampChanged Whether updating messages with changed created_at value.\n     * @param {boolean} initializing Whether channel is being initialized.\n     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n     * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if messages are not in the list (only used if addIfDoesNotExist is true)\n     *\n     */\n    function addMessagesSorted(newMessages) {\n      var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var initializing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var addIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var messageSetToAddToIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'current';\n      var _this$findTargetMessa = this.findTargetMessageSet(newMessages, addIfDoesNotExist, messageSetToAddToIfDoesNotExist),\n        messagesToAdd = _this$findTargetMessa.messagesToAdd,\n        targetMessageSetIndex = _this$findTargetMessa.targetMessageSetIndex;\n      for (var i = 0; i < messagesToAdd.length; i += 1) {\n        var isFromShadowBannedUser = messagesToAdd[i].shadowed;\n        if (isFromShadowBannedUser) {\n          continue;\n        } // If message is already formatted we can skip the tasks below\n        // This will be true for messages that are already present at the state -> this happens when we perform merging of message sets\n        // This will be also true for message previews used by some SDKs\n\n        var isMessageFormatted = messagesToAdd[i].created_at instanceof Date;\n        var message = void 0;\n        if (isMessageFormatted) {\n          message = messagesToAdd[i];\n        } else {\n          var _this$_channel;\n          message = this.formatMessage(messagesToAdd[i]);\n          if (message.user && (_this$_channel = this._channel) !== null && _this$_channel !== void 0 && _this$_channel.cid) {\n            /**\n             * Store the reference to user for this channel, so that when we have to\n             * handle updates to user, we can use the reference map, to determine which\n             * channels need to be updated with updated user object.\n             */\n            this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);\n          }\n          if (initializing && message.id && this.threads[message.id]) {\n            // If we are initializing the state of channel (e.g., in case of connection recovery),\n            // then in that case we remove thread related to this message from threads object.\n            // This way we can ensure that we don't have any stale data in thread object\n            // and consumer can refetch the replies.\n            delete this.threads[message.id];\n          }\n          if (!this.last_message_at) {\n            this.last_message_at = new Date(message.created_at.getTime());\n          }\n          if (message.created_at.getTime() > this.last_message_at.getTime()) {\n            this.last_message_at = new Date(message.created_at.getTime());\n          }\n        } // update or append the messages...\n\n        var parentID = message.parent_id; // add to the given message set\n\n        if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {\n          this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(this.messageSets[targetMessageSetIndex].messages, message, timestampChanged, 'created_at', addIfDoesNotExist);\n        }\n        /**\n         * Add message to thread if applicable and the message\n         * was added when querying for replies, or the thread already exits.\n         * This is to prevent the thread state from getting out of sync if\n         * a thread message is shown in channel but older than the newest thread\n         * message. This situation can result in a thread state where a random\n         * message is \"oldest\" message, and newer messages are therefore not loaded.\n         * This can also occur if an old thread message is updated.\n         */\n\n        if (parentID && !initializing) {\n          var thread = this.threads[parentID] || [];\n          this.threads[parentID] = this._addToMessageList(thread, message, timestampChanged, 'created_at', addIfDoesNotExist);\n        }\n      }\n      return {\n        messageSet: this.messageSets[targetMessageSetIndex]\n      };\n    }\n    /**\n     * addPinnedMessages - adds messages in pinnedMessages property\n     *\n     * @param {Array<MessageResponse<StreamChatGenerics>>} pinnedMessages A list of pinned messages\n     *\n     */\n  }, {\n    key: \"addPinnedMessages\",\n    value: function addPinnedMessages(pinnedMessages) {\n      for (var i = 0; i < pinnedMessages.length; i += 1) {\n        this.addPinnedMessage(pinnedMessages[i]);\n      }\n    }\n    /**\n     * addPinnedMessage - adds message in pinnedMessages\n     *\n     * @param {MessageResponse<StreamChatGenerics>} pinnedMessage message to update\n     *\n     */\n  }, {\n    key: \"addPinnedMessage\",\n    value: function addPinnedMessage(pinnedMessage) {\n      this.pinnedMessages = this._addToMessageList(this.pinnedMessages, this.formatMessage(pinnedMessage), false, 'pinned_at');\n    }\n    /**\n     * removePinnedMessage - removes pinned message from pinnedMessages\n     *\n     * @param {MessageResponse<StreamChatGenerics>} message message to remove\n     *\n     */\n  }, {\n    key: \"removePinnedMessage\",\n    value: function removePinnedMessage(message) {\n      var _this$removeMessageFr = this.removeMessageFromArray(this.pinnedMessages, message),\n        result = _this$removeMessageFr.result;\n      this.pinnedMessages = result;\n    }\n  }, {\n    key: \"addReaction\",\n    value: function addReaction(reaction, message, enforce_unique) {\n      var _this2 = this;\n      if (!message) return;\n      var messageWithReaction = message;\n      this._updateMessage(message, function (msg) {\n        messageWithReaction.own_reactions = _this2._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);\n        return _this2.formatMessage(messageWithReaction);\n      });\n      return messageWithReaction;\n    }\n  }, {\n    key: \"_addOwnReactionToMessage\",\n    value: function _addOwnReactionToMessage(ownReactions, reaction, enforce_unique) {\n      if (enforce_unique) {\n        ownReactions = [];\n      } else {\n        ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n      }\n      ownReactions = ownReactions || [];\n      if (this._channel.getClient().userID === reaction.user_id) {\n        ownReactions.push(reaction);\n      }\n      return ownReactions;\n    }\n  }, {\n    key: \"_removeOwnReactionFromMessage\",\n    value: function _removeOwnReactionFromMessage(ownReactions, reaction) {\n      if (ownReactions) {\n        return ownReactions.filter(function (item) {\n          return item.user_id !== reaction.user_id || item.type !== reaction.type;\n        });\n      }\n      return ownReactions;\n    }\n  }, {\n    key: \"removeReaction\",\n    value: function removeReaction(reaction, message) {\n      var _this3 = this;\n      if (!message) return;\n      var messageWithReaction = message;\n      this._updateMessage(message, function (msg) {\n        messageWithReaction.own_reactions = _this3._removeOwnReactionFromMessage(msg.own_reactions, reaction);\n        return _this3.formatMessage(messageWithReaction);\n      });\n      return messageWithReaction;\n    }\n  }, {\n    key: \"_updateQuotedMessageReferences\",\n    value: function _updateQuotedMessageReferences(_ref) {\n      var _this4 = this;\n      var message = _ref.message,\n        remove = _ref.remove;\n      var parseMessage = function parseMessage(m) {\n        var _m$pinned_at, _m$updated_at;\n        return _objectSpread$d(_objectSpread$d({}, m), {}, {\n          created_at: m.created_at.toISOString(),\n          pinned_at: (_m$pinned_at = m.pinned_at) === null || _m$pinned_at === void 0 ? void 0 : _m$pinned_at.toISOString(),\n          updated_at: (_m$updated_at = m.updated_at) === null || _m$updated_at === void 0 ? void 0 : _m$updated_at.toISOString()\n        });\n      };\n      var update = function update(messages) {\n        var updatedMessages = messages.reduce(function (acc, msg) {\n          if (msg.quoted_message_id === message.id) {\n            acc.push(_objectSpread$d(_objectSpread$d({}, parseMessage(msg)), {}, {\n              quoted_message: remove ? _objectSpread$d(_objectSpread$d({}, message), {}, {\n                attachments: []\n              }) : message\n            }));\n          }\n          return acc;\n        }, []);\n        _this4.addMessagesSorted(updatedMessages, true);\n      };\n      if (!message.parent_id) {\n        this.messageSets.forEach(function (set) {\n          return update(set.messages);\n        });\n      } else if (message.parent_id && this.threads[message.parent_id]) {\n        // prevent going through all the threads even though it is possible to quote a message from another thread\n        update(this.threads[message.parent_id]);\n      }\n    }\n  }, {\n    key: \"removeQuotedMessageReferences\",\n    value: function removeQuotedMessageReferences(message) {\n      this._updateQuotedMessageReferences({\n        message: message,\n        remove: true\n      });\n    }\n    /**\n     * Updates all instances of given message in channel state\n     * @param message\n     * @param updateFunc\n     */\n  }, {\n    key: \"_updateMessage\",\n    value: function _updateMessage(message, updateFunc) {\n      var parent_id = message.parent_id,\n        show_in_channel = message.show_in_channel,\n        pinned = message.pinned;\n      if (parent_id && this.threads[parent_id]) {\n        var thread = this.threads[parent_id];\n        var msgIndex = thread.findIndex(function (msg) {\n          return msg.id === message.id;\n        });\n        if (msgIndex !== -1) {\n          thread[msgIndex] = updateFunc(thread[msgIndex]);\n          this.threads[parent_id] = thread;\n        }\n      }\n      if (!show_in_channel && !parent_id || show_in_channel) {\n        var messageSetIndex = this.findMessageSetIndex(message);\n        if (messageSetIndex !== -1) {\n          var _msgIndex = this.messageSets[messageSetIndex].messages.findIndex(function (msg) {\n            return msg.id === message.id;\n          });\n          if (_msgIndex !== -1) {\n            this.messageSets[messageSetIndex].messages[_msgIndex] = updateFunc(this.messageSets[messageSetIndex].messages[_msgIndex]);\n          }\n        }\n      }\n      if (pinned) {\n        var _msgIndex2 = this.pinnedMessages.findIndex(function (msg) {\n          return msg.id === message.id;\n        });\n        if (_msgIndex2 !== -1) {\n          this.pinnedMessages[_msgIndex2] = updateFunc(this.pinnedMessages[_msgIndex2]);\n        }\n      }\n    }\n    /**\n     * Setter for isUpToDate.\n     *\n     * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.\n     *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     *                    When false, any new message (received by websocket event - message.new) will not\n     *                    be pushed on to message list.\n     */\n  }, {\n    key: \"_addToMessageList\",\n    value:\n    /**\n     * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n     *\n     * @param {Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>} messages A list of messages\n     * @param message\n     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n     * @param {string} sortBy field name to use to sort the messages by\n     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n     */\n    function _addToMessageList(messages, message) {\n      var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'created_at';\n      var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      return addToMessageList(messages, message, timestampChanged, sortBy, addIfDoesNotExist);\n    }\n    /**\n     * removeMessage - Description\n     *\n     * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.\n     *\n     * @return {boolean} Returns if the message was removed\n     */\n  }, {\n    key: \"removeMessage\",\n    value: function removeMessage(messageToRemove) {\n      var isRemoved = false;\n      if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n        var _this$removeMessageFr2 = this.removeMessageFromArray(this.threads[messageToRemove.parent_id], messageToRemove),\n          removed = _this$removeMessageFr2.removed,\n          threadMessages = _this$removeMessageFr2.result;\n        this.threads[messageToRemove.parent_id] = threadMessages;\n        isRemoved = removed;\n      } else {\n        var _messageToRemove$mess;\n        var messageSetIndex = (_messageToRemove$mess = messageToRemove.messageSetIndex) !== null && _messageToRemove$mess !== void 0 ? _messageToRemove$mess : this.findMessageSetIndex(messageToRemove);\n        if (messageSetIndex !== -1) {\n          var _this$removeMessageFr3 = this.removeMessageFromArray(this.messageSets[messageSetIndex].messages, messageToRemove),\n            _removed = _this$removeMessageFr3.removed,\n            messages = _this$removeMessageFr3.result;\n          this.messageSets[messageSetIndex].messages = messages;\n          isRemoved = _removed;\n        }\n      }\n      return isRemoved;\n    }\n  }, {\n    key: \"filterErrorMessages\",\n    value:\n    /**\n     * filterErrorMessages - Removes error messages from the channel state.\n     *\n     */\n    function filterErrorMessages() {\n      var filteredMessages = this.latestMessages.filter(function (message) {\n        return message.type !== 'error';\n      });\n      this.latestMessages = filteredMessages;\n    }\n    /**\n     * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n     */\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      var now = new Date(); // prevent old users from showing up as typing\n\n      for (var _i = 0, _Object$entries = Object.entries(this.typing); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          userID = _Object$entries$_i[0],\n          lastEvent = _Object$entries$_i[1];\n        var receivedAt = typeof lastEvent.received_at === 'string' ? new Date(lastEvent.received_at) : lastEvent.received_at || new Date();\n        if (now.getTime() - receivedAt.getTime() > 7000) {\n          delete this.typing[userID];\n          this._channel.getClient().dispatchEvent({\n            cid: this._channel.cid,\n            type: 'typing.stop',\n            user: {\n              id: userID\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"clearMessages\",\n    value: function clearMessages() {\n      this.initMessages();\n      this.pinnedMessages = [];\n    }\n  }, {\n    key: \"initMessages\",\n    value: function initMessages() {\n      this.messageSets = [{\n        messages: [],\n        isLatest: true,\n        isCurrent: true,\n        pagination: DEFAULT_MESSAGE_SET_PAGINATION\n      }];\n    }\n    /**\n     * loadMessageIntoState - Loads a given message (and messages around it) into the state\n     *\n     * @param {string} messageId The id of the message, or 'latest' to indicate switching to the latest messages\n     * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n     * @param {number} limit The page size if the message has to be queried from the server\n     */\n  }, {\n    key: \"loadMessageIntoState\",\n    value: function () {\n      var _loadMessageIntoState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(messageId, parentMessageId) {\n        var _this$threads$parentM;\n        var limit,\n          messageSetIndex,\n          switchedToMessageSet,\n          loadedMessageThread,\n          messageIdToFind,\n          _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                limit = _args.length > 2 && _args[2] !== undefined ? _args[2] : 25;\n                switchedToMessageSet = false;\n                loadedMessageThread = false;\n                messageIdToFind = parentMessageId || messageId;\n                if (!(messageId === 'latest')) {\n                  _context.next = 10;\n                  break;\n                }\n                if (!(this.messages === this.latestMessages)) {\n                  _context.next = 7;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 7:\n                messageSetIndex = this.messageSets.findIndex(function (s) {\n                  return s.isLatest;\n                });\n                _context.next = 11;\n                break;\n              case 10:\n                messageSetIndex = this.findMessageSetIndex({\n                  id: messageIdToFind\n                });\n              case 11:\n                if (messageSetIndex !== -1) {\n                  this.switchToMessageSet(messageSetIndex);\n                  switchedToMessageSet = true;\n                }\n                loadedMessageThread = !parentMessageId || !!((_this$threads$parentM = this.threads[parentMessageId]) !== null && _this$threads$parentM !== void 0 && _this$threads$parentM.find(function (m) {\n                  return m.id === messageId;\n                }));\n                if (!(switchedToMessageSet && loadedMessageThread)) {\n                  _context.next = 15;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 15:\n                if (switchedToMessageSet) {\n                  _context.next = 18;\n                  break;\n                }\n                _context.next = 18;\n                return this._channel.query({\n                  messages: {\n                    id_around: messageIdToFind,\n                    limit: limit\n                  }\n                }, 'new');\n              case 18:\n                if (!(!loadedMessageThread && parentMessageId)) {\n                  _context.next = 21;\n                  break;\n                }\n                _context.next = 21;\n                return this._channel.getReplies(parentMessageId, {\n                  id_around: messageId,\n                  limit: limit\n                });\n              case 21:\n                messageSetIndex = this.findMessageSetIndex({\n                  id: messageIdToFind\n                });\n                if (messageSetIndex !== -1) {\n                  this.switchToMessageSet(messageSetIndex);\n                }\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function loadMessageIntoState(_x, _x2) {\n        return _loadMessageIntoState.apply(this, arguments);\n      }\n      return loadMessageIntoState;\n    }()\n    /**\n     * findMessage - Finds a message inside the state\n     *\n     * @param {string} messageId The id of the message\n     * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n     *\n     * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>} Returns the message, or undefined if the message wasn't found\n     */\n  }, {\n    key: \"findMessage\",\n    value: function findMessage(messageId, parentMessageId) {\n      if (parentMessageId) {\n        var messages = this.threads[parentMessageId];\n        if (!messages) {\n          return undefined;\n        }\n        return messages.find(function (m) {\n          return m.id === messageId;\n        });\n      }\n      var messageSetIndex = this.findMessageSetIndex({\n        id: messageId\n      });\n      if (messageSetIndex === -1) {\n        return undefined;\n      }\n      return this.messageSets[messageSetIndex].messages.find(function (m) {\n        return m.id === messageId;\n      });\n    }\n  }, {\n    key: \"switchToMessageSet\",\n    value: function switchToMessageSet(index) {\n      var currentMessages = this.messageSets.find(function (s) {\n        return s.isCurrent;\n      });\n      if (!currentMessages) {\n        return;\n      }\n      currentMessages.isCurrent = false;\n      this.messageSets[index].isCurrent = true;\n    }\n  }, {\n    key: \"areMessageSetsOverlap\",\n    value: function areMessageSetsOverlap(messages1, messages2) {\n      return messages1.some(function (m1) {\n        return messages2.find(function (m2) {\n          return m1.id === m2.id;\n        });\n      });\n    }\n  }, {\n    key: \"findMessageSetIndex\",\n    value: function findMessageSetIndex(message) {\n      return this.messageSets.findIndex(function (set) {\n        return !!set.messages.find(function (m) {\n          return m.id === message.id;\n        });\n      });\n    }\n  }, {\n    key: \"findTargetMessageSet\",\n    value: function findTargetMessageSet(newMessages) {\n      var _this5 = this;\n      var addIfDoesNotExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var messageSetToAddToIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'current';\n      var messagesToAdd = newMessages;\n      var targetMessageSetIndex;\n      if (addIfDoesNotExist) {\n        var overlappingMessageSetIndices = this.messageSets.map(function (_, i) {\n          return i;\n        }).filter(function (i) {\n          return _this5.areMessageSetsOverlap(_this5.messageSets[i].messages, newMessages);\n        });\n        switch (messageSetToAddToIfDoesNotExist) {\n          case 'new':\n            if (overlappingMessageSetIndices.length > 0) {\n              targetMessageSetIndex = overlappingMessageSetIndices[0]; // No new message set is created if newMessages only contains thread replies\n            } else if (newMessages.some(function (m) {\n              return !m.parent_id;\n            })) {\n              this.messageSets.push({\n                messages: [],\n                isCurrent: false,\n                isLatest: false,\n                pagination: DEFAULT_MESSAGE_SET_PAGINATION\n              });\n              targetMessageSetIndex = this.messageSets.length - 1;\n            }\n            break;\n          case 'current':\n            targetMessageSetIndex = this.messageSets.findIndex(function (s) {\n              return s.isCurrent;\n            });\n            break;\n          case 'latest':\n            targetMessageSetIndex = this.messageSets.findIndex(function (s) {\n              return s.isLatest;\n            });\n            break;\n          default:\n            targetMessageSetIndex = -1;\n        } // when merging the target set will be the first one from the overlapping message sets\n\n        var mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];\n        var mergeSourceMessageSetIndices = _toConsumableArray(overlappingMessageSetIndices);\n        if (mergeTargetMessageSetIndex !== undefined && mergeTargetMessageSetIndex !== targetMessageSetIndex) {\n          mergeSourceMessageSetIndices.push(targetMessageSetIndex);\n        } // merge message sets\n\n        if (mergeSourceMessageSetIndices.length > 0) {\n          var target = this.messageSets[mergeTargetMessageSetIndex];\n          var sources = this.messageSets.filter(function (_, i) {\n            return mergeSourceMessageSetIndices.indexOf(i) !== -1;\n          });\n          sources.forEach(function (messageSet) {\n            target.isLatest = target.isLatest || messageSet.isLatest;\n            target.isCurrent = target.isCurrent || messageSet.isCurrent;\n            target.pagination.hasPrev = messageSet.messages[0].created_at < target.messages[0].created_at ? messageSet.pagination.hasPrev : target.pagination.hasPrev;\n            target.pagination.hasNext = target.messages.slice(-1)[0].created_at < messageSet.messages.slice(-1)[0].created_at ? messageSet.pagination.hasNext : target.pagination.hasNext;\n            messagesToAdd = [].concat(_toConsumableArray(messagesToAdd), _toConsumableArray(messageSet.messages));\n          });\n          sources.forEach(function (s) {\n            return _this5.messageSets.splice(_this5.messageSets.indexOf(s), 1);\n          });\n          var overlappingMessageSetIndex = this.messageSets.findIndex(function (s) {\n            return _this5.areMessageSetsOverlap(s.messages, newMessages);\n          });\n          targetMessageSetIndex = overlappingMessageSetIndex;\n        }\n      } else {\n        // assumes that all new messages belong to the same set\n        targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);\n      }\n      return {\n        targetMessageSetIndex: targetMessageSetIndex,\n        messagesToAdd: messagesToAdd\n      };\n    }\n  }]);\n  return ChannelState;\n}();\nfunction _createForOfIteratorHelper$4(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$4(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$4(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);\n}\nfunction _arrayLikeToArray$4(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys$c(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$c(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$c(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$c(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n/**\n * Channel - The Channel class manages it's own state.\n */\n\nvar Channel = /*#__PURE__*/function () {\n  /**  */\n\n  /**\n   * This boolean is a vague indication of weather the channel exists on chat backend.\n   *\n   * If the value is true, then that means the channel has been initialized by either calling\n   * channel.create() or channel.query() or channel.watch().\n   *\n   * If the value is false, then channel may or may not exist on the backend. The only way to ensure\n   * is by calling channel.create() or channel.query() or channel.watch().\n   */\n\n  /**\n   * Indicates weather channel has been initialized by manually populating the state with some messages, members etc.\n   * Static state indicates that channel exists on backend, but is not being watched yet.\n   */\n\n  /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat<StreamChatGenerics>} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData<StreamChatGenerics>} data any additional custom params\n   *\n   * @return {Channel<StreamChatGenerics>} Returns a new uninitialized channel\n   */\n  function Channel(client, type, id, data) {\n    var _this = this;\n    _classCallCheck(this, Channel);\n    _defineProperty(this, \"_client\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    _defineProperty(this, \"_data\", void 0);\n    _defineProperty(this, \"cid\", void 0);\n    _defineProperty(this, \"listeners\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"initialized\", void 0);\n    _defineProperty(this, \"offlineMode\", void 0);\n    _defineProperty(this, \"lastKeyStroke\", void 0);\n    _defineProperty(this, \"lastTypingEvent\", void 0);\n    _defineProperty(this, \"isTyping\", void 0);\n    _defineProperty(this, \"disconnected\", void 0);\n    _defineProperty(this, \"push_preferences\", void 0);\n    _defineProperty(this, \"create\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var defaultOptions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                defaultOptions = _objectSpread$c(_objectSpread$c({}, options), {}, {\n                  watch: false,\n                  state: false,\n                  presence: false\n                });\n                _context.next = 3;\n                return _this.query(defaultOptions, 'latest');\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"_callChannelListeners\", function (event) {\n      var channel = _this; // gather and call the listeners\n\n      var listeners = [];\n      if (channel.listeners.all) {\n        listeners.push.apply(listeners, _toConsumableArray(channel.listeners.all));\n      }\n      if (channel.listeners[event.type]) {\n        listeners.push.apply(listeners, _toConsumableArray(channel.listeners[event.type]));\n      } // call the event and send it to the listeners\n\n      for (var _i = 0, _listeners = listeners; _i < _listeners.length; _i++) {\n        var listener = _listeners[_i];\n        if (typeof listener !== 'string') {\n          listener(event);\n        }\n      }\n    });\n    _defineProperty(this, \"_channelURL\", function () {\n      if (!_this.id) {\n        throw new Error('channel id is not defined');\n      }\n      return \"\".concat(_this.getClient().baseURL, \"/channels/\").concat(encodeURIComponent(_this.type), \"/\").concat(encodeURIComponent(_this.id));\n    });\n    var validTypeRe = /^[\\w_-]+$/;\n    var validIDRe = /^[\\w!_-]+$/;\n    if (!validTypeRe.test(type)) {\n      throw new Error(\"Invalid chat type \".concat(type, \", letters, numbers and \\\"_-\\\" are allowed\"));\n    }\n    if (typeof id === 'string' && !validIDRe.test(id)) {\n      throw new Error(\"Invalid chat id \".concat(id, \", letters, numbers and \\\"!-_\\\" are allowed\"));\n    }\n    this._client = client;\n    this.type = type;\n    this.id = id; // used by the frontend, gets updated:\n\n    this.data = data; // this._data is used for the requests...\n\n    this._data = _objectSpread$c({}, data);\n    this.cid = \"\".concat(type, \":\").concat(id);\n    this.listeners = {}; // perhaps the state variable should be private\n\n    this.state = new ChannelState(this);\n    this.initialized = false;\n    this.offlineMode = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n  }\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat<StreamChatGenerics>}\n   */\n\n  _createClass(Channel, [{\n    key: \"getClient\",\n    value: function getClient() {\n      if (this.disconnected === true) {\n        throw Error(\"You can't use a channel after client.disconnect() was called\");\n      }\n      return this._client;\n    }\n    /**\n     * getConfig - Get the config for this channel id (cid)\n     *\n     * @return {Record<string, unknown>}\n     */\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var client = this.getClient();\n      return client.configs[this.cid];\n    }\n    /**\n     * sendMessage - Send a message to this channel\n     *\n     * @param {Message<StreamChatGenerics>} message The Message object\n     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n     * @param {boolean} [options.skip_push] Skip sending push notifications\n     * @param {boolean} [options.is_pending_message] DEPRECATED, please use `pending` instead.\n     * @param {boolean} [options.pending] Make this message pending\n     * @param {Record<string,string>} [options.pending_message_metadata] Metadata for the pending message\n     * @param {boolean} [options.force_moderation] Apply force moderation for server-side requests\n     *\n     * @return {Promise<SendMessageAPIResponse<StreamChatGenerics>>} The Server Response\n     */\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message, options) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getClient().post(this._channelURL() + '/message', _objectSpread$c({\n                  message: message\n                }, options));\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function sendMessage(_x2, _x3) {\n        return _sendMessage.apply(this, arguments);\n      }\n      return sendMessage;\n    }()\n  }, {\n    key: \"sendFile\",\n    value: function sendFile(uri, name, contentType, user) {\n      return this.getClient().sendFile(\"\".concat(this._channelURL(), \"/file\"), uri, name, contentType, user);\n    }\n  }, {\n    key: \"sendImage\",\n    value: function sendImage(uri, name, contentType, user) {\n      return this.getClient().sendFile(\"\".concat(this._channelURL(), \"/image\"), uri, name, contentType, user);\n    }\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(url) {\n      return this.getClient().delete(\"\".concat(this._channelURL(), \"/file\"), {\n        url: url\n      });\n    }\n  }, {\n    key: \"deleteImage\",\n    value: function deleteImage(url) {\n      return this.getClient().delete(\"\".concat(this._channelURL(), \"/image\"), {\n        url: url\n      });\n    }\n    /**\n     * sendEvent - Send an event on this channel\n     *\n     * @param {Event<StreamChatGenerics>} event for example {type: 'message.read'}\n     *\n     * @return {Promise<EventAPIResponse<StreamChatGenerics>>} The Server Response\n     */\n  }, {\n    key: \"sendEvent\",\n    value: function () {\n      var _sendEvent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._checkInitialized();\n                _context3.next = 3;\n                return this.getClient().post(this._channelURL() + '/event', {\n                  event: event\n                });\n              case 3:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function sendEvent(_x4) {\n        return _sendEvent.apply(this, arguments);\n      }\n      return sendEvent;\n    }()\n    /**\n     * search - Query messages\n     *\n     * @param {MessageFilters<StreamChatGenerics> | string}  query search query or object MongoDB style filters\n     * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters<StreamChatGenerics>}} options Option object, {user_id: 'tommaso'}\n     *\n     * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response\n     */\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(query) {\n        var options,\n          payload,\n          _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                if (!(options.offset && options.next)) {\n                  _context4.next = 3;\n                  break;\n                }\n                throw Error(\"Cannot specify offset with next\");\n              case 3:\n                // Return a list of channels\n                payload = _objectSpread$c(_objectSpread$c({\n                  filter_conditions: {\n                    cid: this.cid\n                  }\n                }, options), {}, {\n                  sort: options.sort ? normalizeQuerySort(options.sort) : undefined\n                });\n                if (!(typeof query === 'string')) {\n                  _context4.next = 8;\n                  break;\n                }\n                payload.query = query;\n                _context4.next = 13;\n                break;\n              case 8:\n                if (!(_typeof(query) === 'object')) {\n                  _context4.next = 12;\n                  break;\n                }\n                payload.message_filter_conditions = query;\n                _context4.next = 13;\n                break;\n              case 12:\n                throw Error(\"Invalid type \".concat(_typeof(query), \" for query parameter\"));\n              case 13:\n                _context4.next = 15;\n                return this.getClient().wsPromise;\n              case 15:\n                _context4.next = 17;\n                return this.getClient().get(this.getClient().baseURL + '/search', {\n                  payload: payload\n                });\n              case 17:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function search(_x5) {\n        return _search.apply(this, arguments);\n      }\n      return search;\n    }()\n    /**\n     * queryMembers - Query Members\n     *\n     * @param {MemberFilters<StreamChatGenerics>}  filterConditions object MongoDB style filters\n     * @param {MemberSort<StreamChatGenerics>} [sort] Sort options, for instance [{created_at: -1}].\n     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{name: -1}, {created_at: 1}]\n     * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}\n     *\n     * @return {Promise<ChannelMemberAPIResponse<StreamChatGenerics>>} Query Members response\n     */\n  }, {\n    key: \"queryMembers\",\n    value: function () {\n      var _queryMembers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(filterConditions) {\n        var _this$data;\n        var sort,\n          options,\n          id,\n          type,\n          members,\n          _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                sort = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [];\n                options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};\n                type = this.type;\n                if (this.id) {\n                  id = this.id;\n                } else if ((_this$data = this.data) !== null && _this$data !== void 0 && _this$data.members && Array.isArray(this.data.members)) {\n                  members = this.data.members;\n                } // Return a list of members\n\n                _context5.next = 6;\n                return this.getClient().get(this.getClient().baseURL + '/members', {\n                  payload: _objectSpread$c({\n                    type: type,\n                    id: id,\n                    members: members,\n                    sort: normalizeQuerySort(sort),\n                    filter_conditions: filterConditions\n                  }, options)\n                });\n              case 6:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function queryMembers(_x6) {\n        return _queryMembers.apply(this, arguments);\n      }\n      return queryMembers;\n    }()\n    /**\n     * partialUpdateMember - Partial update a member\n     *\n     * @param {string} user_id member user id\n     * @param {PartialUpdateMember<StreamChatGenerics>}  updates\n     *\n     * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} Updated member\n     */\n  }, {\n    key: \"partialUpdateMember\",\n    value: function () {\n      var _partialUpdateMember = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(user_id, updates) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (user_id) {\n                  _context6.next = 2;\n                  break;\n                }\n                throw Error('Please specify the user id');\n              case 2:\n                _context6.next = 4;\n                return this.getClient().patch(this._channelURL() + \"/member/\".concat(encodeURIComponent(user_id)), updates);\n              case 4:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function partialUpdateMember(_x7, _x8) {\n        return _partialUpdateMember.apply(this, arguments);\n      }\n      return partialUpdateMember;\n    }()\n    /**\n     * sendReaction - Send a reaction about a message\n     *\n     * @param {string} messageID the message id\n     * @param {Reaction<StreamChatGenerics>} reaction the reaction object for instance {type: 'love'}\n     * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n     *\n     * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response\n     */\n  }, {\n    key: \"sendReaction\",\n    value: function () {\n      var _sendReaction = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(messageID, reaction, options) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (messageID) {\n                  _context7.next = 2;\n                  break;\n                }\n                throw Error(\"Message id is missing\");\n              case 2:\n                if (!(!reaction || Object.keys(reaction).length === 0)) {\n                  _context7.next = 4;\n                  break;\n                }\n                throw Error(\"Reaction object is missing\");\n              case 4:\n                _context7.next = 6;\n                return this.getClient().post(this.getClient().baseURL + \"/messages/\".concat(encodeURIComponent(messageID), \"/reaction\"), _objectSpread$c({\n                  reaction: reaction\n                }, options));\n              case 6:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function sendReaction(_x9, _x10, _x11) {\n        return _sendReaction.apply(this, arguments);\n      }\n      return sendReaction;\n    }()\n    /**\n     * deleteReaction - Delete a reaction by user and type\n     *\n     * @param {string} messageID the id of the message from which te remove the reaction\n     * @param {string} reactionType the type of reaction that should be removed\n     * @param {string} [user_id] the id of the user (used only for server side request) default null\n     *\n     * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response\n     */\n  }, {\n    key: \"deleteReaction\",\n    value: function deleteReaction(messageID, reactionType, user_id) {\n      this._checkInitialized();\n      if (!reactionType || !messageID) {\n        throw Error('Deleting a reaction requires specifying both the message and reaction type');\n      }\n      var url = this.getClient().baseURL + \"/messages/\".concat(encodeURIComponent(messageID), \"/reaction/\").concat(encodeURIComponent(reactionType)); //provided when server side request\n\n      if (user_id) {\n        return this.getClient().delete(url, {\n          user_id: user_id\n        });\n      }\n      return this.getClient().delete(url, {});\n    }\n    /**\n     * update - Edit the channel's custom properties\n     *\n     * @param {ChannelData<StreamChatGenerics>} channelData The object to update the custom properties of this channel with\n     * @param {Message<StreamChatGenerics>} [updateMessage] Optional message object for channel members notification\n     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var channelData,\n          updateMessage,\n          options,\n          reserved,\n          _args8 = arguments;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                channelData = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n                updateMessage = _args8.length > 1 ? _args8[1] : undefined;\n                options = _args8.length > 2 ? _args8[2] : undefined;\n                // Strip out reserved names that will result in API errors.\n                reserved = ['config', 'cid', 'created_by', 'id', 'member_count', 'type', 'created_at', 'updated_at', 'last_message_at', 'own_capabilities'];\n                reserved.forEach(function (key) {\n                  delete channelData[key];\n                });\n                _context8.next = 7;\n                return this._update(_objectSpread$c({\n                  message: updateMessage,\n                  data: channelData\n                }, options));\n              case 7:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function update() {\n        return _update2.apply(this, arguments);\n      }\n      return update;\n    }()\n    /**\n     * updatePartial - partial update channel properties\n     *\n     * @param {PartialUpdateChannel<StreamChatGenerics>} partial update request\n     *\n     * @return {Promise<PartialUpdateChannelAPIResponse<StreamChatGenerics>>}\n     */\n  }, {\n    key: \"updatePartial\",\n    value: function () {\n      var _updatePartial = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(update) {\n        var _this$data2, _this$data3;\n        var data, areCapabilitiesChanged;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getClient().patch(this._channelURL(), update);\n              case 2:\n                data = _context9.sent;\n                areCapabilitiesChanged = _toConsumableArray(data.channel.own_capabilities || []).sort().join() !== _toConsumableArray(Array.isArray((_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.own_capabilities) ? (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.own_capabilities : []).sort().join();\n                this.data = data.channel; // If the capabiltities are changed, we trigger the `capabilities.changed` event.\n\n                if (areCapabilitiesChanged) {\n                  this.getClient().dispatchEvent({\n                    type: 'capabilities.changed',\n                    cid: this.cid,\n                    own_capabilities: data.channel.own_capabilities\n                  });\n                }\n                return _context9.abrupt(\"return\", data);\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function updatePartial(_x12) {\n        return _updatePartial.apply(this, arguments);\n      }\n      return updatePartial;\n    }()\n    /**\n     * enableSlowMode - enable slow mode\n     *\n     * @param {number} coolDownInterval the cooldown interval in seconds\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"enableSlowMode\",\n    value: function () {\n      var _enableSlowMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(coolDownInterval) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.getClient().post(this._channelURL(), {\n                  cooldown: coolDownInterval\n                });\n              case 2:\n                data = _context10.sent;\n                this.data = data.channel;\n                return _context10.abrupt(\"return\", data);\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function enableSlowMode(_x13) {\n        return _enableSlowMode.apply(this, arguments);\n      }\n      return enableSlowMode;\n    }()\n    /**\n     * disableSlowMode - disable slow mode\n     *\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"disableSlowMode\",\n    value: function () {\n      var _disableSlowMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.getClient().post(this._channelURL(), {\n                  cooldown: 0\n                });\n              case 2:\n                data = _context11.sent;\n                this.data = data.channel;\n                return _context11.abrupt(\"return\", data);\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function disableSlowMode() {\n        return _disableSlowMode.apply(this, arguments);\n      }\n      return disableSlowMode;\n    }()\n    /**\n     * delete - Delete the channel. Messages are permanently removed.\n     *\n     * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n     *\n     * @return {Promise<DeleteChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var options,\n          _args12 = arguments;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                options = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};\n                _context12.next = 3;\n                return this.getClient().delete(this._channelURL(), _objectSpread$c({}, options));\n              case 3:\n                return _context12.abrupt(\"return\", _context12.sent);\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * truncate - Removes all messages from the channel\n     * @param {TruncateOptions<StreamChatGenerics>} [options] Defines truncation options\n     * @return {Promise<TruncateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"truncate\",\n    value: function () {\n      var _truncate = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var options,\n          _args13 = arguments;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                options = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};\n                _context13.next = 3;\n                return this.getClient().post(this._channelURL() + '/truncate', options);\n              case 3:\n                return _context13.abrupt(\"return\", _context13.sent);\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function truncate() {\n        return _truncate.apply(this, arguments);\n      }\n      return truncate;\n    }()\n    /**\n     * acceptInvite - accept invitation to the channel\n     *\n     * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with\n     *\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"acceptInvite\",\n    value: function () {\n      var _acceptInvite = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var options,\n          _args14 = arguments;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                options = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};\n                _context14.next = 3;\n                return this._update(_objectSpread$c({\n                  accept_invite: true\n                }, options));\n              case 3:\n                return _context14.abrupt(\"return\", _context14.sent);\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function acceptInvite() {\n        return _acceptInvite.apply(this, arguments);\n      }\n      return acceptInvite;\n    }()\n    /**\n     * rejectInvite - reject invitation to the channel\n     *\n     * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with\n     *\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"rejectInvite\",\n    value: function () {\n      var _rejectInvite = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var options,\n          _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                options = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};\n                _context15.next = 3;\n                return this._update(_objectSpread$c({\n                  reject_invite: true\n                }, options));\n              case 3:\n                return _context15.abrupt(\"return\", _context15.sent);\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function rejectInvite() {\n        return _rejectInvite.apply(this, arguments);\n      }\n      return rejectInvite;\n    }()\n    /**\n     * addMembers - add members to the channel\n     *\n     * @param {string[] | Array<NewMemberPayload<StreamChatGenerics>>} members An array of members to add to the channel\n     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"addMembers\",\n    value: function () {\n      var _addMembers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(members, message) {\n        var options,\n          _args16 = arguments;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                options = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : {};\n                _context16.next = 3;\n                return this._update(_objectSpread$c({\n                  add_members: members,\n                  message: message\n                }, options));\n              case 3:\n                return _context16.abrupt(\"return\", _context16.sent);\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function addMembers(_x14, _x15) {\n        return _addMembers.apply(this, arguments);\n      }\n      return addMembers;\n    }()\n    /**\n     * addModerators - add moderators to the channel\n     *\n     * @param {string[]} members An array of member identifiers\n     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"addModerators\",\n    value: function () {\n      var _addModerators = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(members, message) {\n        var options,\n          _args17 = arguments;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                options = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};\n                _context17.next = 3;\n                return this._update(_objectSpread$c({\n                  add_moderators: members,\n                  message: message\n                }, options));\n              case 3:\n                return _context17.abrupt(\"return\", _context17.sent);\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function addModerators(_x16, _x17) {\n        return _addModerators.apply(this, arguments);\n      }\n      return addModerators;\n    }()\n    /**\n     * assignRoles - sets member roles in a channel\n     *\n     * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments\n     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"assignRoles\",\n    value: function () {\n      var _assignRoles = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(roles, message) {\n        var options,\n          _args18 = arguments;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};\n                _context18.next = 3;\n                return this._update(_objectSpread$c({\n                  assign_roles: roles,\n                  message: message\n                }, options));\n              case 3:\n                return _context18.abrupt(\"return\", _context18.sent);\n              case 4:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function assignRoles(_x18, _x19) {\n        return _assignRoles.apply(this, arguments);\n      }\n      return assignRoles;\n    }()\n    /**\n     * inviteMembers - invite members to the channel\n     *\n     * @param {string[] | Array<NewMemberPayload<StreamChatGenerics>>} members An array of members to invite to the channel\n     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"inviteMembers\",\n    value: function () {\n      var _inviteMembers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(members, message) {\n        var options,\n          _args19 = arguments;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                options = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : {};\n                _context19.next = 3;\n                return this._update(_objectSpread$c({\n                  invites: members,\n                  message: message\n                }, options));\n              case 3:\n                return _context19.abrupt(\"return\", _context19.sent);\n              case 4:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function inviteMembers(_x20, _x21) {\n        return _inviteMembers.apply(this, arguments);\n      }\n      return inviteMembers;\n    }()\n    /**\n     * removeMembers - remove members from channel\n     *\n     * @param {string[]} members An array of member identifiers\n     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"removeMembers\",\n    value: function () {\n      var _removeMembers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(members, message) {\n        var options,\n          _args20 = arguments;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};\n                _context20.next = 3;\n                return this._update(_objectSpread$c({\n                  remove_members: members,\n                  message: message\n                }, options));\n              case 3:\n                return _context20.abrupt(\"return\", _context20.sent);\n              case 4:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n      function removeMembers(_x22, _x23) {\n        return _removeMembers.apply(this, arguments);\n      }\n      return removeMembers;\n    }()\n    /**\n     * demoteModerators - remove moderator role from channel members\n     *\n     * @param {string[]} members An array of member identifiers\n     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"demoteModerators\",\n    value: function () {\n      var _demoteModerators = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(members, message) {\n        var options,\n          _args21 = arguments;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                options = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : {};\n                _context21.next = 3;\n                return this._update(_objectSpread$c({\n                  demote_moderators: members,\n                  message: message\n                }, options));\n              case 3:\n                return _context21.abrupt(\"return\", _context21.sent);\n              case 4:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n      function demoteModerators(_x24, _x25) {\n        return _demoteModerators.apply(this, arguments);\n      }\n      return demoteModerators;\n    }()\n    /**\n     * _update - executes channel update request\n     * @param payload Object Update Channel payload\n     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n     * TODO: introduce new type instead of Object in the next major update\n     */\n  }, {\n    key: \"_update\",\n    value: function () {\n      var _update3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(payload) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.getClient().post(this._channelURL(), payload);\n              case 2:\n                data = _context22.sent;\n                this.data = data.channel;\n                return _context22.abrupt(\"return\", data);\n              case 5:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n      function _update(_x26) {\n        return _update3.apply(this, arguments);\n      }\n      return _update;\n    }()\n    /**\n     * mute - mutes the current channel\n     * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id\n     * @return {Promise<MuteChannelAPIResponse<StreamChatGenerics>>} The server response\n     *\n     * example with expiration:\n     * await channel.mute({expiration: moment.duration(2, 'weeks')});\n     *\n     * example server side:\n     * await channel.mute({user_id: userId});\n     *\n     */\n  }, {\n    key: \"mute\",\n    value: function () {\n      var _mute = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        var opts,\n          _args23 = arguments;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                opts = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};\n                _context23.next = 3;\n                return this.getClient().post(this.getClient().baseURL + '/moderation/mute/channel', _objectSpread$c({\n                  channel_cid: this.cid\n                }, opts));\n              case 3:\n                return _context23.abrupt(\"return\", _context23.sent);\n              case 4:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n      function mute() {\n        return _mute.apply(this, arguments);\n      }\n      return mute;\n    }()\n    /**\n     * unmute - mutes the current channel\n     * @param {{ user_id?: string}} opts user_id\n     * @return {Promise<APIResponse>} The server response\n     *\n     * example server side:\n     * await channel.unmute({user_id: userId});\n     */\n  }, {\n    key: \"unmute\",\n    value: function () {\n      var _unmute = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n        var opts,\n          _args24 = arguments;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                opts = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : {};\n                _context24.next = 3;\n                return this.getClient().post(this.getClient().baseURL + '/moderation/unmute/channel', _objectSpread$c({\n                  channel_cid: this.cid\n                }, opts));\n              case 3:\n                return _context24.abrupt(\"return\", _context24.sent);\n              case 4:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n      function unmute() {\n        return _unmute.apply(this, arguments);\n      }\n      return unmute;\n    }()\n    /**\n     * archive - archives the current channel\n     * @param {{ user_id?: string }} opts user_id if called server side\n     * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n     *\n     * example:\n     * await channel.archives();\n     *\n     * example server side:\n     * await channel.archive({user_id: userId});\n     *\n     */\n  }, {\n    key: \"archive\",\n    value: function () {\n      var _archive = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n        var opts,\n          cli,\n          uid,\n          resp,\n          _args25 = arguments;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                opts = _args25.length > 0 && _args25[0] !== undefined ? _args25[0] : {};\n                cli = this.getClient();\n                uid = opts.user_id || cli.userID;\n                if (uid) {\n                  _context25.next = 5;\n                  break;\n                }\n                throw Error('A user_id is required for archiving a channel');\n              case 5:\n                _context25.next = 7;\n                return this.partialUpdateMember(uid, {\n                  set: {\n                    archived: true\n                  }\n                });\n              case 7:\n                resp = _context25.sent;\n                return _context25.abrupt(\"return\", resp.channel_member);\n              case 9:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n      function archive() {\n        return _archive.apply(this, arguments);\n      }\n      return archive;\n    }()\n    /**\n     * unarchive - unarchives the current channel\n     * @param {{ user_id?: string }} opts user_id if called server side\n     * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n     *\n     * example:\n     * await channel.unarchive();\n     *\n     * example server side:\n     * await channel.unarchive({user_id: userId});\n     *\n     */\n  }, {\n    key: \"unarchive\",\n    value: function () {\n      var _unarchive = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n        var opts,\n          cli,\n          uid,\n          resp,\n          _args26 = arguments;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                opts = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};\n                cli = this.getClient();\n                uid = opts.user_id || cli.userID;\n                if (uid) {\n                  _context26.next = 5;\n                  break;\n                }\n                throw Error('A user_id is required for unarchiving a channel');\n              case 5:\n                _context26.next = 7;\n                return this.partialUpdateMember(uid, {\n                  set: {\n                    archived: false\n                  }\n                });\n              case 7:\n                resp = _context26.sent;\n                return _context26.abrupt(\"return\", resp.channel_member);\n              case 9:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n      function unarchive() {\n        return _unarchive.apply(this, arguments);\n      }\n      return unarchive;\n    }()\n    /**\n     * pin - pins the current channel\n     * @param {{ user_id?: string }} opts user_id if called server side\n     * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n     *\n     * example:\n     * await channel.pin();\n     *\n     * example server side:\n     * await channel.pin({user_id: userId});\n     *\n     */\n  }, {\n    key: \"pin\",\n    value: function () {\n      var _pin = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n        var opts,\n          cli,\n          uid,\n          resp,\n          _args27 = arguments;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                opts = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : {};\n                cli = this.getClient();\n                uid = opts.user_id || cli.userID;\n                if (uid) {\n                  _context27.next = 5;\n                  break;\n                }\n                throw new Error('A user_id is required for pinning a channel');\n              case 5:\n                _context27.next = 7;\n                return this.partialUpdateMember(uid, {\n                  set: {\n                    pinned: true\n                  }\n                });\n              case 7:\n                resp = _context27.sent;\n                return _context27.abrupt(\"return\", resp.channel_member);\n              case 9:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n      function pin() {\n        return _pin.apply(this, arguments);\n      }\n      return pin;\n    }()\n    /**\n     * unpin - unpins the current channel\n     * @param {{ user_id?: string }} opts user_id if called server side\n     * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n     *\n     * example:\n     * await channel.unpin();\n     *\n     * example server side:\n     * await channel.unpin({user_id: userId});\n     *\n     */\n  }, {\n    key: \"unpin\",\n    value: function () {\n      var _unpin = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n        var opts,\n          cli,\n          uid,\n          resp,\n          _args28 = arguments;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                opts = _args28.length > 0 && _args28[0] !== undefined ? _args28[0] : {};\n                cli = this.getClient();\n                uid = opts.user_id || cli.userID;\n                if (uid) {\n                  _context28.next = 5;\n                  break;\n                }\n                throw new Error('A user_id is required for unpinning a channel');\n              case 5:\n                _context28.next = 7;\n                return this.partialUpdateMember(uid, {\n                  set: {\n                    pinned: false\n                  }\n                });\n              case 7:\n                resp = _context28.sent;\n                return _context28.abrupt(\"return\", resp.channel_member);\n              case 9:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n      function unpin() {\n        return _unpin.apply(this, arguments);\n      }\n      return unpin;\n    }()\n    /**\n     * muteStatus - returns the mute status for the current channel\n     * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n     */\n  }, {\n    key: \"muteStatus\",\n    value: function muteStatus() {\n      this._checkInitialized();\n      return this.getClient()._muteStatus(this.cid);\n    }\n  }, {\n    key: \"sendAction\",\n    value: function sendAction(messageID, formData) {\n      this._checkInitialized();\n      if (!messageID) {\n        throw Error(\"Message id is missing\");\n      }\n      return this.getClient().post(this.getClient().baseURL + \"/messages/\".concat(encodeURIComponent(messageID), \"/action\"), {\n        message_id: messageID,\n        form_data: formData,\n        id: this.id,\n        type: this.type\n      });\n    }\n    /**\n     * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n     * Call this on every keystroke\n     * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n     * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n     */\n  }, {\n    key: \"keystroke\",\n    value: function () {\n      var _keystroke = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(parent_id, options) {\n        var now, diff;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                if (this._isTypingIndicatorsEnabled()) {\n                  _context29.next = 2;\n                  break;\n                }\n                return _context29.abrupt(\"return\");\n              case 2:\n                now = new Date();\n                diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n                this.lastKeyStroke = now;\n                this.isTyping = true; // send a typing.start every 2 seconds\n\n                if (!(diff === null || diff > 2000)) {\n                  _context29.next = 10;\n                  break;\n                }\n                this.lastTypingEvent = new Date();\n                _context29.next = 10;\n                return this.sendEvent(_objectSpread$c({\n                  type: 'typing.start',\n                  parent_id: parent_id\n                }, options || {}));\n              case 10:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n      function keystroke(_x27, _x28) {\n        return _keystroke.apply(this, arguments);\n      }\n      return keystroke;\n    }()\n    /**\n     * Sends an event to update the AI state for a specific message.\n     * Typically used by the server connected to the AI service to notify clients of state changes.\n     *\n     * @param messageId - The ID of the message associated with the AI state.\n     * @param state - The new state of the AI process (e.g., thinking, generating).\n     * @param options - Optional parameters, such as `ai_message`, to include additional details in the event.\n     */\n  }, {\n    key: \"updateAIState\",\n    value: function () {\n      var _updateAIState = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(messageId, state) {\n        var options,\n          _args30 = arguments;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                options = _args30.length > 2 && _args30[2] !== undefined ? _args30[2] : {};\n                _context30.next = 3;\n                return this.sendEvent(_objectSpread$c(_objectSpread$c({}, options), {}, {\n                  type: 'ai_indicator.update',\n                  message_id: messageId,\n                  ai_state: state\n                }));\n              case 3:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n      function updateAIState(_x29, _x30) {\n        return _updateAIState.apply(this, arguments);\n      }\n      return updateAIState;\n    }()\n    /**\n     * Sends an event to notify watchers to clear the typing/thinking UI when the AI response starts streaming.\n     * Typically used by the server connected to the AI service to inform clients that the AI response has started.\n     */\n  }, {\n    key: \"clearAIIndicator\",\n    value: function () {\n      var _clearAIIndicator = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.next = 2;\n                return this.sendEvent({\n                  type: 'ai_indicator.clear'\n                });\n              case 2:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n      function clearAIIndicator() {\n        return _clearAIIndicator.apply(this, arguments);\n      }\n      return clearAIIndicator;\n    }()\n    /**\n     * Sends an event to stop AI response generation, leaving the message in its current state.\n     * Triggered by the user to halt the AI response process.\n     */\n  }, {\n    key: \"stopAIResponse\",\n    value: function () {\n      var _stopAIResponse = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32() {\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _context32.next = 2;\n                return this.sendEvent({\n                  type: 'ai_indicator.stop'\n                });\n              case 2:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n      function stopAIResponse() {\n        return _stopAIResponse.apply(this, arguments);\n      }\n      return stopAIResponse;\n    }()\n    /**\n     * stopTyping - Sets last typing to null and sends the typing.stop event\n     * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n     * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n     */\n  }, {\n    key: \"stopTyping\",\n    value: function () {\n      var _stopTyping = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(parent_id, options) {\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                if (this._isTypingIndicatorsEnabled()) {\n                  _context33.next = 2;\n                  break;\n                }\n                return _context33.abrupt(\"return\");\n              case 2:\n                this.lastTypingEvent = null;\n                this.isTyping = false;\n                _context33.next = 6;\n                return this.sendEvent(_objectSpread$c({\n                  type: 'typing.stop',\n                  parent_id: parent_id\n                }, options || {}));\n              case 6:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n      function stopTyping(_x31, _x32) {\n        return _stopTyping.apply(this, arguments);\n      }\n      return stopTyping;\n    }()\n  }, {\n    key: \"_isTypingIndicatorsEnabled\",\n    value: function _isTypingIndicatorsEnabled() {\n      var _this$getConfig, _this$getClient$user$, _this$getClient$user, _this$getClient$user$2, _this$getClient$user$3;\n      if (!((_this$getConfig = this.getConfig()) !== null && _this$getConfig !== void 0 && _this$getConfig.typing_events)) {\n        return false;\n      }\n      return (_this$getClient$user$ = (_this$getClient$user = this.getClient().user) === null || _this$getClient$user === void 0 ? void 0 : (_this$getClient$user$2 = _this$getClient$user.privacy_settings) === null || _this$getClient$user$2 === void 0 ? void 0 : (_this$getClient$user$3 = _this$getClient$user$2.typing_indicators) === null || _this$getClient$user$3 === void 0 ? void 0 : _this$getClient$user$3.enabled) !== null && _this$getClient$user$ !== void 0 ? _this$getClient$user$ : true;\n    }\n    /**\n     * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n     *\n     * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']> | undefined} Description\n     */\n  }, {\n    key: \"lastMessage\",\n    value: function lastMessage() {\n      // get last 5 messages, sort, return the latest\n      // get a slice of the last 5\n      var min = this.state.latestMessages.length - 5;\n      if (min < 0) {\n        min = 0;\n      }\n      var max = this.state.latestMessages.length + 1;\n      var messageSlice = this.state.latestMessages.slice(min, max); // sort by pk desc\n\n      messageSlice.sort(function (a, b) {\n        return b.created_at.getTime() - a.created_at.getTime();\n      });\n      return messageSlice[0];\n    }\n    /**\n     * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n     *\n     * @param {MarkReadOptions<StreamChatGenerics>} data\n     * @return {Promise<EventAPIResponse<StreamChatGenerics> | null>} Description\n     */\n  }, {\n    key: \"markRead\",\n    value: function () {\n      var _markRead = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34() {\n        var _this$getConfig2;\n        var data,\n          _args34 = arguments;\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                data = _args34.length > 0 && _args34[0] !== undefined ? _args34[0] : {};\n                this._checkInitialized();\n                if (!(!((_this$getConfig2 = this.getConfig()) !== null && _this$getConfig2 !== void 0 && _this$getConfig2.read_events) && !this.getClient()._isUsingServerAuth())) {\n                  _context34.next = 4;\n                  break;\n                }\n                return _context34.abrupt(\"return\", Promise.resolve(null));\n              case 4:\n                _context34.next = 6;\n                return this.getClient().post(this._channelURL() + '/read', _objectSpread$c({}, data));\n              case 6:\n                return _context34.abrupt(\"return\", _context34.sent);\n              case 7:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n      function markRead() {\n        return _markRead.apply(this, arguments);\n      }\n      return markRead;\n    }()\n    /**\n     * markUnread - Mark the channel as unread from messageID, only works if the `read_events` setting is enabled\n     *\n     * @param {MarkUnreadOptions<StreamChatGenerics>} data\n     * @return {APIResponse} An API response\n     */\n  }, {\n    key: \"markUnread\",\n    value: function () {\n      var _markUnread = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35(data) {\n        var _this$getConfig3;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                this._checkInitialized();\n                if (!(!((_this$getConfig3 = this.getConfig()) !== null && _this$getConfig3 !== void 0 && _this$getConfig3.read_events) && !this.getClient()._isUsingServerAuth())) {\n                  _context35.next = 3;\n                  break;\n                }\n                return _context35.abrupt(\"return\", Promise.resolve(null));\n              case 3:\n                _context35.next = 5;\n                return this.getClient().post(this._channelURL() + '/unread', _objectSpread$c({}, data));\n              case 5:\n                return _context35.abrupt(\"return\", _context35.sent);\n              case 6:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n      function markUnread(_x33) {\n        return _markUnread.apply(this, arguments);\n      }\n      return markUnread;\n    }()\n    /**\n     * clean - Cleans the channel state and fires stop typing if needed\n     */\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      if (this.lastKeyStroke) {\n        var now = new Date();\n        var diff = now.getTime() - this.lastKeyStroke.getTime();\n        if (diff > 1000 && this.isTyping) {\n          logChatPromiseExecution(this.stopTyping(), 'stop typing event');\n        }\n      }\n      this.state.clean();\n    }\n    /**\n     * watch - Loads the initial channel state and watches for changes\n     *\n     * @param {ChannelQueryOptions<StreamChatGenerics>} options additional options for the query endpoint\n     *\n     * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The server response\n     */\n  }, {\n    key: \"watch\",\n    value: function () {\n      var _watch = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(options) {\n        var defaultOptions, combined, state;\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                defaultOptions = {\n                  state: true,\n                  watch: true,\n                  presence: false\n                }; // Make sure we wait for the connect promise if there is a pending one\n\n                _context36.next = 3;\n                return this.getClient().wsPromise;\n              case 3:\n                if (!this.getClient()._hasConnectionID()) {\n                  defaultOptions.watch = false;\n                }\n                combined = _objectSpread$c(_objectSpread$c({}, defaultOptions), options);\n                _context36.next = 7;\n                return this.query(combined, 'latest');\n              case 7:\n                state = _context36.sent;\n                this.initialized = true;\n                this.data = state.channel;\n                this._client.logger('info', \"channel:watch() - started watching channel \".concat(this.cid), {\n                  tags: ['channel'],\n                  channel: this\n                });\n                return _context36.abrupt(\"return\", state);\n              case 12:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n      function watch(_x34) {\n        return _watch.apply(this, arguments);\n      }\n      return watch;\n    }()\n    /**\n     * stopWatching - Stops watching the channel\n     *\n     * @return {Promise<APIResponse>} The server response\n     */\n  }, {\n    key: \"stopWatching\",\n    value: function () {\n      var _stopWatching = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee37() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                _context37.next = 2;\n                return this.getClient().post(this._channelURL() + '/stop-watching', {});\n              case 2:\n                response = _context37.sent;\n                this._client.logger('info', \"channel:watch() - stopped watching channel \".concat(this.cid), {\n                  tags: ['channel'],\n                  channel: this\n                });\n                return _context37.abrupt(\"return\", response);\n              case 5:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n      function stopWatching() {\n        return _stopWatching.apply(this, arguments);\n      }\n      return stopWatching;\n    }()\n    /**\n     * getReplies - List the message replies for a parent message.\n     *\n     * The recommended way of working with threads is to use the Thread class.\n     *\n     * @param {string} parent_id The message parent id, ie the top of the thread\n     * @param {MessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n     *\n     * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages\n     */\n  }, {\n    key: \"getReplies\",\n    value: function () {\n      var _getReplies = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee38(parent_id, options, sort) {\n        var normalizedSort, data;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                normalizedSort = sort ? normalizeQuerySort(sort) : undefined;\n                _context38.next = 3;\n                return this.getClient().get(this.getClient().baseURL + \"/messages/\".concat(encodeURIComponent(parent_id), \"/replies\"), _objectSpread$c({\n                  sort: normalizedSort\n                }, options));\n              case 3:\n                data = _context38.sent;\n\n                // add any messages to our thread state\n                if (data.messages) {\n                  this.state.addMessagesSorted(data.messages);\n                }\n                return _context38.abrupt(\"return\", data);\n              case 6:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n      function getReplies(_x35, _x36, _x37) {\n        return _getReplies.apply(this, arguments);\n      }\n      return getReplies;\n    }()\n    /**\n     * getPinnedMessages - List list pinned messages of the channel\n     *\n     * @param {PinnedMessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n     * @param {PinnedMessagesSort} sort defines sorting direction of pinned messages\n     *\n     * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages\n     */\n  }, {\n    key: \"getPinnedMessages\",\n    value: function () {\n      var _getPinnedMessages = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee39(options) {\n        var sort,\n          _args39 = arguments;\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                sort = _args39.length > 1 && _args39[1] !== undefined ? _args39[1] : [];\n                _context39.next = 3;\n                return this.getClient().get(this._channelURL() + '/pinned_messages', {\n                  payload: _objectSpread$c(_objectSpread$c({}, options), {}, {\n                    sort: normalizeQuerySort(sort)\n                  })\n                });\n              case 3:\n                return _context39.abrupt(\"return\", _context39.sent);\n              case 4:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n      function getPinnedMessages(_x38) {\n        return _getPinnedMessages.apply(this, arguments);\n      }\n      return getPinnedMessages;\n    }()\n    /**\n     * getReactions - List the reactions, supports pagination\n     *\n     * @param {string} message_id The message id\n     * @param {{ limit?: number; offset?: number }} options The pagination options\n     *\n     * @return {Promise<GetReactionsAPIResponse<StreamChatGenerics>>} Server response\n     */\n  }, {\n    key: \"getReactions\",\n    value: function getReactions(message_id, options) {\n      return this.getClient().get(this.getClient().baseURL + \"/messages/\".concat(encodeURIComponent(message_id), \"/reactions\"), _objectSpread$c({}, options));\n    }\n    /**\n     * getMessagesById - Retrieves a list of messages by ID\n     *\n     * @param {string[]} messageIds The ids of the messages to retrieve from this channel\n     *\n     * @return {Promise<GetMultipleMessagesAPIResponse<StreamChatGenerics>>} Server response\n     */\n  }, {\n    key: \"getMessagesById\",\n    value: function getMessagesById(messageIds) {\n      return this.getClient().get(this._channelURL() + '/messages', {\n        ids: messageIds.join(',')\n      });\n    }\n    /**\n     * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n     * @return {Date | null | undefined}\n     */\n  }, {\n    key: \"lastRead\",\n    value: function lastRead() {\n      var _this$getClient = this.getClient(),\n        userID = _this$getClient.userID;\n      if (userID) {\n        return this.state.read[userID] ? this.state.read[userID].last_read : null;\n      }\n    }\n  }, {\n    key: \"_countMessageAsUnread\",\n    value: function _countMessageAsUnread(message) {\n      var _message$user, _message$user2, _this$data4, _this$data5;\n      if (message.shadowed) return false;\n      if (message.silent) return false;\n      if (message.parent_id && !message.show_in_channel) return false;\n      if (((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.id) === this.getClient().userID) return false;\n      if ((_message$user2 = message.user) !== null && _message$user2 !== void 0 && _message$user2.id && this.getClient().userMuteStatus(message.user.id)) return false; // Return false if channel doesn't allow read events.\n\n      if (Array.isArray((_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.own_capabilities) && !((_this$data5 = this.data) !== null && _this$data5 !== void 0 && _this$data5.own_capabilities.includes('read-events'))) return false; // FIXME: see #1265, adjust and count new messages even when the channel is muted\n\n      if (this.muteStatus().muted) return false;\n      return true;\n    }\n    /**\n     * countUnread - Count of unread messages\n     *\n     * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state\n     *\n     * @return {number} Unread count\n     */\n  }, {\n    key: \"countUnread\",\n    value: function countUnread(lastRead) {\n      if (!lastRead) return this.state.unreadCount;\n      var count = 0;\n      for (var i = 0; i < this.state.latestMessages.length; i += 1) {\n        var message = this.state.latestMessages[i];\n        if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n          count++;\n        }\n      }\n      return count;\n    }\n    /**\n     * countUnreadMentions - Count the number of unread messages mentioning the current user\n     *\n     * @return {number} Unread mentions count\n     */\n  }, {\n    key: \"countUnreadMentions\",\n    value: function countUnreadMentions() {\n      var lastRead = this.lastRead();\n      var userID = this.getClient().userID;\n      var count = 0;\n      for (var i = 0; i < this.state.latestMessages.length; i += 1) {\n        var _message$mentioned_us;\n        var message = this.state.latestMessages[i];\n        if (this._countMessageAsUnread(message) && (!lastRead || message.created_at > lastRead) && (_message$mentioned_us = message.mentioned_users) !== null && _message$mentioned_us !== void 0 && _message$mentioned_us.some(function (user) {\n          return user.id === userID;\n        })) {\n          count++;\n        }\n      }\n      return count;\n    }\n    /**\n     * create - Creates a new channel\n     *\n     * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The Server Response\n     *\n     */\n  }, {\n    key: \"query\",\n    value:\n    /**\n     * query - Query the API, get messages, members or other channel fields\n     *\n     * @param {ChannelQueryOptions<StreamChatGenerics>} options The query options\n     * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings\n     *\n     * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} Returns a query response\n     */\n    function () {\n      var _query = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee40(options) {\n        var _options$messages$lim, _options$messages, _this$data6, _this$data7;\n        var messageSetToAddToIfDoesNotExist,\n          queryURL,\n          state,\n          tempChannelCid,\n          _this$_initializeStat,\n          messageSet,\n          areCapabilitiesChanged,\n          _args40 = arguments;\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                messageSetToAddToIfDoesNotExist = _args40.length > 1 && _args40[1] !== undefined ? _args40[1] : 'current';\n                _context40.next = 3;\n                return this.getClient().wsPromise;\n              case 3:\n                queryURL = \"\".concat(this.getClient().baseURL, \"/channels/\").concat(encodeURIComponent(this.type));\n                if (this.id) {\n                  queryURL += \"/\".concat(encodeURIComponent(this.id));\n                }\n                _context40.next = 7;\n                return this.getClient().post(queryURL + '/query', _objectSpread$c({\n                  data: this._data,\n                  state: true\n                }, options));\n              case 7:\n                state = _context40.sent;\n\n                // update the channel id if it was missing\n                if (!this.id) {\n                  this.id = state.channel.id;\n                  this.cid = state.channel.cid; // set the channel as active...\n\n                  tempChannelCid = generateChannelTempCid(this.type, state.members.map(function (member) {\n                    var _member$user;\n                    return member.user_id || ((_member$user = member.user) === null || _member$user === void 0 ? void 0 : _member$user.id) || '';\n                  }));\n                  if (tempChannelCid && tempChannelCid in this.getClient().activeChannels) {\n                    // This gets set in `client.channel()` function, when channel is created\n                    // using members, not id.\n                    delete this.getClient().activeChannels[tempChannelCid];\n                  }\n                  if (!(this.cid in this.getClient().activeChannels) && this.getClient()._cacheEnabled()) {\n                    this.getClient().activeChannels[this.cid] = this;\n                  }\n                }\n                this.getClient()._addChannelConfig(state.channel); // add any messages to our channel state\n\n                _this$_initializeStat = this._initializeState(state, messageSetToAddToIfDoesNotExist), messageSet = _this$_initializeStat.messageSet;\n                messageSet.pagination = _objectSpread$c(_objectSpread$c({}, messageSet.pagination), messageSetPagination({\n                  parentSet: messageSet,\n                  messagePaginationOptions: options === null || options === void 0 ? void 0 : options.messages,\n                  requestedPageSize: (_options$messages$lim = options === null || options === void 0 ? void 0 : (_options$messages = options.messages) === null || _options$messages === void 0 ? void 0 : _options$messages.limit) !== null && _options$messages$lim !== void 0 ? _options$messages$lim : DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE,\n                  returnedPage: state.messages,\n                  logger: this.getClient().logger\n                }));\n                this.getClient().polls.hydratePollCache(state.messages, true);\n                areCapabilitiesChanged = _toConsumableArray(state.channel.own_capabilities || []).sort().join() !== _toConsumableArray(Array.isArray((_this$data6 = this.data) === null || _this$data6 === void 0 ? void 0 : _this$data6.own_capabilities) ? (_this$data7 = this.data) === null || _this$data7 === void 0 ? void 0 : _this$data7.own_capabilities : []).sort().join();\n                this.data = state.channel;\n                this.offlineMode = false;\n                if (areCapabilitiesChanged) {\n                  this.getClient().dispatchEvent({\n                    type: 'capabilities.changed',\n                    cid: this.cid,\n                    own_capabilities: state.channel.own_capabilities\n                  });\n                }\n                this.getClient().dispatchEvent({\n                  type: 'channels.queried',\n                  queriedChannels: {\n                    channels: [state],\n                    isLatestMessageSet: messageSet.isLatest\n                  }\n                });\n                return _context40.abrupt(\"return\", state);\n              case 19:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n      function query(_x39) {\n        return _query.apply(this, arguments);\n      }\n      return query;\n    }()\n    /**\n     * banUser - Bans a user from a channel\n     *\n     * @param {string} targetUserID\n     * @param {BanUserOptions<StreamChatGenerics>} options\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"banUser\",\n    value: function () {\n      var _banUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee41(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                this._checkInitialized();\n                _context41.next = 3;\n                return this.getClient().banUser(targetUserID, _objectSpread$c(_objectSpread$c({}, options), {}, {\n                  type: this.type,\n                  id: this.id\n                }));\n              case 3:\n                return _context41.abrupt(\"return\", _context41.sent);\n              case 4:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n      function banUser(_x40, _x41) {\n        return _banUser.apply(this, arguments);\n      }\n      return banUser;\n    }()\n    /**\n     * hides the channel from queryChannels for the user until a message is added\n     * If clearHistory is set to true - all messages will be removed for the user\n     *\n     * @param {string | null} userId\n     * @param {boolean} clearHistory\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"hide\",\n    value: function () {\n      var _hide = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee42() {\n        var userId,\n          clearHistory,\n          _args42 = arguments;\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                userId = _args42.length > 0 && _args42[0] !== undefined ? _args42[0] : null;\n                clearHistory = _args42.length > 1 && _args42[1] !== undefined ? _args42[1] : false;\n                this._checkInitialized();\n                _context42.next = 5;\n                return this.getClient().post(\"\".concat(this._channelURL(), \"/hide\"), {\n                  user_id: userId,\n                  clear_history: clearHistory\n                });\n              case 5:\n                return _context42.abrupt(\"return\", _context42.sent);\n              case 6:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n      function hide() {\n        return _hide.apply(this, arguments);\n      }\n      return hide;\n    }()\n    /**\n     * removes the hidden status for a channel\n     *\n     * @param {string | null} userId\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"show\",\n    value: function () {\n      var _show = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee43() {\n        var userId,\n          _args43 = arguments;\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                userId = _args43.length > 0 && _args43[0] !== undefined ? _args43[0] : null;\n                this._checkInitialized();\n                _context43.next = 4;\n                return this.getClient().post(\"\".concat(this._channelURL(), \"/show\"), {\n                  user_id: userId\n                });\n              case 4:\n                return _context43.abrupt(\"return\", _context43.sent);\n              case 5:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n      function show() {\n        return _show.apply(this, arguments);\n      }\n      return show;\n    }()\n    /**\n     * unbanUser - Removes the bans for a user on a channel\n     *\n     * @param {string} targetUserID\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unbanUser\",\n    value: function () {\n      var _unbanUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee44(targetUserID) {\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                this._checkInitialized();\n                _context44.next = 3;\n                return this.getClient().unbanUser(targetUserID, {\n                  type: this.type,\n                  id: this.id\n                });\n              case 3:\n                return _context44.abrupt(\"return\", _context44.sent);\n              case 4:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n      function unbanUser(_x42) {\n        return _unbanUser.apply(this, arguments);\n      }\n      return unbanUser;\n    }()\n    /**\n     * shadowBan - Shadow bans a user from a channel\n     *\n     * @param {string} targetUserID\n     * @param {BanUserOptions<StreamChatGenerics>} options\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"shadowBan\",\n    value: function () {\n      var _shadowBan = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee45(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                this._checkInitialized();\n                _context45.next = 3;\n                return this.getClient().shadowBan(targetUserID, _objectSpread$c(_objectSpread$c({}, options), {}, {\n                  type: this.type,\n                  id: this.id\n                }));\n              case 3:\n                return _context45.abrupt(\"return\", _context45.sent);\n              case 4:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n      function shadowBan(_x43, _x44) {\n        return _shadowBan.apply(this, arguments);\n      }\n      return shadowBan;\n    }()\n    /**\n     * removeShadowBan - Removes the shadow ban for a user on a channel\n     *\n     * @param {string} targetUserID\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"removeShadowBan\",\n    value: function () {\n      var _removeShadowBan = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee46(targetUserID) {\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                this._checkInitialized();\n                _context46.next = 3;\n                return this.getClient().removeShadowBan(targetUserID, {\n                  type: this.type,\n                  id: this.id\n                });\n              case 3:\n                return _context46.abrupt(\"return\", _context46.sent);\n              case 4:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n      function removeShadowBan(_x45) {\n        return _removeShadowBan.apply(this, arguments);\n      }\n      return removeShadowBan;\n    }()\n    /**\n     * createCall - creates a call for the current channel\n     *\n     * @param {CreateCallOptions} options\n     * @returns {Promise<CreateCallResponse>}\n     */\n  }, {\n    key: \"createCall\",\n    value: function () {\n      var _createCall = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee47(options) {\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                _context47.next = 2;\n                return this.getClient().post(this._channelURL() + '/call', options);\n              case 2:\n                return _context47.abrupt(\"return\", _context47.sent);\n              case 3:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n      function createCall(_x46) {\n        return _createCall.apply(this, arguments);\n      }\n      return createCall;\n    }()\n    /**\n     * Cast or cancel one or more votes on a poll\n     * @param pollId string The poll id\n     * @param votes PollVoteData[] The votes that will be casted (or canceled in case of an empty array)\n     * @returns {APIResponse & PollVoteResponse} The poll votes\n     */\n  }, {\n    key: \"vote\",\n    value: function () {\n      var _vote2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee48(messageId, pollId, _vote) {\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                _context48.next = 2;\n                return this.getClient().castPollVote(messageId, pollId, _vote);\n              case 2:\n                return _context48.abrupt(\"return\", _context48.sent);\n              case 3:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this);\n      }));\n      function vote(_x47, _x48, _x49) {\n        return _vote2.apply(this, arguments);\n      }\n      return vote;\n    }()\n  }, {\n    key: \"removeVote\",\n    value: function () {\n      var _removeVote = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee49(messageId, pollId, voteId) {\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                _context49.next = 2;\n                return this.getClient().removePollVote(messageId, pollId, voteId);\n              case 2:\n                return _context49.abrupt(\"return\", _context49.sent);\n              case 3:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this);\n      }));\n      function removeVote(_x50, _x51, _x52) {\n        return _removeVote.apply(this, arguments);\n      }\n      return removeVote;\n    }()\n    /**\n     * on - Listen to events on this channel.\n     *\n     * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n     * or\n     * channel.on(event => {console.log(event.type)})\n     *\n     * @param {EventHandler<StreamChatGenerics> | EventTypes} callbackOrString  The event type to listen for (optional)\n     * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call\n     */\n  }, {\n    key: \"on\",\n    value: function on(callbackOrString, callbackOrNothing) {\n      var _this2 = this;\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n      this._client.logger('info', \"Attaching listener for \".concat(key, \" event on channel \").concat(this.cid), {\n        tags: ['event', 'channel'],\n        channel: this\n      });\n      this.listeners[key].push(callback);\n      return {\n        unsubscribe: function unsubscribe() {\n          _this2._client.logger('info', \"Removing listener for \".concat(key, \" event from channel \").concat(_this2.cid), {\n            tags: ['event', 'channel'],\n            channel: _this2\n          });\n          _this2.listeners[key] = _this2.listeners[key].filter(function (el) {\n            return el !== callback;\n          });\n        }\n      };\n    }\n    /**\n     * off - Remove the event handler\n     *\n     */\n  }, {\n    key: \"off\",\n    value: function off(callbackOrString, callbackOrNothing) {\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n      this._client.logger('info', \"Removing listener for \".concat(key, \" event from channel \").concat(this.cid), {\n        tags: ['event', 'channel'],\n        channel: this\n      });\n      this.listeners[key] = this.listeners[key].filter(function (value) {\n        return value !== callback;\n      });\n    } // eslint-disable-next-line sonarjs/cognitive-complexity\n  }, {\n    key: \"_handleChannelEvent\",\n    value: function _handleChannelEvent(event) {\n      var _event$user, _event$user2, _event$user3, _event$user5, _event$user6, _event$channel, _event$member, _channelState$members, _event$member2, _event$member2$user, _event$user9, _event$user11, _channelState$members2, _event$user12, _channelState$members3;\n      var channel = this;\n      this._client.logger('info', \"channel:_handleChannelEvent - Received event of type { \".concat(event.type, \" } on \").concat(this.cid), {\n        tags: ['event', 'channel'],\n        channel: this\n      });\n      var channelState = channel.state;\n      switch (event.type) {\n        case 'typing.start':\n          if ((_event$user = event.user) !== null && _event$user !== void 0 && _event$user.id) {\n            channelState.typing[event.user.id] = event;\n          }\n          break;\n        case 'typing.stop':\n          if ((_event$user2 = event.user) !== null && _event$user2 !== void 0 && _event$user2.id) {\n            delete channelState.typing[event.user.id];\n          }\n          break;\n        case 'message.read':\n          if ((_event$user3 = event.user) !== null && _event$user3 !== void 0 && _event$user3.id && event.created_at) {\n            var _event$user4, _this$getClient$user2;\n            channelState.read[event.user.id] = {\n              last_read: new Date(event.created_at),\n              last_read_message_id: event.last_read_message_id,\n              user: event.user,\n              unread_messages: 0\n            };\n            if (((_event$user4 = event.user) === null || _event$user4 === void 0 ? void 0 : _event$user4.id) === ((_this$getClient$user2 = this.getClient().user) === null || _this$getClient$user2 === void 0 ? void 0 : _this$getClient$user2.id)) {\n              channelState.unreadCount = 0;\n            }\n          }\n          break;\n        case 'user.watching.start':\n        case 'user.updated':\n          if ((_event$user5 = event.user) !== null && _event$user5 !== void 0 && _event$user5.id) {\n            channelState.watchers[event.user.id] = event.user;\n          }\n          break;\n        case 'user.watching.stop':\n          if ((_event$user6 = event.user) !== null && _event$user6 !== void 0 && _event$user6.id) {\n            delete channelState.watchers[event.user.id];\n          }\n          break;\n        case 'message.deleted':\n          if (event.message) {\n            this._extendEventWithOwnReactions(event);\n            if (event.hard_delete) channelState.removeMessage(event.message);else channelState.addMessageSorted(event.message, false, false);\n            channelState.removeQuotedMessageReferences(event.message);\n            if (event.message.pinned) {\n              channelState.removePinnedMessage(event.message);\n            }\n          }\n          break;\n        case 'message.new':\n          if (event.message) {\n            var _event$user7, _this$getClient$user3, _event$user8;\n\n            /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */\n            var ownMessage = ((_event$user7 = event.user) === null || _event$user7 === void 0 ? void 0 : _event$user7.id) === ((_this$getClient$user3 = this.getClient().user) === null || _this$getClient$user3 === void 0 ? void 0 : _this$getClient$user3.id);\n            var isThreadMessage = event.message.parent_id && !event.message.show_in_channel;\n            if (this.state.isUpToDate || isThreadMessage) {\n              channelState.addMessageSorted(event.message, ownMessage);\n            }\n            if (event.message.pinned) {\n              channelState.addPinnedMessage(event.message);\n            } // do not increase the unread count - the back-end does not increase the count neither in the following cases:\n            // 1. the message is mine\n            // 2. the message is a thread reply from any user\n\n            var preventUnreadCountUpdate = ownMessage || isThreadMessage;\n            if (preventUnreadCountUpdate) break;\n            if ((_event$user8 = event.user) !== null && _event$user8 !== void 0 && _event$user8.id) {\n              for (var userId in channelState.read) {\n                if (userId === event.user.id) {\n                  channelState.read[event.user.id] = {\n                    last_read: new Date(event.created_at),\n                    user: event.user,\n                    unread_messages: 0\n                  };\n                } else {\n                  channelState.read[userId].unread_messages += 1;\n                }\n              }\n            }\n            if (this._countMessageAsUnread(event.message)) {\n              channelState.unreadCount = channelState.unreadCount + 1;\n            }\n          }\n          break;\n        case 'message.updated':\n        case 'message.undeleted':\n          if (event.message) {\n            this._extendEventWithOwnReactions(event);\n            channelState.addMessageSorted(event.message, false, false);\n            channelState._updateQuotedMessageReferences({\n              message: event.message\n            });\n            if (event.message.pinned) {\n              channelState.addPinnedMessage(event.message);\n            } else {\n              channelState.removePinnedMessage(event.message);\n            }\n          }\n          break;\n        case 'channel.truncated':\n          if ((_event$channel = event.channel) !== null && _event$channel !== void 0 && _event$channel.truncated_at) {\n            var truncatedAt = +new Date(event.channel.truncated_at);\n            channelState.messageSets.forEach(function (messageSet, messageSetIndex) {\n              messageSet.messages.forEach(function (_ref2) {\n                var createdAt = _ref2.created_at,\n                  id = _ref2.id;\n                if (truncatedAt > +createdAt) channelState.removeMessage({\n                  id: id,\n                  messageSetIndex: messageSetIndex\n                });\n              });\n            });\n            channelState.pinnedMessages.forEach(function (_ref3) {\n              var id = _ref3.id,\n                createdAt = _ref3.created_at;\n              if (truncatedAt > +createdAt) channelState.removePinnedMessage({\n                id: id\n              });\n            });\n          } else {\n            channelState.clearMessages();\n          }\n          channelState.unreadCount = 0; // system messages don't increment unread counts\n\n          if (event.message) {\n            channelState.addMessageSorted(event.message);\n            if (event.message.pinned) {\n              channelState.addPinnedMessage(event.message);\n            }\n          }\n          break;\n        case 'member.added':\n        case 'member.updated':\n          if ((_event$member = event.member) !== null && _event$member !== void 0 && _event$member.user) {\n            channelState.members = _objectSpread$c(_objectSpread$c({}, channelState.members), {}, _defineProperty({}, event.member.user.id, event.member));\n          }\n          if (typeof ((_channelState$members = channelState.membership.user) === null || _channelState$members === void 0 ? void 0 : _channelState$members.id) === 'string' && typeof ((_event$member2 = event.member) === null || _event$member2 === void 0 ? void 0 : (_event$member2$user = _event$member2.user) === null || _event$member2$user === void 0 ? void 0 : _event$member2$user.id) === 'string' && event.member.user.id === channelState.membership.user.id) {\n            channelState.membership = event.member;\n          }\n          break;\n        case 'member.removed':\n          if ((_event$user9 = event.user) !== null && _event$user9 !== void 0 && _event$user9.id) {\n            var newMembers = _objectSpread$c({}, channelState.members);\n            delete newMembers[event.user.id];\n            channelState.members = newMembers; // TODO?: unset membership\n          }\n          break;\n        case 'notification.mark_unread':\n          {\n            var _event$user10, _this$getClient$user4, _event$unread_message;\n            var _ownMessage = ((_event$user10 = event.user) === null || _event$user10 === void 0 ? void 0 : _event$user10.id) === ((_this$getClient$user4 = this.getClient().user) === null || _this$getClient$user4 === void 0 ? void 0 : _this$getClient$user4.id);\n            if (!(_ownMessage && event.user)) break;\n            var unreadCount = (_event$unread_message = event.unread_messages) !== null && _event$unread_message !== void 0 ? _event$unread_message : 0;\n            channelState.read[event.user.id] = {\n              first_unread_message_id: event.first_unread_message_id,\n              last_read: new Date(event.last_read_at),\n              last_read_message_id: event.last_read_message_id,\n              user: event.user,\n              unread_messages: unreadCount\n            };\n            channelState.unreadCount = unreadCount;\n            break;\n          }\n        case 'channel.updated':\n          if (event.channel) {\n            var _event$channel2, _channel$data, _event$channel$hidden, _event$channel3, _channel$data2, _event$channel$own_ca, _event$channel4, _channel$data3;\n            var isFrozenChanged = ((_event$channel2 = event.channel) === null || _event$channel2 === void 0 ? void 0 : _event$channel2.frozen) !== undefined && event.channel.frozen !== ((_channel$data = channel.data) === null || _channel$data === void 0 ? void 0 : _channel$data.frozen);\n            if (isFrozenChanged) {\n              this.query({\n                state: false,\n                messages: {\n                  limit: 0\n                },\n                watchers: {\n                  limit: 0\n                }\n              });\n            }\n            channel.data = _objectSpread$c(_objectSpread$c({}, event.channel), {}, {\n              hidden: (_event$channel$hidden = (_event$channel3 = event.channel) === null || _event$channel3 === void 0 ? void 0 : _event$channel3.hidden) !== null && _event$channel$hidden !== void 0 ? _event$channel$hidden : (_channel$data2 = channel.data) === null || _channel$data2 === void 0 ? void 0 : _channel$data2.hidden,\n              own_capabilities: (_event$channel$own_ca = (_event$channel4 = event.channel) === null || _event$channel4 === void 0 ? void 0 : _event$channel4.own_capabilities) !== null && _event$channel$own_ca !== void 0 ? _event$channel$own_ca : (_channel$data3 = channel.data) === null || _channel$data3 === void 0 ? void 0 : _channel$data3.own_capabilities\n            });\n          }\n          break;\n        case 'reaction.new':\n          if (event.message && event.reaction) {\n            event.message = channelState.addReaction(event.reaction, event.message);\n          }\n          break;\n        case 'reaction.deleted':\n          if (event.reaction) {\n            event.message = channelState.removeReaction(event.reaction, event.message);\n          }\n          break;\n        case 'reaction.updated':\n          if (event.reaction) {\n            // assuming reaction.updated is only called if enforce_unique is true\n            event.message = channelState.addReaction(event.reaction, event.message, true);\n          }\n          break;\n        case 'channel.hidden':\n          channel.data = _objectSpread$c(_objectSpread$c({}, channel.data), {}, {\n            hidden: true\n          });\n          if (event.clear_history) {\n            channelState.clearMessages();\n          }\n          break;\n        case 'channel.visible':\n          channel.data = _objectSpread$c(_objectSpread$c({}, channel.data), {}, {\n            hidden: false\n          });\n          break;\n        case 'user.banned':\n          if (!((_event$user11 = event.user) !== null && _event$user11 !== void 0 && _event$user11.id)) break;\n          channelState.members[event.user.id] = _objectSpread$c(_objectSpread$c({}, channelState.members[event.user.id] || {}), {}, {\n            shadow_banned: !!event.shadow,\n            banned: !event.shadow,\n            user: _objectSpread$c(_objectSpread$c({}, ((_channelState$members2 = channelState.members[event.user.id]) === null || _channelState$members2 === void 0 ? void 0 : _channelState$members2.user) || {}), event.user)\n          });\n          break;\n        case 'user.unbanned':\n          if (!((_event$user12 = event.user) !== null && _event$user12 !== void 0 && _event$user12.id)) break;\n          channelState.members[event.user.id] = _objectSpread$c(_objectSpread$c({}, channelState.members[event.user.id] || {}), {}, {\n            shadow_banned: false,\n            banned: false,\n            user: _objectSpread$c(_objectSpread$c({}, ((_channelState$members3 = channelState.members[event.user.id]) === null || _channelState$members3 === void 0 ? void 0 : _channelState$members3.user) || {}), event.user)\n          });\n          break;\n      } // any event can send over the online count\n\n      if (event.watcher_count !== undefined) {\n        channel.state.watcher_count = event.watcher_count;\n      }\n    }\n  }, {\n    key: \"_checkInitialized\",\n    value: function _checkInitialized() {\n      if (!this.initialized && !this.offlineMode && !this.getClient()._isUsingServerAuth()) {\n        throw Error(\"Channel \".concat(this.cid, \" hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve\"));\n      }\n    } // eslint-disable-next-line sonarjs/cognitive-complexity\n  }, {\n    key: \"_initializeState\",\n    value: function _initializeState(state) {\n      var messageSetToAddToIfDoesNotExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';\n      var _this$getClient2 = this.getClient(),\n        clientState = _this$getClient2.state,\n        user = _this$getClient2.user,\n        userID = _this$getClient2.userID; // add the members and users\n\n      if (state.members) {\n        this._hydrateMembers({\n          members: state.members\n        });\n        var _iterator = _createForOfIteratorHelper$4(state.members),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var member = _step.value;\n            if (member.user) {\n              clientState.updateUserReference(member.user, this.cid);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      this.state.membership = state.membership || {};\n      var messages = state.messages || [];\n      if (!this.state.messages) {\n        this.state.initMessages();\n      }\n      var _this$state$addMessag = this.state.addMessagesSorted(messages, false, true, true, messageSetToAddToIfDoesNotExist),\n        messageSet = _this$state$addMessag.messageSet;\n      if (!this.state.pinnedMessages) {\n        this.state.pinnedMessages = [];\n      }\n      this.state.addPinnedMessages(state.pinned_messages || []);\n      if (state.pending_messages) {\n        this.state.pending_messages = state.pending_messages;\n      }\n      if (state.watcher_count !== undefined) {\n        this.state.watcher_count = state.watcher_count;\n      } // convert the arrays into objects for easier syncing...\n\n      if (state.watchers) {\n        var _iterator2 = _createForOfIteratorHelper$4(state.watchers),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var watcher = _step2.value;\n            if (watcher) {\n              clientState.updateUserReference(watcher, this.cid);\n              this.state.watchers[watcher.id] = watcher;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } // initialize read state to last message or current time if the channel is empty\n      // if the user is a member, this value will be overwritten later on otherwise this ensures\n      // that everything up to this point is not marked as unread\n\n      if (userID != null) {\n        var last_read = this.state.last_message_at || new Date();\n        if (user) {\n          this.state.read[user.id] = {\n            user: user,\n            last_read: last_read,\n            unread_messages: 0\n          };\n        }\n      } // apply read state if part of the state\n\n      if (state.read) {\n        var _iterator3 = _createForOfIteratorHelper$4(state.read),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _read$unread_messages;\n            var read = _step3.value;\n            this.state.read[read.user.id] = {\n              last_read: new Date(read.last_read),\n              last_read_message_id: read.last_read_message_id,\n              unread_messages: (_read$unread_messages = read.unread_messages) !== null && _read$unread_messages !== void 0 ? _read$unread_messages : 0,\n              user: read.user\n            };\n            if (read.user.id === (user === null || user === void 0 ? void 0 : user.id)) {\n              this.state.unreadCount = this.state.read[read.user.id].unread_messages;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      return {\n        messageSet: messageSet\n      };\n    }\n  }, {\n    key: \"_extendEventWithOwnReactions\",\n    value: function _extendEventWithOwnReactions(event) {\n      if (!event.message) {\n        return;\n      }\n      var message = this.state.findMessage(event.message.id, event.message.parent_id);\n      if (message) {\n        event.message.own_reactions = message.own_reactions;\n      }\n    }\n  }, {\n    key: \"_hydrateMembers\",\n    value: function _hydrateMembers(_ref4) {\n      var members = _ref4.members,\n        _ref4$overrideCurrent = _ref4.overrideCurrentState,\n        overrideCurrentState = _ref4$overrideCurrent === void 0 ? true : _ref4$overrideCurrent;\n      var newMembersById = members.reduce(function (membersById, member) {\n        if (member.user) {\n          membersById[member.user.id] = member;\n        }\n        return membersById;\n      }, {});\n      if (overrideCurrentState) {\n        this.state.members = newMembersById;\n      } else if (!overrideCurrentState && members.length) {\n        this.state.members = _objectSpread$c(_objectSpread$c({}, this.state.members), newMembersById);\n      }\n    }\n  }, {\n    key: \"_disconnect\",\n    value: function _disconnect() {\n      this._client.logger('info', \"channel:disconnect() - Disconnecting the channel \".concat(this.cid), {\n        tags: ['connection', 'channel'],\n        channel: this\n      });\n      this.disconnected = true;\n      this.state.setIsUpToDate(false);\n    }\n  }]);\n  return Channel;\n}();\nfunction _createForOfIteratorHelper$3(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$3(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$3(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);\n}\nfunction _arrayLikeToArray$3(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/**\n * ClientState - A container class for the client state.\n */\nvar ClientState = /*#__PURE__*/function () {\n  function ClientState(_ref) {\n    var client = _ref.client;\n    _classCallCheck(this, ClientState);\n    _defineProperty(this, \"client\", void 0);\n    _defineProperty(this, \"users\", void 0);\n    _defineProperty(this, \"userChannelReferences\", void 0);\n\n    // show the status for a certain user...\n    // ie online, offline etc\n    this.client = client;\n    this.users = {}; // store which channels contain references to the specified user...\n\n    this.userChannelReferences = {};\n  }\n  _createClass(ClientState, [{\n    key: \"updateUsers\",\n    value: function updateUsers(users) {\n      var _iterator = _createForOfIteratorHelper$3(users),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var user = _step.value;\n          this.updateUser(user);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(user) {\n      if (user != null && this.client._cacheEnabled()) {\n        this.users[user.id] = user;\n      }\n    }\n  }, {\n    key: \"updateUserReference\",\n    value: function updateUserReference(user, channelID) {\n      if (user == null || !this.client._cacheEnabled()) {\n        return;\n      }\n      this.updateUser(user);\n      if (!this.userChannelReferences[user.id]) {\n        this.userChannelReferences[user.id] = {};\n      }\n      this.userChannelReferences[user.id][channelID] = true;\n    }\n  }, {\n    key: \"deleteAllChannelReference\",\n    value: function deleteAllChannelReference(channelID) {\n      for (var userID in this.userChannelReferences) {\n        delete this.userChannelReferences[userID][channelID];\n      }\n    }\n  }]);\n  return ClientState;\n}();\nfunction ownKeys$b(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$b(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$b(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$b(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar InsightMetrics = function InsightMetrics() {\n  _classCallCheck(this, InsightMetrics);\n  _defineProperty(this, \"connectionStartTimestamp\", void 0);\n  _defineProperty(this, \"wsConsecutiveFailures\", void 0);\n  _defineProperty(this, \"wsTotalFailures\", void 0);\n  _defineProperty(this, \"instanceClientId\", void 0);\n  this.connectionStartTimestamp = null;\n  this.wsTotalFailures = 0;\n  this.wsConsecutiveFailures = 0;\n  this.instanceClientId = randomId();\n};\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */\n\nvar postInsights = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(insightType, insights) {\n    var maxAttempts, i;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            maxAttempts = 3;\n            i = 0;\n          case 2:\n            if (!(i < maxAttempts)) {\n              _context.next = 17;\n              break;\n            }\n            _context.prev = 3;\n            _context.next = 6;\n            return axios.post(\"https://chat-insights.getstream.io/insights/\".concat(insightType), insights);\n          case 6:\n            _context.next = 13;\n            break;\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](3);\n            _context.next = 12;\n            return sleep((i + 1) * 3000);\n          case 12:\n            return _context.abrupt(\"continue\", 14);\n          case 13:\n            return _context.abrupt(\"break\", 17);\n          case 14:\n            i++;\n            _context.next = 2;\n            break;\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 8]]);\n  }));\n  return function postInsights(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nfunction buildWsFatalInsight(connection, event) {\n  return _objectSpread$b(_objectSpread$b({}, event), buildWsBaseInsight(connection));\n}\nfunction buildWsBaseInsight(connection) {\n  var _connection$ws, _navigator, _navigator2;\n  var client = connection.client;\n  return {\n    ready_state: (_connection$ws = connection.ws) === null || _connection$ws === void 0 ? void 0 : _connection$ws.readyState,\n    url: connection._buildUrl(),\n    api_key: client.key,\n    start_ts: client.insightMetrics.connectionStartTimestamp,\n    end_ts: new Date().getTime(),\n    auth_type: client.getAuthType(),\n    token: client.tokenManager.token,\n    user_id: client.userID,\n    user_details: client._user,\n    device: client.options.device,\n    client_id: connection.connectionID,\n    ws_details: connection.ws,\n    ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n    ws_total_failures: client.insightMetrics.wsTotalFailures,\n    request_id: connection.requestID,\n    online: typeof navigator !== 'undefined' ? (_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.onLine : null,\n    user_agent: typeof navigator !== 'undefined' ? (_navigator2 = navigator) === null || _navigator2 === void 0 ? void 0 : _navigator2.userAgent : null,\n    instance_client_id: client.insightMetrics.instanceClientId\n  };\n}\nfunction buildWsSuccessAfterFailureInsight(connection) {\n  return buildWsBaseInsight(connection);\n}\nfunction ownKeys$a(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$a(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$a(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$a(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n// Type guards to check WebSocket error type\nvar isCloseEvent = function isCloseEvent(res) {\n  return res.code !== undefined;\n};\nvar isErrorEvent = function isErrorEvent(res) {\n  return res.error !== undefined;\n};\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\n\nvar StableWSConnection = /*#__PURE__*/function () {\n  // global from constructor\n  // local vars\n  function StableWSConnection(_ref) {\n    var _this = this;\n    var client = _ref.client;\n    _classCallCheck(this, StableWSConnection);\n    _defineProperty(this, \"client\", void 0);\n    _defineProperty(this, \"connectionID\", void 0);\n    _defineProperty(this, \"connectionOpen\", void 0);\n    _defineProperty(this, \"consecutiveFailures\", void 0);\n    _defineProperty(this, \"pingInterval\", void 0);\n    _defineProperty(this, \"healthCheckTimeoutRef\", void 0);\n    _defineProperty(this, \"isConnecting\", void 0);\n    _defineProperty(this, \"isDisconnected\", void 0);\n    _defineProperty(this, \"isHealthy\", void 0);\n    _defineProperty(this, \"isResolved\", void 0);\n    _defineProperty(this, \"lastEvent\", void 0);\n    _defineProperty(this, \"connectionCheckTimeout\", void 0);\n    _defineProperty(this, \"connectionCheckTimeoutRef\", void 0);\n    _defineProperty(this, \"rejectPromise\", void 0);\n    _defineProperty(this, \"requestID\", void 0);\n    _defineProperty(this, \"resolvePromise\", void 0);\n    _defineProperty(this, \"totalFailures\", void 0);\n    _defineProperty(this, \"ws\", void 0);\n    _defineProperty(this, \"wsID\", void 0);\n    _defineProperty(this, \"_buildUrl\", function () {\n      var qs = encodeURIComponent(_this.client._buildWSPayload(_this.requestID));\n      var token = _this.client.tokenManager.getToken();\n      return \"\".concat(_this.client.wsBaseURL, \"/connect?json=\").concat(qs, \"&api_key=\").concat(_this.client.key, \"&authorization=\").concat(token, \"&stream-auth-type=\").concat(_this.client.getAuthType(), \"&X-Stream-Client=\").concat(encodeURIComponent(_this.client.getUserAgent()));\n    });\n    _defineProperty(this, \"onlineStatusChanged\", function (event) {\n      if (event.type === 'offline') {\n        // mark the connection as down\n        _this._log('onlineStatusChanged() - Status changing to offline');\n        _this._setHealth(false);\n      } else if (event.type === 'online') {\n        // retry right now...\n        // We check this.isHealthy, not sure if it's always\n        // smart to create a new WS connection if the old one is still up and running.\n        // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n        _this._log(\"onlineStatusChanged() - Status changing to online. isHealthy: \".concat(_this.isHealthy));\n        if (!_this.isHealthy) {\n          _this._reconnect({\n            interval: 10\n          });\n        }\n      }\n    });\n    _defineProperty(this, \"onopen\", function (wsID) {\n      if (_this.wsID !== wsID) return;\n      _this._log('onopen() - onopen callback', {\n        wsID: wsID\n      });\n    });\n    _defineProperty(this, \"onmessage\", function (wsID, event) {\n      if (_this.wsID !== wsID) return;\n      _this._log('onmessage() - onmessage callback', {\n        event: event,\n        wsID: wsID\n      });\n      var data = typeof event.data === 'string' ? JSON.parse(event.data) : null; // we wait till the first message before we consider the connection open..\n      // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n      // after that a ws.onclose..\n\n      if (!_this.isResolved && data) {\n        var _this$resolvePromise;\n        _this.isResolved = true;\n        if (data.error) {\n          var _this$rejectPromise;\n          (_this$rejectPromise = _this.rejectPromise) === null || _this$rejectPromise === void 0 ? void 0 : _this$rejectPromise.call(_this, _this._errorFromWSEvent(data, false));\n          return;\n        }\n        (_this$resolvePromise = _this.resolvePromise) === null || _this$resolvePromise === void 0 ? void 0 : _this$resolvePromise.call(_this, data);\n        _this._setHealth(true);\n      } // trigger the event..\n\n      _this.lastEvent = new Date();\n      if (data && data.type === 'health.check') {\n        _this.scheduleNextPing();\n      }\n      _this.client.handleEvent(event);\n      _this.scheduleConnectionCheck();\n    });\n    _defineProperty(this, \"onclose\", function (wsID, event) {\n      if (_this.wsID !== wsID) return;\n      _this._log('onclose() - onclose callback - ' + event.code, {\n        event: event,\n        wsID: wsID\n      });\n      if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n        var _this$rejectPromise2;\n\n        // this is a permanent error raised by stream..\n        // usually caused by invalid auth details\n        var error = new Error(\"WS connection reject with error \".concat(event.reason));\n        error.reason = event.reason;\n        error.code = event.code;\n        error.wasClean = event.wasClean;\n        error.target = event.target;\n        (_this$rejectPromise2 = _this.rejectPromise) === null || _this$rejectPromise2 === void 0 ? void 0 : _this$rejectPromise2.call(_this, error);\n        _this._log(\"onclose() - WS connection reject with error \".concat(event.reason), {\n          event: event\n        });\n      } else {\n        var _this$rejectPromise3;\n        _this.consecutiveFailures += 1;\n        _this.totalFailures += 1;\n        _this._setHealth(false);\n        _this.isConnecting = false;\n        (_this$rejectPromise3 = _this.rejectPromise) === null || _this$rejectPromise3 === void 0 ? void 0 : _this$rejectPromise3.call(_this, _this._errorFromWSEvent(event));\n        _this._log(\"onclose() - WS connection closed. Calling reconnect ...\", {\n          event: event\n        }); // reconnect if its an abnormal failure\n\n        _this._reconnect();\n      }\n    });\n    _defineProperty(this, \"onerror\", function (wsID, event) {\n      var _this$rejectPromise4;\n      if (_this.wsID !== wsID) return;\n      _this.consecutiveFailures += 1;\n      _this.totalFailures += 1;\n      _this._setHealth(false);\n      _this.isConnecting = false;\n      (_this$rejectPromise4 = _this.rejectPromise) === null || _this$rejectPromise4 === void 0 ? void 0 : _this$rejectPromise4.call(_this, _this._errorFromWSEvent(event));\n      _this._log(\"onerror() - WS connection resulted into error\", {\n        event: event\n      });\n      _this._reconnect();\n    });\n    _defineProperty(this, \"_setHealth\", function (healthy) {\n      if (healthy === _this.isHealthy) return;\n      _this.isHealthy = healthy;\n      if (_this.isHealthy) {\n        _this.client.dispatchEvent({\n          type: 'connection.changed',\n          online: _this.isHealthy\n        });\n        return;\n      } // we're offline, wait few seconds and fire and event if still offline\n\n      setTimeout(function () {\n        if (_this.isHealthy) return;\n        _this.client.dispatchEvent({\n          type: 'connection.changed',\n          online: _this.isHealthy\n        });\n      }, 5000);\n    });\n    _defineProperty(this, \"_errorFromWSEvent\", function (event) {\n      var isWSFailure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var code;\n      var statusCode;\n      var message;\n      if (isCloseEvent(event)) {\n        code = event.code;\n        statusCode = 'unknown';\n        message = event.reason;\n      }\n      if (isErrorEvent(event)) {\n        code = event.error.code;\n        statusCode = event.error.StatusCode;\n        message = event.error.message;\n      } // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n\n      _this._log(\"_errorFromWSEvent() - WS failed with code \".concat(code), {\n        event: event\n      }, 'warn');\n      var error = new Error(\"WS failed with code \".concat(code, \" and reason - \").concat(message));\n      error.code = code;\n      /**\n       * StatusCode does not exist on any event types but has been left\n       * as is to preserve JS functionality during the TS implementation\n       */\n\n      error.StatusCode = statusCode;\n      error.isWSFailure = isWSFailure;\n      return error;\n    });\n    _defineProperty(this, \"_setupConnectionPromise\", function () {\n      _this.isResolved = false;\n      /** a promise that is resolved once ws.open is called */\n\n      _this.connectionOpen = new Promise(function (resolve, reject) {\n        _this.resolvePromise = resolve;\n        _this.rejectPromise = reject;\n      });\n    });\n    _defineProperty(this, \"scheduleNextPing\", function () {\n      if (_this.healthCheckTimeoutRef) {\n        clearTimeout(_this.healthCheckTimeoutRef);\n      } // 30 seconds is the recommended interval (messenger uses this)\n\n      _this.healthCheckTimeoutRef = setTimeout(function () {\n        // send the healthcheck.., server replies with a health check event\n        var data = [{\n          type: 'health.check',\n          client_id: _this.client.clientID\n        }]; // try to send on the connection\n\n        try {\n          var _this$ws;\n          (_this$ws = _this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.send(JSON.stringify(data));\n        } catch (e) {// error will already be detected elsewhere\n        }\n      }, _this.pingInterval);\n    });\n    _defineProperty(this, \"scheduleConnectionCheck\", function () {\n      if (_this.connectionCheckTimeoutRef) {\n        clearTimeout(_this.connectionCheckTimeoutRef);\n      }\n      _this.connectionCheckTimeoutRef = setTimeout(function () {\n        var now = new Date();\n        if (_this.lastEvent && now.getTime() - _this.lastEvent.getTime() > _this.connectionCheckTimeout) {\n          _this._log('scheduleConnectionCheck - going to reconnect');\n          _this._setHealth(false);\n          _this._reconnect();\n        }\n      }, _this.connectionCheckTimeout);\n    });\n\n    /** StreamChat client */\n    this.client = client;\n    /** consecutive failures influence the duration of the timeout */\n\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n\n    this.isConnecting = false;\n    /** To avoid reconnect if client is disconnected */\n\n    this.isDisconnected = false;\n    /** Boolean that indicates if the connection promise is resolved */\n\n    this.isResolved = false;\n    /** Boolean that indicates if we have a working connection to the server */\n\n    this.isHealthy = false;\n    /** Incremented when a new WS connection is made */\n\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n    addConnectionEventListeners(this.onlineStatusChanged);\n  }\n  _createClass(StableWSConnection, [{\n    key: \"_log\",\n    value: function _log(msg) {\n      var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'info';\n      this.client.logger(level, 'connection:' + msg, _objectSpread$a({\n        tags: ['connection']\n      }, extra));\n    }\n  }, {\n    key: \"setClient\",\n    value: function setClient(client) {\n      this.client = client;\n    }\n    /**\n     * connect - Connect to the WS URL\n     * the default 15s timeout allows between 2~3 tries\n     * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n     */\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var timeout,\n          healthCheck,\n          _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                timeout = _args.length > 0 && _args[0] !== undefined ? _args[0] : 15000;\n                if (!this.isConnecting) {\n                  _context.next = 3;\n                  break;\n                }\n                throw Error(\"You've called connect twice, can only attempt 1 connection at the time\");\n              case 3:\n                this.isDisconnected = false;\n                _context.prev = 4;\n                _context.next = 7;\n                return this._connect();\n              case 7:\n                healthCheck = _context.sent;\n                this.consecutiveFailures = 0;\n                this._log(\"connect() - Established ws connection with healthcheck: \".concat(healthCheck));\n                _context.next = 23;\n                break;\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](4);\n                this.isHealthy = false;\n                this.consecutiveFailures += 1;\n                if (!(_context.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {\n                  _context.next = 21;\n                  break;\n                }\n                this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');\n                this._reconnect({\n                  refreshToken: true\n                });\n                _context.next = 23;\n                break;\n              case 21:\n                if (_context.t0.isWSFailure) {\n                  _context.next = 23;\n                  break;\n                }\n                throw new Error(JSON.stringify({\n                  code: _context.t0.code,\n                  StatusCode: _context.t0.StatusCode,\n                  message: _context.t0.message,\n                  isWSFailure: _context.t0.isWSFailure\n                }));\n              case 23:\n                _context.next = 25;\n                return this._waitForHealthy(timeout);\n              case 25:\n                return _context.abrupt(\"return\", _context.sent);\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 12]]);\n      }));\n      function connect() {\n        return _connect2.apply(this, arguments);\n      }\n      return connect;\n    }()\n    /**\n     * _waitForHealthy polls the promise connection to see if its resolved until it times out\n     * the default 15s timeout allows between 2~3 tries\n     * @param timeout duration(ms)\n     */\n  }, {\n    key: \"_waitForHealthy\",\n    value: function () {\n      var _waitForHealthy2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n        var timeout,\n          _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 15000;\n                return _context4.abrupt(\"return\", Promise.race([_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  var interval, i;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          interval = 50; // ms\n\n                          i = 0;\n                        case 2:\n                          if (!(i <= timeout)) {\n                            _context2.next = 18;\n                            break;\n                          }\n                          _context2.prev = 3;\n                          _context2.next = 6;\n                          return _this2.connectionOpen;\n                        case 6:\n                          return _context2.abrupt(\"return\", _context2.sent);\n                        case 9:\n                          _context2.prev = 9;\n                          _context2.t0 = _context2[\"catch\"](3);\n                          if (!(i === timeout)) {\n                            _context2.next = 13;\n                            break;\n                          }\n                          throw new Error(JSON.stringify({\n                            code: _context2.t0.code,\n                            StatusCode: _context2.t0.StatusCode,\n                            message: _context2.t0.message,\n                            isWSFailure: _context2.t0.isWSFailure\n                          }));\n                        case 13:\n                          _context2.next = 15;\n                          return sleep(interval);\n                        case 15:\n                          i += interval;\n                          _context2.next = 2;\n                          break;\n                        case 18:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, null, [[3, 9]]);\n                }))(), _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return sleep(timeout);\n                        case 2:\n                          _this2.isConnecting = false;\n                          throw new Error(JSON.stringify({\n                            code: '',\n                            StatusCode: '',\n                            message: 'initial WS connection could not be established',\n                            isWSFailure: true\n                          }));\n                        case 4:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))()]));\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      function _waitForHealthy() {\n        return _waitForHealthy2.apply(this, arguments);\n      }\n      return _waitForHealthy;\n    }()\n    /**\n     * Builds and returns the url for websocket.\n     * @private\n     * @returns url string\n     */\n  }, {\n    key: \"disconnect\",\n    value:\n    /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */\n    function disconnect(timeout) {\n      var _this3 = this;\n      this._log(\"disconnect() - Closing the websocket connection for wsID \".concat(this.wsID));\n      this.wsID += 1;\n      this.isConnecting = false;\n      this.isDisconnected = true; // start by removing all the listeners\n\n      if (this.healthCheckTimeoutRef) {\n        clearInterval(this.healthCheckTimeoutRef);\n      }\n      if (this.connectionCheckTimeoutRef) {\n        clearInterval(this.connectionCheckTimeoutRef);\n      }\n      removeConnectionEventListeners(this.onlineStatusChanged);\n      this.isHealthy = false; // remove ws handlers...\n\n      if (this.ws && this.ws.removeAllListeners) {\n        this.ws.removeAllListeners();\n      }\n      var isClosedPromise; // and finally close...\n      // Assigning to local here because we will remove it from this before the\n      // promise resolves.\n\n      var ws = this.ws;\n      if (ws && ws.close && ws.readyState === ws.OPEN) {\n        isClosedPromise = new Promise(function (resolve) {\n          var onclose = function onclose(event) {\n            _this3._log(\"disconnect() - resolving isClosedPromise \".concat(event ? 'with' : 'without', \" close frame\"), {\n              event: event\n            });\n            resolve();\n          };\n          ws.onclose = onclose; // In case we don't receive close frame websocket server in time,\n          // lets not wait for more than 1 seconds.\n\n          setTimeout(onclose, timeout != null ? timeout : 1000);\n        });\n        this._log(\"disconnect() - Manually closed connection by calling client.disconnect()\");\n        ws.close(chatCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');\n      } else {\n        this._log(\"disconnect() - ws connection doesn't exist or it is already closed.\");\n        isClosedPromise = Promise.resolve();\n      }\n      delete this.ws;\n      return isClosedPromise;\n    }\n    /**\n     * _connect - Connect to the WS endpoint\n     *\n     * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n     */\n  }, {\n    key: \"_connect\",\n    value: function () {\n      var _connect3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var isTokenReady, wsURL, response, insights;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback)) {\n                  _context5.next = 2;\n                  break;\n                }\n                return _context5.abrupt(\"return\");\n              case 2:\n                // simply ignore _connect if it's currently trying to connect\n                this.isConnecting = true;\n                this.requestID = randomId();\n                this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n                isTokenReady = false;\n                _context5.prev = 6;\n                this._log(\"_connect() - waiting for token\");\n                _context5.next = 10;\n                return this.client.tokenManager.tokenReady();\n              case 10:\n                isTokenReady = true;\n                _context5.next = 15;\n                break;\n              case 13:\n                _context5.prev = 13;\n                _context5.t0 = _context5[\"catch\"](6);\n              case 15:\n                _context5.prev = 15;\n                if (isTokenReady) {\n                  _context5.next = 20;\n                  break;\n                }\n                this._log(\"_connect() - tokenProvider failed before, so going to retry\");\n                _context5.next = 20;\n                return this.client.tokenManager.loadToken();\n              case 20:\n                this._setupConnectionPromise();\n                wsURL = this._buildUrl();\n                this._log(\"_connect() - Connecting to \".concat(wsURL), {\n                  wsURL: wsURL,\n                  requestID: this.requestID\n                });\n                this.ws = new WebSocket(wsURL);\n                this.ws.onopen = this.onopen.bind(this, this.wsID);\n                this.ws.onclose = this.onclose.bind(this, this.wsID);\n                this.ws.onerror = this.onerror.bind(this, this.wsID);\n                this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n                _context5.next = 30;\n                return this.connectionOpen;\n              case 30:\n                response = _context5.sent;\n                this.isConnecting = false;\n                if (!response) {\n                  _context5.next = 36;\n                  break;\n                }\n                this.connectionID = response.connection_id;\n                if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n                  postInsights('ws_success_after_failure', buildWsSuccessAfterFailureInsight(this));\n                  this.client.insightMetrics.wsConsecutiveFailures = 0;\n                }\n                return _context5.abrupt(\"return\", response);\n              case 36:\n                _context5.next = 44;\n                break;\n              case 38:\n                _context5.prev = 38;\n                _context5.t1 = _context5[\"catch\"](15);\n                this.isConnecting = false;\n                this._log(\"_connect() - Error - \", _context5.t1);\n                if (this.client.options.enableInsights) {\n                  this.client.insightMetrics.wsConsecutiveFailures++;\n                  this.client.insightMetrics.wsTotalFailures++;\n                  insights = buildWsFatalInsight(this, convertErrorToJson(_context5.t1));\n                  postInsights === null || postInsights === void 0 ? void 0 : postInsights('ws_fatal', insights);\n                }\n                throw _context5.t1;\n              case 44:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[6, 13], [15, 38]]);\n      }));\n      function _connect() {\n        return _connect3.apply(this, arguments);\n      }\n      return _connect;\n    }()\n    /**\n     * _reconnect - Retry the connection to WS endpoint\n     *\n     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n     *\n     * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n     * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n     */\n  }, {\n    key: \"_reconnect\",\n    value: function () {\n      var _reconnect2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var options,\n          interval,\n          _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n                this._log('_reconnect() - Initiating the reconnect'); // only allow 1 connection at the time\n\n                if (!(this.isConnecting || this.isHealthy)) {\n                  _context6.next = 5;\n                  break;\n                }\n                this._log('_reconnect() - Abort (1) since already connecting or healthy');\n                return _context6.abrupt(\"return\");\n              case 5:\n                // reconnect in case of on error or on close\n                // also reconnect if the health check cycle fails\n                interval = options.interval;\n                if (!interval) {\n                  interval = retryInterval(this.consecutiveFailures);\n                } // reconnect, or try again after a little while...\n\n                _context6.next = 9;\n                return sleep(interval);\n              case 9:\n                if (!(this.isConnecting || this.isHealthy)) {\n                  _context6.next = 12;\n                  break;\n                }\n                this._log('_reconnect() - Abort (2) since already connecting or healthy');\n                return _context6.abrupt(\"return\");\n              case 12:\n                if (!(this.isDisconnected && this.client.options.enableWSFallback)) {\n                  _context6.next = 15;\n                  break;\n                }\n                this._log('_reconnect() - Abort (3) since disconnect() is called');\n                return _context6.abrupt(\"return\");\n              case 15:\n                this._log('_reconnect() - Destroying current WS connection'); // cleanup the old connection\n\n                this._destroyCurrentWSConnection();\n                if (!options.refreshToken) {\n                  _context6.next = 20;\n                  break;\n                }\n                _context6.next = 20;\n                return this.client.tokenManager.loadToken();\n              case 20:\n                _context6.prev = 20;\n                _context6.next = 23;\n                return this._connect();\n              case 23:\n                this._log('_reconnect() - Waiting for recoverCallBack');\n                _context6.next = 26;\n                return this.client.recoverState();\n              case 26:\n                this._log('_reconnect() - Finished recoverCallBack');\n                this.consecutiveFailures = 0;\n                _context6.next = 38;\n                break;\n              case 30:\n                _context6.prev = 30;\n                _context6.t0 = _context6[\"catch\"](20);\n                this.isHealthy = false;\n                this.consecutiveFailures += 1;\n                if (!(_context6.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {\n                  _context6.next = 37;\n                  break;\n                }\n                this._log('_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect');\n                return _context6.abrupt(\"return\", this._reconnect({\n                  refreshToken: true\n                }));\n              case 37:\n                // reconnect on WS failures, don't reconnect if there is a code bug\n                if (_context6.t0.isWSFailure) {\n                  this._log('_reconnect() - WS failure, so going to try to reconnect');\n                  this._reconnect();\n                }\n              case 38:\n                this._log('_reconnect() - == END ==');\n              case 39:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[20, 30]]);\n      }));\n      function _reconnect() {\n        return _reconnect2.apply(this, arguments);\n      }\n      return _reconnect;\n    }()\n    /**\n     * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n     *\n     * @param {Event} event Event with type online or offline\n     *\n     */\n  }, {\n    key: \"_destroyCurrentWSConnection\",\n    value:\n    /**\n     * _destroyCurrentWSConnection - Removes the current WS connection\n     *\n     */\n    function _destroyCurrentWSConnection() {\n      // increment the ID, meaning we will ignore all messages from the old\n      // ws connection from now on.\n      this.wsID += 1;\n      try {\n        var _this$ws2, _this$ws3;\n        this === null || this === void 0 ? void 0 : (_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.removeAllListeners();\n        this === null || this === void 0 ? void 0 : (_this$ws3 = this.ws) === null || _this$ws3 === void 0 ? void 0 : _this$ws3.close();\n      } catch (e) {// we don't care\n      }\n    }\n    /**\n     * _setupPromise - sets up the this.connectOpen promise\n     */\n  }]);\n  return StableWSConnection;\n}();\nvar jwt = null;\nvar crypto$1 = null;\nfunction ownKeys$9(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$9(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$9(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$9(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UR} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nfunction JWTUserToken(apiSecret, userId) {\n  var extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var jwtOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n  var payload = _objectSpread$9({\n    user_id: userId\n  }, extraData); // make sure we return a clear error when jwt is shimmed (ie. browser build)\n\n  {\n    throw Error(\"Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.\");\n  }\n  var opts = _extends({\n    algorithm: 'HS256',\n    noTimestamp: true\n  }, jwtOptions);\n}\nfunction JWTServerToken(apiSecret) {\n  var jwtOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var payload = {\n    server: true\n  };\n  var opts = _extends({\n    algorithm: 'HS256',\n    noTimestamp: true\n  }, jwtOptions);\n  return jwt.sign(payload, apiSecret, opts);\n}\nfunction UserFromToken(token) {\n  var fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  var b64Payload = fragments[1];\n  var payload = decodeBase64(b64Payload);\n  var data = JSON.parse(payload);\n  return data.user_id;\n}\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */\n\nfunction DevToken(userId) {\n  return ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n  //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n  encodeBase64(JSON.stringify({\n    user_id: userId\n  })), 'devtoken' // hardcoded signature\n  ].join('.');\n}\n/**\n *\n * @param {string | Buffer} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */\n\nfunction CheckSignature(body, secret, signature) {\n  var key = Buffer.from(secret, 'utf8');\n  var hash = crypto$1.createHmac('sha256', key).update(body).digest('hex');\n  try {\n    return crypto$1.timingSafeEqual(Buffer.from(hash), Buffer.from(signature));\n  } catch (_unused) {\n    return false;\n  }\n}\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nvar TokenManager =\n/**\n * Constructor\n *\n * @param {Secret} secret\n */\nfunction TokenManager(secret) {\n  var _this = this;\n  _classCallCheck(this, TokenManager);\n  _defineProperty(this, \"loadTokenPromise\", void 0);\n  _defineProperty(this, \"type\", void 0);\n  _defineProperty(this, \"secret\", void 0);\n  _defineProperty(this, \"token\", void 0);\n  _defineProperty(this, \"tokenProvider\", void 0);\n  _defineProperty(this, \"user\", void 0);\n  _defineProperty(this, \"setTokenOrProvider\", /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenOrProvider, user) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.validateToken(tokenOrProvider, user);\n              _this.user = user;\n              if (isFunction(tokenOrProvider)) {\n                _this.tokenProvider = tokenOrProvider;\n                _this.type = 'provider';\n              }\n              if (typeof tokenOrProvider === 'string') {\n                _this.token = tokenOrProvider;\n                _this.type = 'static';\n              }\n              if (!tokenOrProvider && _this.user && _this.secret) {\n                _this.token = JWTUserToken(_this.secret, user.id, {}, {});\n                _this.type = 'static';\n              }\n              _context.next = 7;\n              return _this.loadToken();\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, \"reset\", function () {\n    _this.token = undefined;\n    _this.tokenProvider = undefined;\n    _this.type = 'static';\n    _this.user = undefined;\n    _this.loadTokenPromise = null;\n  });\n  _defineProperty(this, \"validateToken\", function (tokenOrProvider, user) {\n    // allow empty token for anon user\n    if (user && user.anon && !tokenOrProvider) return; // Don't allow empty token for non-server side client.\n\n    if (!_this.secret && !tokenOrProvider) {\n      throw new Error('User token can not be empty');\n    }\n    if (tokenOrProvider && typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {\n      throw new Error('user token should either be a string or a function');\n    }\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (user.anon && tokenOrProvider === '') return;\n      var tokenUserId = UserFromToken(tokenOrProvider);\n      if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)) {\n        throw new Error('userToken does not have a user_id or is not matching with user.id');\n      }\n    }\n  });\n  _defineProperty(this, \"tokenReady\", function () {\n    return _this.loadTokenPromise;\n  });\n  _defineProperty(this, \"loadToken\", function () {\n    // eslint-disable-next-line no-async-promise-executor\n    _this.loadTokenPromise = new Promise(/*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve, reject) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(_this.type === 'static')) {\n                  _context2.next = 2;\n                  break;\n                }\n                return _context2.abrupt(\"return\", resolve(_this.token));\n              case 2:\n                if (!(_this.tokenProvider && typeof _this.tokenProvider !== 'string')) {\n                  _context2.next = 13;\n                  break;\n                }\n                _context2.prev = 3;\n                _context2.next = 6;\n                return _this.tokenProvider();\n              case 6:\n                _this.token = _context2.sent;\n                _context2.next = 12;\n                break;\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                return _context2.abrupt(\"return\", reject(new Error(\"Call to tokenProvider failed with message: \".concat(_context2.t0))));\n              case 12:\n                resolve(_this.token);\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[3, 9]]);\n      }));\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    return _this.loadTokenPromise;\n  });\n  _defineProperty(this, \"getToken\", function () {\n    if (_this.token) {\n      return _this.token;\n    }\n    if (_this.user && _this.user.anon && !_this.token) {\n      return _this.token;\n    }\n    if (_this.secret) {\n      return JWTServerToken(_this.secret);\n    }\n    throw new Error(\"Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called\");\n  });\n  _defineProperty(this, \"isStatic\", function () {\n    return _this.type === 'static';\n  });\n  this.loadTokenPromise = null;\n  if (secret) {\n    this.secret = secret;\n  }\n  this.type = 'static';\n  if (this.secret) {\n    this.token = JWTServerToken(this.secret);\n  }\n}\n/**\n * Set the static string token or token provider.\n * Token provider should return a token string or a promise which resolves to string token.\n *\n * @param {TokenOrProvider} tokenOrProvider\n * @param {UserResponse<StreamChatGenerics>} user\n */;\nvar APIErrorCodes = {\n  '-1': {\n    name: 'InternalSystemError',\n    retryable: true\n  },\n  '2': {\n    name: 'AccessKeyError',\n    retryable: false\n  },\n  '3': {\n    name: 'AuthenticationFailedError',\n    retryable: true\n  },\n  '4': {\n    name: 'InputError',\n    retryable: false\n  },\n  '6': {\n    name: 'DuplicateUsernameError',\n    retryable: false\n  },\n  '9': {\n    name: 'RateLimitError',\n    retryable: true\n  },\n  '16': {\n    name: 'DoesNotExistError',\n    retryable: false\n  },\n  '17': {\n    name: 'NotAllowedError',\n    retryable: false\n  },\n  '18': {\n    name: 'EventNotSupportedError',\n    retryable: false\n  },\n  '19': {\n    name: 'ChannelFeatureNotSupportedError',\n    retryable: false\n  },\n  '20': {\n    name: 'MessageTooLongError',\n    retryable: false\n  },\n  '21': {\n    name: 'MultipleNestingLevelError',\n    retryable: false\n  },\n  '22': {\n    name: 'PayloadTooBigError',\n    retryable: false\n  },\n  '23': {\n    name: 'RequestTimeoutError',\n    retryable: true\n  },\n  '24': {\n    name: 'MaxHeaderSizeExceededError',\n    retryable: false\n  },\n  '40': {\n    name: 'AuthErrorTokenExpired',\n    retryable: false\n  },\n  '41': {\n    name: 'AuthErrorTokenNotValidYet',\n    retryable: false\n  },\n  '42': {\n    name: 'AuthErrorTokenUsedBeforeIssuedAt',\n    retryable: false\n  },\n  '43': {\n    name: 'AuthErrorTokenSignatureInvalid',\n    retryable: false\n  },\n  '44': {\n    name: 'CustomCommandEndpointMissingError',\n    retryable: false\n  },\n  '45': {\n    name: 'CustomCommandEndpointCallError',\n    retryable: true\n  },\n  '46': {\n    name: 'ConnectionIDNotFoundError',\n    retryable: false\n  },\n  '60': {\n    name: 'CoolDownError',\n    retryable: true\n  },\n  '69': {\n    name: 'ErrWrongRegion',\n    retryable: false\n  },\n  '70': {\n    name: 'ErrQueryChannelPermissions',\n    retryable: false\n  },\n  '71': {\n    name: 'ErrTooManyConnections',\n    retryable: true\n  },\n  '99': {\n    name: 'AppSuspendedError',\n    retryable: false\n  }\n};\nfunction isAPIError(error) {\n  return error.code !== undefined;\n}\nfunction isErrorRetryable(error) {\n  if (!error.code) return false;\n  var err = APIErrorCodes[\"\".concat(error.code)];\n  if (!err) return false;\n  return err.retryable;\n}\nfunction isConnectionIDError(error) {\n  return error.code === 46; // ConnectionIDNotFoundError\n}\nfunction isWSFailure(err) {\n  if (typeof err.isWSFailure === 'boolean') {\n    return err.isWSFailure;\n  }\n  try {\n    return JSON.parse(err.message).isWSFailure;\n  } catch (_) {\n    return false;\n  }\n}\nfunction isErrorResponse(res) {\n  return !res.status || res.status < 200 || 300 <= res.status;\n}\nfunction ownKeys$8(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$8(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$8(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$8(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar ConnectionState;\n(function (ConnectionState) {\n  ConnectionState[\"Closed\"] = \"CLOSED\";\n  ConnectionState[\"Connected\"] = \"CONNECTED\";\n  ConnectionState[\"Connecting\"] = \"CONNECTING\";\n  ConnectionState[\"Disconnected\"] = \"DISCONNECTED\";\n  ConnectionState[\"Init\"] = \"INIT\";\n})(ConnectionState || (ConnectionState = {}));\nvar WSConnectionFallback = /*#__PURE__*/function () {\n  function WSConnectionFallback(_ref) {\n    var _this = this;\n    var client = _ref.client;\n    _classCallCheck(this, WSConnectionFallback);\n    _defineProperty(this, \"client\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"consecutiveFailures\", void 0);\n    _defineProperty(this, \"connectionID\", void 0);\n    _defineProperty(this, \"cancelToken\", void 0);\n    _defineProperty(this, \"_onlineStatusChanged\", function (event) {\n      _this._log(\"_onlineStatusChanged() - \".concat(event.type));\n      if (event.type === 'offline') {\n        var _this$cancelToken;\n        _this._setState(ConnectionState.Closed);\n        (_this$cancelToken = _this.cancelToken) === null || _this$cancelToken === void 0 ? void 0 : _this$cancelToken.cancel('disconnect() is called');\n        _this.cancelToken = undefined;\n        return;\n      }\n      if (event.type === 'online' && _this.state === ConnectionState.Closed) {\n        _this.connect(true);\n      }\n    });\n    _defineProperty(this, \"_req\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params, config, retry) {\n        var _this$cancelToken2, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this.cancelToken && !params.close) {\n                  _this.cancelToken = axios.CancelToken.source();\n                }\n                _context.prev = 1;\n                _context.next = 4;\n                return _this.client.doAxiosRequest('get', _this.client.baseURL.replace(':3030', ':8900') + '/longpoll',\n                // replace port if present for testing with local API\n                undefined, {\n                  config: _objectSpread$8(_objectSpread$8({}, config), {}, {\n                    cancelToken: (_this$cancelToken2 = _this.cancelToken) === null || _this$cancelToken2 === void 0 ? void 0 : _this$cancelToken2.token\n                  }),\n                  params: params\n                });\n              case 4:\n                res = _context.sent;\n                _this.consecutiveFailures = 0; // always reset in case of no error\n\n                return _context.abrupt(\"return\", res);\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](1);\n                _this.consecutiveFailures += 1;\n                if (!(retry && isErrorRetryable(_context.t0))) {\n                  _context.next = 17;\n                  break;\n                }\n                _this._log(\"_req() - Retryable error, retrying request\");\n                _context.next = 16;\n                return sleep(retryInterval(_this.consecutiveFailures));\n              case 16:\n                return _context.abrupt(\"return\", _this._req(params, config, retry));\n              case 17:\n                throw _context.t0;\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 9]]);\n      }));\n      return function (_x, _x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"_poll\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _data$events, data, i;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(_this.state === ConnectionState.Connected)) {\n                _context2.next = 25;\n                break;\n              }\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _this._req({}, {\n                timeout: 30000\n              }, true);\n            case 4:\n              data = _context2.sent;\n\n              // 30s => API responds in 20s if there is no event\n              if ((_data$events = data.events) !== null && _data$events !== void 0 && _data$events.length) {\n                for (i = 0; i < data.events.length; i++) {\n                  _this.client.dispatchEvent(data.events[i]);\n                }\n              }\n              _context2.next = 23;\n              break;\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              if (!axios.isCancel(_context2.t0)) {\n                _context2.next = 13;\n                break;\n              }\n              _this._log(\"_poll() - axios canceled request\");\n              return _context2.abrupt(\"return\");\n            case 13:\n              if (!isConnectionIDError(_context2.t0)) {\n                _context2.next = 18;\n                break;\n              }\n              _this._log(\"_poll() - ConnectionID error, connecting without ID...\");\n              _this._setState(ConnectionState.Disconnected);\n              _this.connect(true);\n              return _context2.abrupt(\"return\");\n            case 18:\n              if (!(isAPIError(_context2.t0) && !isErrorRetryable(_context2.t0))) {\n                _context2.next = 21;\n                break;\n              }\n              _this._setState(ConnectionState.Closed);\n              return _context2.abrupt(\"return\");\n            case 21:\n              _context2.next = 23;\n              return sleep(retryInterval(_this.consecutiveFailures));\n            case 23:\n              _context2.next = 0;\n              break;\n            case 25:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    })));\n    _defineProperty(this, \"connect\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var reconnect,\n        _yield$_this$_req,\n        event,\n        _args3 = arguments;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              reconnect = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;\n              if (!(_this.state === ConnectionState.Connecting)) {\n                _context3.next = 4;\n                break;\n              }\n              _this._log('connect() - connecting already in progress', {\n                reconnect: reconnect\n              }, 'warn');\n              return _context3.abrupt(\"return\");\n            case 4:\n              if (!(_this.state === ConnectionState.Connected)) {\n                _context3.next = 7;\n                break;\n              }\n              _this._log('connect() - already connected and polling', {\n                reconnect: reconnect\n              }, 'warn');\n              return _context3.abrupt(\"return\");\n            case 7:\n              _this._setState(ConnectionState.Connecting);\n              _this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n\n              _context3.prev = 9;\n              _context3.next = 12;\n              return _this._req({\n                json: _this.client._buildWSPayload()\n              }, {\n                timeout: 8000\n              },\n              // 8s\n              reconnect);\n            case 12:\n              _yield$_this$_req = _context3.sent;\n              event = _yield$_this$_req.event;\n              _this._setState(ConnectionState.Connected);\n              _this.connectionID = event.connection_id; // @ts-expect-error\n\n              _this.client.dispatchEvent(event);\n              _this._poll();\n              if (reconnect) {\n                _this.client.recoverState();\n              }\n              return _context3.abrupt(\"return\", event);\n            case 22:\n              _context3.prev = 22;\n              _context3.t0 = _context3[\"catch\"](9);\n              _this._setState(ConnectionState.Closed);\n              throw _context3.t0;\n            case 26:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[9, 22]]);\n    })));\n    _defineProperty(this, \"isHealthy\", function () {\n      return !!_this.connectionID && _this.state === ConnectionState.Connected;\n    });\n    _defineProperty(this, \"disconnect\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var _this$cancelToken3;\n      var timeout,\n        connection_id,\n        _args4 = arguments;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 2000;\n              removeConnectionEventListeners(_this._onlineStatusChanged);\n              _this._setState(ConnectionState.Disconnected);\n              (_this$cancelToken3 = _this.cancelToken) === null || _this$cancelToken3 === void 0 ? void 0 : _this$cancelToken3.cancel('disconnect() is called');\n              _this.cancelToken = undefined;\n              connection_id = _this.connectionID;\n              _this.connectionID = undefined;\n              _context4.prev = 7;\n              _context4.next = 10;\n              return _this._req({\n                close: true,\n                connection_id: connection_id\n              }, {\n                timeout: timeout\n              }, false);\n            case 10:\n              _this._log(\"disconnect() - Closed connectionID\");\n              _context4.next = 16;\n              break;\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](7);\n              _this._log(\"disconnect() - Failed\", {\n                err: _context4.t0\n              }, 'error');\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[7, 13]]);\n    })));\n    this.client = client;\n    this.state = ConnectionState.Init;\n    this.consecutiveFailures = 0;\n    addConnectionEventListeners(this._onlineStatusChanged);\n  }\n  _createClass(WSConnectionFallback, [{\n    key: \"_log\",\n    value: function _log(msg) {\n      var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'info';\n      this.client.logger(level, 'WSConnectionFallback:' + msg, _objectSpread$8({\n        tags: ['connection_fallback', 'connection']\n      }, extra));\n    }\n  }, {\n    key: \"_setState\",\n    value: function _setState(state) {\n      this._log(\"_setState() - \".concat(state)); // transition from connecting => connected\n\n      if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {\n        this.client.dispatchEvent({\n          type: 'connection.changed',\n          online: true\n        });\n      }\n      if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n        this.client.dispatchEvent({\n          type: 'connection.changed',\n          online: false\n        });\n      }\n      this.state = state;\n    }\n    /** @private */\n  }]);\n  return WSConnectionFallback;\n}();\nvar Segment = /*#__PURE__*/function () {\n  function Segment(client, type, id, data) {\n    _classCallCheck(this, Segment);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"client\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    this.client = client;\n    this.type = type;\n    this.id = id;\n    this.data = data;\n  }\n  _createClass(Segment, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this$data, _this$data2, _this$data3, _this$data4, _this$data5;\n        var body;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                body = {\n                  name: (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.name,\n                  filter: (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.filter,\n                  description: (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.description,\n                  all_sender_channels: (_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.all_sender_channels,\n                  all_users: (_this$data5 = this.data) === null || _this$data5 === void 0 ? void 0 : _this$data5.all_users\n                };\n                return _context.abrupt(\"return\", this.client.createSegment(this.type, this.id, body));\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function create() {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n  }, {\n    key: \"verifySegmentId\",\n    value: function verifySegmentId() {\n      if (!this.id) {\n        throw new Error('Segment id is missing. Either create the segment using segment.create() or set the id during instantiation - const segment = client.segment(id)');\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.verifySegmentId();\n                return _context2.abrupt(\"return\", this.client.getSegment(this.id));\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function get() {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.verifySegmentId();\n                return _context3.abrupt(\"return\", this.client.updateSegment(this.id, data));\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function update(_x) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n  }, {\n    key: \"addTargets\",\n    value: function () {\n      var _addTargets = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(targets) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.verifySegmentId();\n                return _context4.abrupt(\"return\", this.client.addSegmentTargets(this.id, targets));\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function addTargets(_x2) {\n        return _addTargets.apply(this, arguments);\n      }\n      return addTargets;\n    }()\n  }, {\n    key: \"removeTargets\",\n    value: function () {\n      var _removeTargets = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(targets) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.verifySegmentId();\n                return _context5.abrupt(\"return\", this.client.removeSegmentTargets(this.id, targets));\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function removeTargets(_x3) {\n        return _removeTargets.apply(this, arguments);\n      }\n      return removeTargets;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.verifySegmentId();\n                return _context6.abrupt(\"return\", this.client.deleteSegment(this.id));\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n  }, {\n    key: \"targetExists\",\n    value: function () {\n      var _targetExists = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(targetId) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.verifySegmentId();\n                return _context7.abrupt(\"return\", this.client.segmentTargetExists(this.id, targetId));\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function targetExists(_x4) {\n        return _targetExists.apply(this, arguments);\n      }\n      return targetExists;\n    }()\n  }, {\n    key: \"queryTargets\",\n    value: function () {\n      var _queryTargets = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var filter,\n          sort,\n          options,\n          _args8 = arguments;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                filter = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n                sort = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : [];\n                options = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};\n                this.verifySegmentId();\n                return _context8.abrupt(\"return\", this.client.querySegmentTargets(this.id, filter, sort, options));\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function queryTargets() {\n        return _queryTargets.apply(this, arguments);\n      }\n      return queryTargets;\n    }()\n  }]);\n  return Segment;\n}();\nfunction _createSuper$1(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Utility Types\n */\n\n/* Unknown Record */\n//alias to avoid breaking change\n\n/**\n * Response Types\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\n// TODO: Figure out a way to strongly type set and unset.\n// Thumb URL(thumb_url) is added considering video attachments as the backend will return the thumbnail in the response.\n\n/**\n * Option Types\n */\n// TODO: rename to UpdateChannelOptions in the next major update and use it in channel._update and/or channel.update\n\n/** @deprecated use MarkChannelsReadOptions instead */\n// TODO: rename to UpdateChannelTypeOptions in the next major update\n\n/**\n * Event Types\n */\n\n/**\n * Filter Types\n */\n// https://getstream.io/chat/docs/react/channel_member/#update-channel-members\n\n/**\n * Sort Types\n */\n\n/**\n * Base Types\n */\n\n/**\n * @deprecated Use ChannelMemberResponse instead\n */\n\n/*\n  DeleteUserOptions specifies a collection of one or more `user_ids` to be deleted.\n\n  `user`:\n    - soft: marks user as deleted and retains all user data\n    - pruning: marks user as deleted and nullifies user information\n    - hard: deletes user completely - this requires hard option for messages and conversation as well\n  `conversations`:\n    - soft: marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)\n    - hard: deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)\n  `messages`:\n    - soft: marks all user messages as deleted without removing any related message data\n    - pruning: marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags\n    - hard: deletes messages completely with all related information\n  `new_channel_owner_id`: any channels owned by the hard-deleted user will be transferred to this user ID\n */\n// TODO: add better typing\nvar ErrorFromResponse = /*#__PURE__*/function (_Error) {\n  _inherits(ErrorFromResponse, _Error);\n  var _super = _createSuper$1(ErrorFromResponse);\n  function ErrorFromResponse() {\n    var _this;\n    _classCallCheck(this, ErrorFromResponse);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"code\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"response\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"status\", void 0);\n    return _this;\n  }\n  return ErrorFromResponse;\n}(/*#__PURE__*/_wrapNativeSuper(Error));\nvar VotingVisibility;\n(function (VotingVisibility) {\n  VotingVisibility[\"anonymous\"] = \"anonymous\";\n  VotingVisibility[\"public\"] = \"public\";\n})(VotingVisibility || (VotingVisibility = {}));\nfunction ownKeys$7(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$7(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$7(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$7(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar isPatch = function isPatch(value) {\n  return typeof value === 'function';\n};\nvar StateStore = function StateStore(value) {\n  var _this = this;\n  _classCallCheck(this, StateStore);\n  this.value = value;\n  _defineProperty(this, \"handlerSet\", new Set());\n  _defineProperty(this, \"next\", function (newValueOrPatch) {\n    // newValue (or patch output) should never be mutated previous value\n    var newValue = isPatch(newValueOrPatch) ? newValueOrPatch(_this.value) : newValueOrPatch; // do not notify subscribers if the value hasn't changed\n\n    if (newValue === _this.value) return;\n    var oldValue = _this.value;\n    _this.value = newValue;\n    _this.handlerSet.forEach(function (handler) {\n      return handler(_this.value, oldValue);\n    });\n  });\n  _defineProperty(this, \"partialNext\", function (partial) {\n    return _this.next(function (current) {\n      return _objectSpread$7(_objectSpread$7({}, current), partial);\n    });\n  });\n  _defineProperty(this, \"getLatestValue\", function () {\n    return _this.value;\n  });\n  _defineProperty(this, \"subscribe\", function (handler) {\n    handler(_this.value, undefined);\n    _this.handlerSet.add(handler);\n    return function () {\n      _this.handlerSet.delete(handler);\n    };\n  });\n  _defineProperty(this, \"subscribeWithSelector\", function (selector, handler) {\n    // begin with undefined to reduce amount of selector calls\n    var selectedValues;\n    var wrappedHandler = function wrappedHandler(nextValue) {\n      var newlySelectedValues = selector(nextValue);\n      var hasUpdatedValues = !selectedValues;\n      if (Array.isArray(newlySelectedValues) && StateStore.logCount > 0) {\n        console.warn('[StreamChat]: The API of our StateStore has changed. Instead of returning an array in the selector, please return a named object of properties.');\n        StateStore.logCount--;\n      }\n      for (var key in selectedValues) {\n        // @ts-ignore TODO: remove array support (Readonly<unknown[]>)\n        if (selectedValues[key] === newlySelectedValues[key]) continue;\n        hasUpdatedValues = true;\n        break;\n      }\n      if (!hasUpdatedValues) return;\n      var oldSelectedValues = selectedValues;\n      selectedValues = newlySelectedValues;\n      handler(newlySelectedValues, oldSelectedValues);\n    };\n    return _this.subscribe(wrappedHandler);\n  });\n};\n_defineProperty(StateStore, \"logCount\", 5);\nvar _excluded$3 = [\"limit\", \"sort\"];\nfunction ownKeys$6(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$6(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$6(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$6(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar DEFAULT_PAGE_LIMIT = 50;\nvar DEFAULT_SORT = [{\n  created_at: -1\n}];\nvar MARK_AS_READ_THROTTLE_TIMEOUT = 1000; // TODO: remove this once we move to API v2\n\nvar THREAD_RESPONSE_RESERVED_KEYS = {\n  channel: true,\n  channel_cid: true,\n  created_at: true,\n  created_by_user_id: true,\n  parent_message_id: true,\n  title: true,\n  updated_at: true,\n  latest_replies: true,\n  active_participant_count: true,\n  deleted_at: true,\n  last_message_at: true,\n  participant_count: true,\n  reply_count: true,\n  read: true,\n  thread_participants: true,\n  created_by: true,\n  parent_message: true\n}; // TODO: remove this once we move to API v2\n\nvar constructCustomDataObject = function constructCustomDataObject(threadData) {\n  var custom = {};\n  for (var key in threadData) {\n    if (THREAD_RESPONSE_RESERVED_KEYS[key]) {\n      continue;\n    }\n    var customKey = key;\n    custom[customKey] = threadData[customKey];\n  }\n  return custom;\n};\nvar Thread = /*#__PURE__*/function () {\n  function Thread(_ref) {\n    var _this = this,\n      _threadData$channel$m,\n      _threadData$reply_cou;\n    var client = _ref.client,\n      _threadData = _ref.threadData;\n    _classCallCheck(this, Thread);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"client\", void 0);\n    _defineProperty(this, \"unsubscribeFunctions\", new Set());\n    _defineProperty(this, \"failedRepliesMap\", new Map());\n    _defineProperty(this, \"activate\", function () {\n      _this.state.partialNext({\n        active: true\n      });\n    });\n    _defineProperty(this, \"deactivate\", function () {\n      _this.state.partialNext({\n        active: false\n      });\n    });\n    _defineProperty(this, \"reload\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var thread;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!_this.state.getLatestValue().isLoading) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              _this.state.partialNext({\n                isLoading: true\n              });\n              _context.prev = 3;\n              _context.next = 6;\n              return _this.client.getThread(_this.id, {\n                watch: true\n              });\n            case 6:\n              thread = _context.sent;\n              _this.hydrateState(thread);\n            case 8:\n              _context.prev = 8;\n              _this.state.partialNext({\n                isLoading: false\n              });\n              return _context.finish(8);\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3,, 8, 11]]);\n    })));\n    _defineProperty(this, \"hydrateState\", function (thread) {\n      if (thread === _this) {\n        // skip if the instances are the same\n        return;\n      }\n      if (thread.id !== _this.id) {\n        throw new Error(\"Cannot hydrate thread state with using thread's state\");\n      }\n      var _thread$state$getLate = thread.state.getLatestValue(),\n        read = _thread$state$getLate.read,\n        replyCount = _thread$state$getLate.replyCount,\n        replies = _thread$state$getLate.replies,\n        parentMessage = _thread$state$getLate.parentMessage,\n        participants = _thread$state$getLate.participants,\n        createdAt = _thread$state$getLate.createdAt,\n        deletedAt = _thread$state$getLate.deletedAt,\n        updatedAt = _thread$state$getLate.updatedAt; // Preserve pending replies and append them to the updated list of replies\n\n      var pendingReplies = Array.from(_this.failedRepliesMap.values());\n      _this.state.partialNext({\n        read: read,\n        replyCount: replyCount,\n        replies: pendingReplies.length ? replies.concat(pendingReplies) : replies,\n        parentMessage: parentMessage,\n        participants: participants,\n        createdAt: createdAt,\n        deletedAt: deletedAt,\n        updatedAt: updatedAt,\n        isStateStale: false\n      });\n    });\n    _defineProperty(this, \"registerSubscriptions\", function () {\n      if (_this.unsubscribeFunctions.size) {\n        // Thread is already listening for events and changes\n        return;\n      }\n      _this.unsubscribeFunctions.add(_this.subscribeThreadUpdated());\n      _this.unsubscribeFunctions.add(_this.subscribeMarkActiveThreadRead());\n      _this.unsubscribeFunctions.add(_this.subscribeReloadActiveStaleThread());\n      _this.unsubscribeFunctions.add(_this.subscribeMarkThreadStale());\n      _this.unsubscribeFunctions.add(_this.subscribeNewReplies());\n      _this.unsubscribeFunctions.add(_this.subscribeRepliesRead());\n      _this.unsubscribeFunctions.add(_this.subscribeMessageDeleted());\n      _this.unsubscribeFunctions.add(_this.subscribeMessageUpdated());\n    });\n    _defineProperty(this, \"subscribeThreadUpdated\", function () {\n      return _this.client.on('thread.updated', function (event) {\n        if (!event.thread || event.thread.parent_message_id !== _this.id) {\n          return;\n        }\n        var threadData = event.thread;\n        _this.state.partialNext({\n          title: threadData.title,\n          updatedAt: new Date(threadData.updated_at),\n          deletedAt: threadData.deleted_at ? new Date(threadData.deleted_at) : null,\n          // TODO: use threadData.custom once we move to API v2\n          custom: constructCustomDataObject(threadData)\n        });\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeMarkActiveThreadRead\", function () {\n      return _this.state.subscribeWithSelector(function (nextValue) {\n        return {\n          active: nextValue.active,\n          unreadMessageCount: ownUnreadCountSelector(_this.client.userID)(nextValue)\n        };\n      }, function (_ref3) {\n        var active = _ref3.active,\n          unreadMessageCount = _ref3.unreadMessageCount;\n        if (!active || !unreadMessageCount) return;\n        _this.throttledMarkAsRead();\n      });\n    });\n    _defineProperty(this, \"subscribeReloadActiveStaleThread\", function () {\n      return _this.state.subscribeWithSelector(function (nextValue) {\n        return {\n          active: nextValue.active,\n          isStateStale: nextValue.isStateStale\n        };\n      }, function (_ref4) {\n        var active = _ref4.active,\n          isStateStale = _ref4.isStateStale;\n        if (active && isStateStale) {\n          _this.reload();\n        }\n      });\n    });\n    _defineProperty(this, \"subscribeMarkThreadStale\", function () {\n      return _this.client.on('user.watching.stop', function (event) {\n        var _event$user, _event$channel;\n        var _this$state$getLatest = _this.state.getLatestValue(),\n          channel = _this$state$getLatest.channel;\n        if (!_this.client.userID || _this.client.userID !== ((_event$user = event.user) === null || _event$user === void 0 ? void 0 : _event$user.id) || ((_event$channel = event.channel) === null || _event$channel === void 0 ? void 0 : _event$channel.cid) !== channel.cid) {\n          return;\n        }\n        _this.state.partialNext({\n          isStateStale: true\n        });\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeNewReplies\", function () {\n      return _this.client.on('message.new', function (event) {\n        var _event$message, _event$message$user;\n        if (!_this.client.userID || ((_event$message = event.message) === null || _event$message === void 0 ? void 0 : _event$message.parent_id) !== _this.id) {\n          return;\n        }\n        var isOwnMessage = ((_event$message$user = event.message.user) === null || _event$message$user === void 0 ? void 0 : _event$message$user.id) === _this.client.userID;\n        var _this$state$getLatest2 = _this.state.getLatestValue(),\n          active = _this$state$getLatest2.active,\n          read = _this$state$getLatest2.read;\n        _this.upsertReplyLocally({\n          message: event.message,\n          // Message from current user could have been added optimistically,\n          // so the actual timestamp might differ in the event\n          timestampChanged: isOwnMessage\n        });\n        if (active) {\n          _this.throttledMarkAsRead();\n        }\n        var nextRead = {};\n        for (var _i = 0, _Object$keys = Object.keys(read); _i < _Object$keys.length; _i++) {\n          var userId = _Object$keys[_i];\n          var userRead = read[userId];\n          if (userRead) {\n            var _event$user2;\n            var nextUserRead = userRead;\n            if (userId === ((_event$user2 = event.user) === null || _event$user2 === void 0 ? void 0 : _event$user2.id)) {\n              // The user who just sent a message to the thread has no unread messages\n              // in that thread\n              nextUserRead = _objectSpread$6(_objectSpread$6({}, nextUserRead), {}, {\n                lastReadAt: event.created_at ? new Date(event.created_at) : new Date(),\n                user: event.user,\n                unreadMessageCount: 0\n              });\n            } else if (active && userId === _this.client.userID) ;else {\n              // Increment unread count for all users except the author of the new message\n              nextUserRead = _objectSpread$6(_objectSpread$6({}, nextUserRead), {}, {\n                unreadMessageCount: userRead.unreadMessageCount + 1\n              });\n            }\n            nextRead[userId] = nextUserRead;\n          }\n        }\n        _this.state.partialNext({\n          read: nextRead\n        });\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeRepliesRead\", function () {\n      return _this.client.on('message.read', function (event) {\n        if (!event.user || !event.created_at || !event.thread) return;\n        if (event.thread.parent_message_id !== _this.id) return;\n        var userId = event.user.id;\n        var createdAt = event.created_at;\n        var user = event.user;\n        _this.state.next(function (current) {\n          return _objectSpread$6(_objectSpread$6({}, current), {}, {\n            read: _objectSpread$6(_objectSpread$6({}, current.read), {}, _defineProperty({}, userId, {\n              lastReadAt: new Date(createdAt),\n              user: user,\n              lastReadMessageId: event.last_read_message_id,\n              unreadMessageCount: 0\n            }))\n          });\n        });\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeMessageDeleted\", function () {\n      return _this.client.on('message.deleted', function (event) {\n        if (!event.message) return; // Deleted message is a reply of this thread\n\n        if (event.message.parent_id === _this.id) {\n          if (event.hard_delete) {\n            _this.deleteReplyLocally({\n              message: event.message\n            });\n          } else {\n            // Handle soft delete (updates deleted_at timestamp)\n            _this.upsertReplyLocally({\n              message: event.message\n            });\n          }\n        } // Deleted message is parent message of this thread\n\n        if (event.message.id === _this.id) {\n          _this.updateParentMessageLocally({\n            message: event.message\n          });\n        }\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeMessageUpdated\", function () {\n      var eventTypes = ['message.updated', 'reaction.new', 'reaction.deleted', 'reaction.updated'];\n      var unsubscribeFunctions = eventTypes.map(function (eventType) {\n        return _this.client.on(eventType, function (event) {\n          if (event.message) {\n            _this.updateParentMessageOrReplyLocally(event.message);\n          }\n        }).unsubscribe;\n      });\n      return function () {\n        return unsubscribeFunctions.forEach(function (unsubscribe) {\n          return unsubscribe();\n        });\n      };\n    });\n    _defineProperty(this, \"unregisterSubscriptions\", function () {\n      _this.unsubscribeFunctions.forEach(function (cleanupFunction) {\n        return cleanupFunction();\n      });\n      _this.unsubscribeFunctions.clear();\n    });\n    _defineProperty(this, \"deleteReplyLocally\", function (_ref5) {\n      var _replies$index;\n      var message = _ref5.message;\n      var _this$state$getLatest3 = _this.state.getLatestValue(),\n        replies = _this$state$getLatest3.replies;\n      var index = findIndexInSortedArray({\n        needle: formatMessage(message),\n        sortedArray: replies,\n        sortDirection: 'ascending',\n        selectValueToCompare: function selectValueToCompare(reply) {\n          return reply.created_at.getTime();\n        },\n        selectKey: function selectKey(reply) {\n          return reply.id;\n        }\n      });\n      if (((_replies$index = replies[index]) === null || _replies$index === void 0 ? void 0 : _replies$index.id) !== message.id) {\n        return;\n      }\n      var updatedReplies = _toConsumableArray(replies);\n      updatedReplies.splice(index, 1);\n      _this.state.partialNext({\n        replies: updatedReplies\n      });\n    });\n    _defineProperty(this, \"upsertReplyLocally\", function (_ref6) {\n      var message = _ref6.message,\n        _ref6$timestampChange = _ref6.timestampChanged,\n        timestampChanged = _ref6$timestampChange === void 0 ? false : _ref6$timestampChange;\n      if (message.parent_id !== _this.id) {\n        throw new Error('Reply does not belong to this thread');\n      }\n      var formattedMessage = formatMessage(message);\n      if (message.status === 'failed') {\n        // store failed reply so that it's not lost when reloading or hydrating\n        _this.failedRepliesMap.set(formattedMessage.id, formattedMessage);\n      } else if (_this.failedRepliesMap.has(message.id)) {\n        _this.failedRepliesMap.delete(message.id);\n      }\n      _this.state.next(function (current) {\n        return _objectSpread$6(_objectSpread$6({}, current), {}, {\n          replies: addToMessageList(current.replies, formattedMessage, timestampChanged)\n        });\n      });\n    });\n    _defineProperty(this, \"updateParentMessageLocally\", function (_ref7) {\n      var message = _ref7.message;\n      if (message.id !== _this.id) {\n        throw new Error('Message does not belong to this thread');\n      }\n      _this.state.next(function (current) {\n        var _message$reply_count;\n        var formattedMessage = formatMessage(message);\n        return _objectSpread$6(_objectSpread$6({}, current), {}, {\n          deletedAt: formattedMessage.deleted_at,\n          parentMessage: formattedMessage,\n          replyCount: (_message$reply_count = message.reply_count) !== null && _message$reply_count !== void 0 ? _message$reply_count : current.replyCount\n        });\n      });\n    });\n    _defineProperty(this, \"updateParentMessageOrReplyLocally\", function (message) {\n      if (message.parent_id === _this.id) {\n        _this.upsertReplyLocally({\n          message: message\n        });\n      }\n      if (!message.parent_id && message.id === _this.id) {\n        _this.updateParentMessageLocally({\n          message: message\n        });\n      }\n    });\n    _defineProperty(this, \"markAsRead\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _ref9,\n        _ref9$force,\n        force,\n        _args2 = arguments;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref9 = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, _ref9$force = _ref9.force, force = _ref9$force === void 0 ? false : _ref9$force;\n              if (!(_this.ownUnreadCount === 0 && !force)) {\n                _context2.next = 3;\n                break;\n              }\n              return _context2.abrupt(\"return\", null);\n            case 3:\n              _context2.next = 5;\n              return _this.channel.markRead({\n                thread_id: _this.id\n              });\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n    _defineProperty(this, \"throttledMarkAsRead\", throttle(function () {\n      return _this.markAsRead();\n    }, MARK_AS_READ_THROTTLE_TIMEOUT, {\n      trailing: true\n    }));\n    _defineProperty(this, \"queryReplies\", function () {\n      var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _ref10$limit = _ref10.limit,\n        limit = _ref10$limit === void 0 ? DEFAULT_PAGE_LIMIT : _ref10$limit,\n        _ref10$sort = _ref10.sort,\n        sort = _ref10$sort === void 0 ? DEFAULT_SORT : _ref10$sort,\n        otherOptions = _objectWithoutProperties(_ref10, _excluded$3);\n      return _this.channel.getReplies(_this.id, _objectSpread$6({\n        limit: limit\n      }, otherOptions), sort);\n    });\n    _defineProperty(this, \"loadNextPage\", function () {\n      var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref11$limit = _ref11.limit,\n        limit = _ref11$limit === void 0 ? DEFAULT_PAGE_LIMIT : _ref11$limit;\n      return _this.loadPage(limit);\n    });\n    _defineProperty(this, \"loadPrevPage\", function () {\n      var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref12$limit = _ref12.limit,\n        limit = _ref12$limit === void 0 ? DEFAULT_PAGE_LIMIT : _ref12$limit;\n      return _this.loadPage(-limit);\n    });\n    _defineProperty(this, \"loadPage\", /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(count) {\n        var _this$state$getLatest4, pagination, _ref14, _ref15, loadingKey, cursorKey, insertionMethodKey, queryOptions, limit, _replies$at$id, _replies$at, data, replies, maybeNextCursor;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$state$getLatest4 = _this.state.getLatestValue(), pagination = _this$state$getLatest4.pagination;\n                _ref14 = count > 0 ? ['isLoadingNext', 'nextCursor', 'push'] : ['isLoadingPrev', 'prevCursor', 'unshift'], _ref15 = _slicedToArray(_ref14, 3), loadingKey = _ref15[0], cursorKey = _ref15[1], insertionMethodKey = _ref15[2];\n                if (!(pagination[loadingKey] || pagination[cursorKey] === null)) {\n                  _context3.next = 4;\n                  break;\n                }\n                return _context3.abrupt(\"return\");\n              case 4:\n                queryOptions = _defineProperty({}, count > 0 ? 'id_gt' : 'id_lt', pagination[cursorKey]);\n                limit = Math.abs(count);\n                _this.state.partialNext({\n                  pagination: _objectSpread$6(_objectSpread$6({}, pagination), {}, _defineProperty({}, loadingKey, true))\n                });\n                _context3.prev = 7;\n                _context3.next = 10;\n                return _this.queryReplies(_objectSpread$6(_objectSpread$6({}, queryOptions), {}, {\n                  limit: limit\n                }));\n              case 10:\n                data = _context3.sent;\n                replies = data.messages.map(formatMessage);\n                maybeNextCursor = (_replies$at$id = (_replies$at = replies.at(count > 0 ? -1 : 0)) === null || _replies$at === void 0 ? void 0 : _replies$at.id) !== null && _replies$at$id !== void 0 ? _replies$at$id : null;\n                _this.state.next(function (current) {\n                  var _objectSpread4;\n                  var nextReplies = current.replies; // prevent re-creating array if there's nothing to add to the current one\n\n                  if (replies.length > 0) {\n                    var _nextReplies;\n                    nextReplies = _toConsumableArray(current.replies);\n                    (_nextReplies = nextReplies)[insertionMethodKey].apply(_nextReplies, _toConsumableArray(replies));\n                  }\n                  return _objectSpread$6(_objectSpread$6({}, current), {}, {\n                    replies: nextReplies,\n                    pagination: _objectSpread$6(_objectSpread$6({}, current.pagination), {}, (_objectSpread4 = {}, _defineProperty(_objectSpread4, cursorKey, data.messages.length < limit ? null : maybeNextCursor), _defineProperty(_objectSpread4, loadingKey, false), _objectSpread4))\n                  });\n                });\n                _context3.next = 20;\n                break;\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](7);\n                _this.client.logger('error', _context3.t0.message);\n                _this.state.next(function (current) {\n                  return _objectSpread$6(_objectSpread$6({}, current), {}, {\n                    pagination: _objectSpread$6(_objectSpread$6({}, current.pagination), {}, _defineProperty({}, loadingKey, false))\n                  });\n                });\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[7, 16]]);\n      }));\n      return function (_x) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    var _channel = client.channel(_threadData.channel.type, _threadData.channel.id, {\n      name: _threadData.channel.name\n    });\n    _channel._hydrateMembers({\n      members: (_threadData$channel$m = _threadData.channel.members) !== null && _threadData$channel$m !== void 0 ? _threadData$channel$m : [],\n      overrideCurrentState: false\n    }); // For when read object is undefined and due to that unreadMessageCount for\n    // the current user isn't being incremented on message.new\n\n    var placeholderReadResponse = client.userID ? [{\n      user: {\n        id: client.userID\n      },\n      unread_messages: 0,\n      last_read: new Date().toISOString()\n    }] : [];\n    this.state = new StateStore({\n      // local only\n      active: false,\n      isLoading: false,\n      isStateStale: false,\n      // 99.9% should never change\n      channel: _channel,\n      createdAt: new Date(_threadData.created_at),\n      // rest\n      deletedAt: _threadData.deleted_at ? new Date(_threadData.deleted_at) : null,\n      pagination: repliesPaginationFromInitialThread(_threadData),\n      parentMessage: formatMessage(_threadData.parent_message),\n      participants: _threadData.thread_participants,\n      read: formatReadState(!_threadData.read || _threadData.read.length === 0 ? placeholderReadResponse : _threadData.read),\n      replies: _threadData.latest_replies.map(formatMessage),\n      replyCount: (_threadData$reply_cou = _threadData.reply_count) !== null && _threadData$reply_cou !== void 0 ? _threadData$reply_cou : 0,\n      updatedAt: _threadData.updated_at ? new Date(_threadData.updated_at) : null,\n      title: _threadData.title,\n      custom: constructCustomDataObject(_threadData)\n    });\n    this.id = _threadData.parent_message_id;\n    this.client = client;\n  }\n  _createClass(Thread, [{\n    key: \"channel\",\n    get: function get() {\n      return this.state.getLatestValue().channel;\n    }\n  }, {\n    key: \"hasStaleState\",\n    get: function get() {\n      return this.state.getLatestValue().isStateStale;\n    }\n  }, {\n    key: \"ownUnreadCount\",\n    get: function get() {\n      return ownUnreadCountSelector(this.client.userID)(this.state.getLatestValue());\n    }\n  }]);\n  return Thread;\n}();\nvar formatReadState = function formatReadState(read) {\n  return read.reduce(function (state, userRead) {\n    var _userRead$unread_mess;\n    state[userRead.user.id] = {\n      user: userRead.user,\n      lastReadMessageId: userRead.last_read_message_id,\n      unreadMessageCount: (_userRead$unread_mess = userRead.unread_messages) !== null && _userRead$unread_mess !== void 0 ? _userRead$unread_mess : 0,\n      lastReadAt: new Date(userRead.last_read)\n    };\n    return state;\n  }, {});\n};\nvar repliesPaginationFromInitialThread = function repliesPaginationFromInitialThread(thread) {\n  var _thread$latest_replie, _thread$latest_replie2;\n  var latestRepliesContainsAllReplies = thread.latest_replies.length === thread.reply_count;\n  return {\n    nextCursor: null,\n    prevCursor: latestRepliesContainsAllReplies ? null : (_thread$latest_replie = (_thread$latest_replie2 = thread.latest_replies.at(0)) === null || _thread$latest_replie2 === void 0 ? void 0 : _thread$latest_replie2.id) !== null && _thread$latest_replie !== void 0 ? _thread$latest_replie : null,\n    isLoadingNext: false,\n    isLoadingPrev: false\n  };\n};\nvar ownUnreadCountSelector = function ownUnreadCountSelector(currentUserId) {\n  return function (state) {\n    var _state$read$currentUs;\n    return currentUserId && ((_state$read$currentUs = state.read[currentUserId]) === null || _state$read$currentUs === void 0 ? void 0 : _state$read$currentUs.unreadMessageCount) || 0;\n  };\n};\nfunction ownKeys$5(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$5(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$5(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$5(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar MODERATION_ENTITY_TYPES = {\n  user: 'stream:user',\n  message: 'stream:chat:v1:message'\n}; // Moderation class provides all the endpoints related to moderation v2.\n\nvar Moderation = /*#__PURE__*/function () {\n  function Moderation(client) {\n    _classCallCheck(this, Moderation);\n    _defineProperty(this, \"client\", void 0);\n    this.client = client;\n  }\n  /**\n   * Flag a user\n   *\n   * @param {string} flaggedUserID User ID to be flagged\n   * @param {string} reason Reason for flagging the user\n   * @param {Object} options Additional options for flagging the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target user\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n\n  _createClass(Moderation, [{\n    key: \"flagUser\",\n    value: function () {\n      var _flagUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(flaggedUserID, reason) {\n        var options,\n          _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                return _context.abrupt(\"return\", this.flag(MODERATION_ENTITY_TYPES.user, flaggedUserID, '', reason, options));\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function flagUser(_x, _x2) {\n        return _flagUser.apply(this, arguments);\n      }\n      return flagUser;\n    }()\n    /**\n     * Flag a message\n     *\n     * @param {string} messageID Message ID to be flagged\n     * @param {string} reason Reason for flagging the message\n     * @param {Object} options Additional options for flagging the message\n     * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target message\n     * @param {Object} options.custom Additional data to be stored with the flag\n     * @returns\n     */\n  }, {\n    key: \"flagMessage\",\n    value: function () {\n      var _flagMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(messageID, reason) {\n        var options,\n          _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n                return _context2.abrupt(\"return\", this.flag(MODERATION_ENTITY_TYPES.message, messageID, '', reason, options));\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function flagMessage(_x3, _x4) {\n        return _flagMessage.apply(this, arguments);\n      }\n      return flagMessage;\n    }()\n    /**\n     * Flag a user\n     *\n     * @param {string} entityType Entity type to be flagged\n     * @param {string} entityId Entity ID to be flagged\n     * @param {string} entityCreatorID User ID of the entity creator\n     * @param {string} reason Reason for flagging the entity\n     * @param {Object} options Additional options for flagging the entity\n     * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target entity\n     * @param {Object} options.moderation_payload Content to be flagged e.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n     * @param {Object} options.custom Additional data to be stored with the flag\n     * @returns\n     */\n  }, {\n    key: \"flag\",\n    value: function () {\n      var _flag = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(entityType, entityId, entityCreatorID, reason) {\n        var options,\n          _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : {};\n                _context3.next = 3;\n                return this.client.post(this.client.baseURL + '/api/v2/moderation/flag', _objectSpread$5({\n                  entity_type: entityType,\n                  entity_id: entityId,\n                  entity_creator_id: entityCreatorID,\n                  reason: reason\n                }, options));\n              case 3:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function flag(_x5, _x6, _x7, _x8) {\n        return _flag.apply(this, arguments);\n      }\n      return flag;\n    }()\n    /**\n     * Mute a user\n     * @param {string} targetID  User ID to be muted\n     * @param {Object} options Additional options for muting the user\n     * @param {string} options.user_id (For server side usage) User ID of the user who is muting the target user\n     * @param {number} options.timeout Timeout for the mute in minutes\n     * @returns\n     */\n  }, {\n    key: \"muteUser\",\n    value: function () {\n      var _muteUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(targetID) {\n        var options,\n          _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                _context4.next = 3;\n                return this.client.post(this.client.baseURL + '/api/v2/moderation/mute', _objectSpread$5({\n                  target_ids: [targetID]\n                }, options));\n              case 3:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function muteUser(_x9) {\n        return _muteUser.apply(this, arguments);\n      }\n      return muteUser;\n    }()\n    /**\n     * Unmute a user\n     * @param {string} targetID  User ID to be unmuted\n     * @param {Object} options Additional options for unmuting the user\n     * @param {string} options.user_id (For server side usage) User ID of the user who is unmuting the target user\n     * @returns\n     */\n  }, {\n    key: \"unmuteUser\",\n    value: function () {\n      var _unmuteUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(targetID, options) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.client.post(this.client.baseURL + '/api/v2/moderation/unmute', _objectSpread$5({\n                  target_ids: [targetID]\n                }, options));\n              case 2:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function unmuteUser(_x10, _x11) {\n        return _unmuteUser.apply(this, arguments);\n      }\n      return unmuteUser;\n    }()\n    /**\n     * Get moderation report for a user\n     * @param {string} userID User ID for which moderation report is to be fetched\n     * @param {Object} options Additional options for fetching the moderation report\n     * @param {boolean} options.create_user_if_not_exists Create user if not exists\n     * @param {boolean} options.include_user_blocks Include user blocks\n     * @param {boolean} options.include_user_mutes Include user mutes\n     */\n  }, {\n    key: \"getUserModerationReport\",\n    value: function () {\n      var _getUserModerationReport = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(userID) {\n        var options,\n          _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n                _context6.next = 3;\n                return this.client.get(this.client.baseURL + \"/api/v2/moderation/user_report\", _objectSpread$5({\n                  user_id: userID\n                }, options));\n              case 3:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function getUserModerationReport(_x12) {\n        return _getUserModerationReport.apply(this, arguments);\n      }\n      return getUserModerationReport;\n    }()\n    /**\n     * Query review queue\n     * @param {Object} filterConditions Filter conditions for querying review queue\n     * @param {Object} sort Sort conditions for querying review queue\n     * @param {Object} options Pagination options for querying review queue\n     */\n  }, {\n    key: \"queryReviewQueue\",\n    value: function () {\n      var _queryReviewQueue = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var filterConditions,\n          sort,\n          options,\n          _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                filterConditions = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n                sort = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : [];\n                options = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : {};\n                _context7.next = 5;\n                return this.client.post(this.client.baseURL + '/api/v2/moderation/review_queue', _objectSpread$5({\n                  filter: filterConditions,\n                  sort: normalizeQuerySort(sort)\n                }, options));\n              case 5:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function queryReviewQueue() {\n        return _queryReviewQueue.apply(this, arguments);\n      }\n      return queryReviewQueue;\n    }()\n    /**\n     * Upsert moderation config\n     * @param {Object} config Moderation config to be upserted\n     */\n  }, {\n    key: \"upsertConfig\",\n    value: function () {\n      var _upsertConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(config) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.client.post(this.client.baseURL + '/api/v2/moderation/config', config);\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function upsertConfig(_x13) {\n        return _upsertConfig.apply(this, arguments);\n      }\n      return upsertConfig;\n    }()\n    /**\n     * Get moderation config\n     * @param {string} key Key for which moderation config is to be fetched\n     */\n  }, {\n    key: \"getConfig\",\n    value: function () {\n      var _getConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(key, data) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.client.get(this.client.baseURL + '/api/v2/moderation/config/' + key, data);\n              case 2:\n                return _context9.abrupt(\"return\", _context9.sent);\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function getConfig(_x14, _x15) {\n        return _getConfig.apply(this, arguments);\n      }\n      return getConfig;\n    }()\n  }, {\n    key: \"deleteConfig\",\n    value: function () {\n      var _deleteConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(key, data) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.client.delete(this.client.baseURL + '/api/v2/moderation/config/' + key, data);\n              case 2:\n                return _context10.abrupt(\"return\", _context10.sent);\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function deleteConfig(_x16, _x17) {\n        return _deleteConfig.apply(this, arguments);\n      }\n      return deleteConfig;\n    }()\n    /**\n     * Query moderation configs\n     * @param {Object} filterConditions Filter conditions for querying moderation configs\n     * @param {Object} sort Sort conditions for querying moderation configs\n     * @param {Object} options Additional options for querying moderation configs\n     */\n  }, {\n    key: \"queryConfigs\",\n    value: function () {\n      var _queryConfigs = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(filterConditions, sort) {\n        var options,\n          _args11 = arguments;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                options = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : {};\n                _context11.next = 3;\n                return this.client.post(this.client.baseURL + '/api/v2/moderation/configs', _objectSpread$5({\n                  filter: filterConditions,\n                  sort: sort\n                }, options));\n              case 3:\n                return _context11.abrupt(\"return\", _context11.sent);\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function queryConfigs(_x18, _x19) {\n        return _queryConfigs.apply(this, arguments);\n      }\n      return queryConfigs;\n    }()\n  }, {\n    key: \"submitAction\",\n    value: function () {\n      var _submitAction = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(actionType, itemID) {\n        var options,\n          _args12 = arguments;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                options = _args12.length > 2 && _args12[2] !== undefined ? _args12[2] : {};\n                _context12.next = 3;\n                return this.client.post(this.client.baseURL + '/api/v2/moderation/submit_action', _objectSpread$5({\n                  action_type: actionType,\n                  item_id: itemID\n                }, options));\n              case 3:\n                return _context12.abrupt(\"return\", _context12.sent);\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function submitAction(_x20, _x21) {\n        return _submitAction.apply(this, arguments);\n      }\n      return submitAction;\n    }()\n    /**\n     *\n     * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string\n     * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes\n     * @param {string} entityCreatorID string ID of the entity creator\n     * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n     * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation\n     * @param {Array} moderationPayload.images array Array of images to be checked for moderation\n     * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation\n     * @param configKey\n     * @param options\n     * @returns\n     */\n  }, {\n    key: \"check\",\n    value: function () {\n      var _check = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(entityType, entityID, entityCreatorID, moderationPayload, configKey, options) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.client.post(this.client.baseURL + \"/api/v2/moderation/check\", {\n                  entity_type: entityType,\n                  entity_id: entityID,\n                  entity_creator_id: entityCreatorID,\n                  moderation_payload: moderationPayload,\n                  config_key: configKey,\n                  options: options\n                });\n              case 2:\n                return _context13.abrupt(\"return\", _context13.sent);\n              case 3:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function check(_x22, _x23, _x24, _x25, _x26, _x27) {\n        return _check.apply(this, arguments);\n      }\n      return check;\n    }()\n    /**\n     *\n     * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string\n     * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes\n     * @param {string} entityCreatorID string ID of the entity creator\n     * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n     * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation\n     * @param {Array} moderationPayload.images array Array of images to be checked for moderation\n     * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation\n     * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the entity\n     * @returns\n     */\n  }, {\n    key: \"addCustomFlags\",\n    value: function () {\n      var _addCustomFlags = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(entityType, entityID, entityCreatorID, moderationPayload, flags) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.client.post(this.client.baseURL + \"/api/v2/moderation/custom_check\", {\n                  entity_type: entityType,\n                  entity_id: entityID,\n                  entity_creator_id: entityCreatorID,\n                  moderation_payload: moderationPayload,\n                  flags: flags\n                });\n              case 2:\n                return _context14.abrupt(\"return\", _context14.sent);\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function addCustomFlags(_x28, _x29, _x30, _x31, _x32) {\n        return _addCustomFlags.apply(this, arguments);\n      }\n      return addCustomFlags;\n    }()\n    /**\n     * Add custom flags to a message\n     * @param {string} messageID Message ID to be flagged\n     * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the message\n     * @returns\n     */\n  }, {\n    key: \"addCustomMessageFlags\",\n    value: function () {\n      var _addCustomMessageFlags = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(messageID, flags) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.addCustomFlags(MODERATION_ENTITY_TYPES.message, messageID, '', {}, flags);\n              case 2:\n                return _context15.abrupt(\"return\", _context15.sent);\n              case 3:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function addCustomMessageFlags(_x33, _x34) {\n        return _addCustomMessageFlags.apply(this, arguments);\n      }\n      return addCustomMessageFlags;\n    }()\n  }]);\n  return Moderation;\n}();\nfunction _createForOfIteratorHelper$2(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$2(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$2(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);\n}\nfunction _arrayLikeToArray$2(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys$4(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$4(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$4(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$4(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION = 1000;\nvar MAX_QUERY_THREADS_LIMIT = 25;\nvar THREAD_MANAGER_INITIAL_STATE = {\n  active: false,\n  isThreadOrderStale: false,\n  threads: [],\n  unreadThreadCount: 0,\n  unseenThreadIds: [],\n  lastConnectionDropAt: null,\n  pagination: {\n    isLoading: false,\n    isLoadingNext: false,\n    nextCursor: null\n  },\n  ready: false\n};\nvar ThreadManager = /*#__PURE__*/function () {\n  function ThreadManager(_ref) {\n    var _this = this;\n    var client = _ref.client;\n    _classCallCheck(this, ThreadManager);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"client\", void 0);\n    _defineProperty(this, \"unsubscribeFunctions\", new Set());\n    _defineProperty(this, \"threadsByIdGetterCache\", void 0);\n    _defineProperty(this, \"resetState\", function () {\n      _this.state.next(THREAD_MANAGER_INITIAL_STATE);\n    });\n    _defineProperty(this, \"activate\", function () {\n      _this.state.partialNext({\n        active: true\n      });\n    });\n    _defineProperty(this, \"deactivate\", function () {\n      _this.state.partialNext({\n        active: false\n      });\n    });\n    _defineProperty(this, \"registerSubscriptions\", function () {\n      if (_this.unsubscribeFunctions.size) return;\n      _this.unsubscribeFunctions.add(_this.subscribeUnreadThreadsCountChange());\n      _this.unsubscribeFunctions.add(_this.subscribeManageThreadSubscriptions());\n      _this.unsubscribeFunctions.add(_this.subscribeReloadOnActivation());\n      _this.unsubscribeFunctions.add(_this.subscribeNewReplies());\n      _this.unsubscribeFunctions.add(_this.subscribeRecoverAfterConnectionDrop());\n      _this.unsubscribeFunctions.add(_this.subscribeChannelDeleted());\n    });\n    _defineProperty(this, \"subscribeUnreadThreadsCountChange\", function () {\n      var _ref3;\n\n      // initiate\n      var _ref2 = (_ref3 = _this.client.user) !== null && _ref3 !== void 0 ? _ref3 : {},\n        _ref2$unread_threads = _ref2.unread_threads,\n        unreadThreadCount = _ref2$unread_threads === void 0 ? 0 : _ref2$unread_threads;\n      _this.state.partialNext({\n        unreadThreadCount: unreadThreadCount\n      });\n      var unsubscribeFunctions = ['health.check', 'notification.mark_read', 'notification.thread_message_new', 'notification.channel_deleted'].map(function (eventType) {\n        return _this.client.on(eventType, function (event) {\n          var _event$me;\n          var _ref4 = (_event$me = event.me) !== null && _event$me !== void 0 ? _event$me : event,\n            unreadThreadCount = _ref4.unread_threads;\n          if (typeof unreadThreadCount === 'number') {\n            _this.state.partialNext({\n              unreadThreadCount: unreadThreadCount\n            });\n          }\n        }).unsubscribe;\n      });\n      return function () {\n        return unsubscribeFunctions.forEach(function (unsubscribe) {\n          return unsubscribe();\n        });\n      };\n    });\n    _defineProperty(this, \"subscribeChannelDeleted\", function () {\n      return _this.client.on('notification.channel_deleted', function (event) {\n        var cid = event.cid;\n        var _this$state$getLatest = _this.state.getLatestValue(),\n          threads = _this$state$getLatest.threads;\n        var newThreads = threads.filter(function (thread) {\n          return thread.channel.cid !== cid;\n        });\n        _this.state.partialNext({\n          threads: newThreads\n        });\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeManageThreadSubscriptions\", function () {\n      return _this.state.subscribeWithSelector(function (nextValue) {\n        return {\n          threads: nextValue.threads\n        };\n      }, function (_ref5, prev) {\n        var nextThreads = _ref5.threads;\n        var _ref6 = prev !== null && prev !== void 0 ? prev : {},\n          _ref6$threads = _ref6.threads,\n          prevThreads = _ref6$threads === void 0 ? [] : _ref6$threads; // Thread instance was removed if there's no thread with the given id at all,\n        // or it was replaced with a new instance\n\n        var removedThreads = prevThreads.filter(function (thread) {\n          return thread !== _this.threadsById[thread.id];\n        });\n        nextThreads.forEach(function (thread) {\n          return thread.registerSubscriptions();\n        });\n        removedThreads.forEach(function (thread) {\n          return thread.unregisterSubscriptions();\n        });\n      });\n    });\n    _defineProperty(this, \"subscribeReloadOnActivation\", function () {\n      return _this.state.subscribeWithSelector(function (nextValue) {\n        return {\n          active: nextValue.active\n        };\n      }, function (_ref7) {\n        var active = _ref7.active;\n        if (active) _this.reload();\n      });\n    });\n    _defineProperty(this, \"subscribeNewReplies\", function () {\n      return _this.client.on('notification.thread_message_new', function (event) {\n        var _event$message;\n        var parentId = (_event$message = event.message) === null || _event$message === void 0 ? void 0 : _event$message.parent_id;\n        if (!parentId) return;\n        var _this$state$getLatest2 = _this.state.getLatestValue(),\n          unseenThreadIds = _this$state$getLatest2.unseenThreadIds,\n          ready = _this$state$getLatest2.ready;\n        if (!ready) return;\n        if (_this.threadsById[parentId]) {\n          _this.state.partialNext({\n            isThreadOrderStale: true\n          });\n        } else if (!unseenThreadIds.includes(parentId)) {\n          _this.state.partialNext({\n            unseenThreadIds: unseenThreadIds.concat(parentId)\n          });\n        }\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeRecoverAfterConnectionDrop\", function () {\n      var unsubscribeConnectionDropped = _this.client.on('connection.changed', function (event) {\n        if (event.online === false) {\n          _this.state.next(function (current) {\n            return current.lastConnectionDropAt ? current : _objectSpread$4(_objectSpread$4({}, current), {}, {\n              lastConnectionDropAt: new Date()\n            });\n          });\n        }\n      }).unsubscribe;\n      var throttledHandleConnectionRecovered = throttle(function () {\n        var _this$state$getLatest3 = _this.state.getLatestValue(),\n          lastConnectionDropAt = _this$state$getLatest3.lastConnectionDropAt;\n        if (!lastConnectionDropAt) return;\n        _this.reload({\n          force: true\n        });\n      }, DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION, {\n        trailing: true\n      });\n      var unsubscribeConnectionRecovered = _this.client.on('connection.recovered', throttledHandleConnectionRecovered).unsubscribe;\n      return function () {\n        unsubscribeConnectionDropped();\n        unsubscribeConnectionRecovered();\n      };\n    });\n    _defineProperty(this, \"unregisterSubscriptions\", function () {\n      _this.state.getLatestValue().threads.forEach(function (thread) {\n        return thread.unregisterSubscriptions();\n      });\n      _this.unsubscribeFunctions.forEach(function (cleanupFunction) {\n        return cleanupFunction();\n      });\n      _this.unsubscribeFunctions.clear();\n    });\n    _defineProperty(this, \"reload\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _ref9,\n        _ref9$force,\n        force,\n        _this$state$getLatest4,\n        threads,\n        unseenThreadIds,\n        isThreadOrderStale,\n        pagination,\n        ready,\n        limit,\n        response,\n        currentThreads,\n        nextThreads,\n        _iterator,\n        _step,\n        incomingThread,\n        existingThread,\n        _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref9 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref9$force = _ref9.force, force = _ref9$force === void 0 ? false : _ref9$force;\n              _this$state$getLatest4 = _this.state.getLatestValue(), threads = _this$state$getLatest4.threads, unseenThreadIds = _this$state$getLatest4.unseenThreadIds, isThreadOrderStale = _this$state$getLatest4.isThreadOrderStale, pagination = _this$state$getLatest4.pagination, ready = _this$state$getLatest4.ready;\n              if (!pagination.isLoading) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 4:\n              if (!(!force && ready && !unseenThreadIds.length && !isThreadOrderStale)) {\n                _context.next = 6;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 6:\n              limit = threads.length + unseenThreadIds.length;\n              _context.prev = 7;\n              _this.state.next(function (current) {\n                return _objectSpread$4(_objectSpread$4({}, current), {}, {\n                  pagination: _objectSpread$4(_objectSpread$4({}, current.pagination), {}, {\n                    isLoading: true\n                  })\n                });\n              });\n              _context.next = 11;\n              return _this.queryThreads({\n                limit: Math.min(limit, MAX_QUERY_THREADS_LIMIT) || MAX_QUERY_THREADS_LIMIT\n              });\n            case 11:\n              response = _context.sent;\n              currentThreads = _this.threadsById;\n              nextThreads = [];\n              _iterator = _createForOfIteratorHelper$2(response.threads);\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  incomingThread = _step.value;\n                  existingThread = currentThreads[incomingThread.id];\n                  if (existingThread) {\n                    // Reuse thread instances if possible\n                    nextThreads.push(existingThread);\n                    if (existingThread.hasStaleState) {\n                      existingThread.hydrateState(incomingThread);\n                    }\n                  } else {\n                    nextThreads.push(incomingThread);\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              _this.state.next(function (current) {\n                var _response$next;\n                return _objectSpread$4(_objectSpread$4({}, current), {}, {\n                  threads: nextThreads,\n                  unseenThreadIds: [],\n                  isThreadOrderStale: false,\n                  pagination: _objectSpread$4(_objectSpread$4({}, current.pagination), {}, {\n                    isLoading: false,\n                    nextCursor: (_response$next = response.next) !== null && _response$next !== void 0 ? _response$next : null\n                  }),\n                  ready: true\n                });\n              });\n              _context.next = 23;\n              break;\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](7);\n              _this.client.logger('error', _context.t0.message);\n              _this.state.next(function (current) {\n                return _objectSpread$4(_objectSpread$4({}, current), {}, {\n                  pagination: _objectSpread$4(_objectSpread$4({}, current.pagination), {}, {\n                    isLoading: false\n                  })\n                });\n              });\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 19]]);\n    })));\n    _defineProperty(this, \"queryThreads\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _this.client.queryThreads(_objectSpread$4({\n        limit: 25,\n        participant_limit: 10,\n        reply_limit: 10,\n        watch: true\n      }, options));\n    });\n    _defineProperty(this, \"loadNextPage\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var options,\n        _this$state$getLatest5,\n        pagination,\n        response,\n        _args2 = arguments;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n              _this$state$getLatest5 = _this.state.getLatestValue(), pagination = _this$state$getLatest5.pagination;\n              if (!(pagination.isLoadingNext || !pagination.nextCursor)) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 4:\n              _context2.prev = 4;\n              _this.state.partialNext({\n                pagination: _objectSpread$4(_objectSpread$4({}, pagination), {}, {\n                  isLoadingNext: true\n                })\n              });\n              _context2.next = 8;\n              return _this.queryThreads(_objectSpread$4(_objectSpread$4({}, options), {}, {\n                next: pagination.nextCursor\n              }));\n            case 8:\n              response = _context2.sent;\n              _this.state.next(function (current) {\n                var _response$next2;\n                return _objectSpread$4(_objectSpread$4({}, current), {}, {\n                  threads: response.threads.length ? current.threads.concat(response.threads) : current.threads,\n                  pagination: _objectSpread$4(_objectSpread$4({}, current.pagination), {}, {\n                    nextCursor: (_response$next2 = response.next) !== null && _response$next2 !== void 0 ? _response$next2 : null,\n                    isLoadingNext: false\n                  })\n                });\n              });\n              _context2.next = 16;\n              break;\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](4);\n              _this.client.logger('error', _context2.t0.message);\n              _this.state.next(function (current) {\n                return _objectSpread$4(_objectSpread$4({}, current), {}, {\n                  pagination: _objectSpread$4(_objectSpread$4({}, current.pagination), {}, {\n                    isLoadingNext: false\n                  })\n                });\n              });\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 12]]);\n    })));\n    this.client = client;\n    this.state = new StateStore(THREAD_MANAGER_INITIAL_STATE);\n    this.threadsByIdGetterCache = {\n      threads: [],\n      threadsById: {}\n    };\n  }\n  _createClass(ThreadManager, [{\n    key: \"threadsById\",\n    get: function get() {\n      var _this$state$getLatest6 = this.state.getLatestValue(),\n        threads = _this$state$getLatest6.threads;\n      if (threads === this.threadsByIdGetterCache.threads) {\n        return this.threadsByIdGetterCache.threadsById;\n      }\n      var threadsById = threads.reduce(function (newThreadsById, thread) {\n        newThreadsById[thread.id] = thread;\n        return newThreadsById;\n      }, {});\n      this.threadsByIdGetterCache.threads = threads;\n      this.threadsByIdGetterCache.threadsById = threadsById;\n      return threadsById;\n    }\n  }]);\n  return ThreadManager;\n}();\nvar _excluded$2 = [\"own_votes\", \"id\"],\n  _excluded2$1 = [\"id\"];\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$3(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$3(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar isPollUpdatedEvent = function isPollUpdatedEvent(e) {\n  return e.type === 'poll.updated';\n};\nvar isPollClosedEventEvent = function isPollClosedEventEvent(e) {\n  return e.type === 'poll.closed';\n};\nvar isPollVoteCastedEvent = function isPollVoteCastedEvent(e) {\n  return e.type === 'poll.vote_casted';\n};\nvar isPollVoteChangedEvent = function isPollVoteChangedEvent(e) {\n  return e.type === 'poll.vote_changed';\n};\nvar isPollVoteRemovedEvent = function isPollVoteRemovedEvent(e) {\n  return e.type === 'poll.vote_removed';\n};\nvar isVoteAnswer = function isVoteAnswer(vote) {\n  return !!(vote !== null && vote !== void 0 && vote.answer_text);\n};\nvar Poll = /*#__PURE__*/function () {\n  function Poll(_ref) {\n    var _this = this;\n    var client = _ref.client,\n      _poll = _ref.poll;\n    _classCallCheck(this, Poll);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"client\", void 0);\n    _defineProperty(this, \"unsubscribeFunctions\", new Set());\n    _defineProperty(this, \"getInitialStateFromPollResponse\", function (poll) {\n      var _own_votes$reduce;\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var own_votes = poll.own_votes;\n      poll.id;\n      var pollResponseForState = _objectWithoutProperties(poll, _excluded$2);\n      var _ref2 = (_own_votes$reduce = own_votes === null || own_votes === void 0 ? void 0 : own_votes.reduce(function (acc, voteOrAnswer) {\n          if (isVoteAnswer(voteOrAnswer)) {\n            acc.ownAnswer = voteOrAnswer;\n          } else {\n            acc.ownVotes.push(voteOrAnswer);\n          }\n          return acc;\n        }, {\n          ownVotes: []\n        })) !== null && _own_votes$reduce !== void 0 ? _own_votes$reduce : {\n          ownVotes: []\n        },\n        ownAnswer = _ref2.ownAnswer,\n        ownVotes = _ref2.ownVotes;\n      return _objectSpread$3(_objectSpread$3({}, pollResponseForState), {}, {\n        lastActivityAt: new Date(),\n        maxVotedOptionIds: getMaxVotedOptionIds(pollResponseForState.vote_counts_by_option),\n        ownAnswer: ownAnswer,\n        ownVotesByOptionId: getOwnVotesByOptionId(ownVotes)\n      });\n    });\n    _defineProperty(this, \"reinitializeState\", function (poll) {\n      _this.state.partialNext(_this.getInitialStateFromPollResponse(poll));\n    });\n    _defineProperty(this, \"handlePollUpdated\", function (event) {\n      var _event$poll;\n      if ((_event$poll = event.poll) !== null && _event$poll !== void 0 && _event$poll.id && event.poll.id !== _this.id) return;\n      if (!isPollUpdatedEvent(event)) return; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n      var _extractPollData = extractPollData(event.poll),\n        pollData = _objectWithoutProperties(_extractPollData, _excluded2$1); // @ts-ignore\n\n      _this.state.partialNext(_objectSpread$3(_objectSpread$3({}, pollData), {}, {\n        lastActivityAt: new Date(event.created_at)\n      }));\n    });\n    _defineProperty(this, \"handlePollClosed\", function (event) {\n      var _event$poll2;\n      if ((_event$poll2 = event.poll) !== null && _event$poll2 !== void 0 && _event$poll2.id && event.poll.id !== _this.id) return;\n      if (!isPollClosedEventEvent(event)) return; // @ts-ignore\n\n      _this.state.partialNext({\n        is_closed: true,\n        lastActivityAt: new Date(event.created_at)\n      });\n    });\n    _defineProperty(this, \"handleVoteCasted\", function (event) {\n      var _event$poll3;\n      if ((_event$poll3 = event.poll) !== null && _event$poll3 !== void 0 && _event$poll3.id && event.poll.id !== _this.id) return;\n      if (!isPollVoteCastedEvent(event)) return;\n      var currentState = _this.data;\n      var isOwnVote = event.poll_vote.user_id === _this.client.userID;\n      var latestAnswers = _toConsumableArray(currentState.latest_answers);\n      var ownAnswer = currentState.ownAnswer;\n      var ownVotesByOptionId = currentState.ownVotesByOptionId;\n      var maxVotedOptionIds = currentState.maxVotedOptionIds;\n      if (isOwnVote) {\n        if (isVoteAnswer(event.poll_vote)) {\n          ownAnswer = event.poll_vote;\n        } else if (event.poll_vote.option_id) {\n          ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;\n        }\n      }\n      if (isVoteAnswer(event.poll_vote)) {\n        latestAnswers = [event.poll_vote].concat(_toConsumableArray(latestAnswers));\n      } else {\n        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n      }\n      var pollEnrichData = extractPollEnrichedData(event.poll); // @ts-ignore\n\n      _this.state.partialNext(_objectSpread$3(_objectSpread$3({}, pollEnrichData), {}, {\n        latest_answers: latestAnswers,\n        lastActivityAt: new Date(event.created_at),\n        ownAnswer: ownAnswer,\n        ownVotesByOptionId: ownVotesByOptionId,\n        maxVotedOptionIds: maxVotedOptionIds\n      }));\n    });\n    _defineProperty(this, \"handleVoteChanged\", function (event) {\n      var _event$poll4;\n\n      // this event is triggered only when event.poll.enforce_unique_vote === true\n      if ((_event$poll4 = event.poll) !== null && _event$poll4 !== void 0 && _event$poll4.id && event.poll.id !== _this.id) return;\n      if (!isPollVoteChangedEvent(event)) return;\n      var currentState = _this.data;\n      var isOwnVote = event.poll_vote.user_id === _this.client.userID;\n      var latestAnswers = _toConsumableArray(currentState.latest_answers);\n      var ownAnswer = currentState.ownAnswer;\n      var ownVotesByOptionId = currentState.ownVotesByOptionId;\n      var maxVotedOptionIds = currentState.maxVotedOptionIds;\n      if (isOwnVote) {\n        if (isVoteAnswer(event.poll_vote)) {\n          latestAnswers = [event.poll_vote].concat(_toConsumableArray(latestAnswers.filter(function (answer) {\n            return answer.id !== event.poll_vote.id;\n          })));\n          ownAnswer = event.poll_vote;\n        } else if (event.poll_vote.option_id) {\n          var _ownAnswer;\n          if (event.poll.enforce_unique_votes) {\n            ownVotesByOptionId = _defineProperty({}, event.poll_vote.option_id, event.poll_vote);\n          } else {\n            ownVotesByOptionId = Object.entries(ownVotesByOptionId).reduce(function (acc, _ref3) {\n              var _ref4 = _slicedToArray(_ref3, 2),\n                optionId = _ref4[0],\n                vote = _ref4[1];\n              if (optionId !== event.poll_vote.option_id && vote.id === event.poll_vote.id) {\n                return acc;\n              }\n              acc[optionId] = vote;\n              return acc;\n            }, {});\n            ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;\n          }\n          if (((_ownAnswer = ownAnswer) === null || _ownAnswer === void 0 ? void 0 : _ownAnswer.id) === event.poll_vote.id) {\n            ownAnswer = undefined;\n          }\n          maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n        }\n      } else if (isVoteAnswer(event.poll_vote)) {\n        latestAnswers = [event.poll_vote].concat(_toConsumableArray(latestAnswers));\n      } else {\n        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n      }\n      var pollEnrichData = extractPollEnrichedData(event.poll); // @ts-ignore\n\n      _this.state.partialNext(_objectSpread$3(_objectSpread$3({}, pollEnrichData), {}, {\n        latest_answers: latestAnswers,\n        lastActivityAt: new Date(event.created_at),\n        ownAnswer: ownAnswer,\n        ownVotesByOptionId: ownVotesByOptionId,\n        maxVotedOptionIds: maxVotedOptionIds\n      }));\n    });\n    _defineProperty(this, \"handleVoteRemoved\", function (event) {\n      var _event$poll5;\n      if ((_event$poll5 = event.poll) !== null && _event$poll5 !== void 0 && _event$poll5.id && event.poll.id !== _this.id) return;\n      if (!isPollVoteRemovedEvent(event)) return;\n      var currentState = _this.data;\n      var isOwnVote = event.poll_vote.user_id === _this.client.userID;\n      var latestAnswers = _toConsumableArray(currentState.latest_answers);\n      var ownAnswer = currentState.ownAnswer;\n      var ownVotesByOptionId = _objectSpread$3({}, currentState.ownVotesByOptionId);\n      var maxVotedOptionIds = currentState.maxVotedOptionIds;\n      if (isVoteAnswer(event.poll_vote)) {\n        latestAnswers = latestAnswers.filter(function (answer) {\n          return answer.id !== event.poll_vote.id;\n        });\n        if (isOwnVote) {\n          ownAnswer = undefined;\n        }\n      } else {\n        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n        if (isOwnVote && event.poll_vote.option_id) {\n          delete ownVotesByOptionId[event.poll_vote.option_id];\n        }\n      }\n      var pollEnrichData = extractPollEnrichedData(event.poll); // @ts-ignore\n\n      _this.state.partialNext(_objectSpread$3(_objectSpread$3({}, pollEnrichData), {}, {\n        latest_answers: latestAnswers,\n        lastActivityAt: new Date(event.created_at),\n        ownAnswer: ownAnswer,\n        ownVotesByOptionId: ownVotesByOptionId,\n        maxVotedOptionIds: maxVotedOptionIds\n      }));\n    });\n    _defineProperty(this, \"query\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var _yield$_this$client$g, poll;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.client.getPoll(id);\n              case 2:\n                _yield$_this$client$g = _context.sent;\n                poll = _yield$_this$client$g.poll;\n\n                // @ts-ignore\n                _this.state.partialNext(_objectSpread$3(_objectSpread$3({}, poll), {}, {\n                  lastActivityAt: new Date()\n                }));\n                return _context.abrupt(\"return\", poll);\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"update\", /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.client.updatePoll(_objectSpread$3(_objectSpread$3({}, data), {}, {\n                  id: _this.id\n                }));\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return function (_x2) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"partialUpdate\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(partialPollObject) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _this.client.partialUpdatePoll(_this.id, partialPollObject);\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      return function (_x3) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"close\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _this.client.closePoll(_this.id);\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    })));\n    _defineProperty(this, \"delete\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _this.client.deletePoll(_this.id);\n            case 2:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    })));\n    _defineProperty(this, \"createOption\", /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(option) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _this.client.createPollOption(_this.id, option);\n              case 2:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n      return function (_x4) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"updateOption\", /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(option) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return _this.client.updatePollOption(_this.id, option);\n              case 2:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n      return function (_x5) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"deleteOption\", /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(optionId) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return _this.client.deletePollOption(_this.id, optionId);\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n      return function (_x6) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"castVote\", /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(optionId, messageId) {\n        var _this$data, max_votes_allowed, ownVotesByOptionId, reachedVoteLimit, _oldestVote2, oldestVote;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _this$data = _this.data, max_votes_allowed = _this$data.max_votes_allowed, ownVotesByOptionId = _this$data.ownVotesByOptionId;\n                reachedVoteLimit = max_votes_allowed && max_votes_allowed === Object.keys(ownVotesByOptionId).length;\n                if (!reachedVoteLimit) {\n                  _context9.next = 8;\n                  break;\n                }\n                oldestVote = Object.values(ownVotesByOptionId)[0];\n                Object.values(ownVotesByOptionId).slice(1).forEach(function (vote) {\n                  var _oldestVote;\n                  if (!((_oldestVote = oldestVote) !== null && _oldestVote !== void 0 && _oldestVote.created_at) || new Date(vote.created_at) < new Date(oldestVote.created_at)) {\n                    oldestVote = vote;\n                  }\n                });\n                if (!((_oldestVote2 = oldestVote) !== null && _oldestVote2 !== void 0 && _oldestVote2.id)) {\n                  _context9.next = 8;\n                  break;\n                }\n                _context9.next = 8;\n                return _this.removeVote(oldestVote.id, messageId);\n              case 8:\n                _context9.next = 10;\n                return _this.client.castPollVote(messageId, _this.id, {\n                  option_id: optionId\n                });\n              case 10:\n                return _context9.abrupt(\"return\", _context9.sent);\n              case 11:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n      return function (_x7, _x8) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"removeVote\", /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(voteId, messageId) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _this.client.removePollVote(messageId, _this.id, voteId);\n              case 2:\n                return _context10.abrupt(\"return\", _context10.sent);\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n      return function (_x9, _x10) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"addAnswer\", /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(answerText, messageId) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return _this.client.addPollAnswer(messageId, _this.id, answerText);\n              case 2:\n                return _context11.abrupt(\"return\", _context11.sent);\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n      return function (_x11, _x12) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"removeAnswer\", /*#__PURE__*/function () {\n      var _ref16 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(answerId, messageId) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return _this.client.removePollVote(messageId, _this.id, answerId);\n              case 2:\n                return _context12.abrupt(\"return\", _context12.sent);\n              case 3:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n      return function (_x13, _x14) {\n        return _ref16.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"queryAnswers\", /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(params) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return _this.client.queryPollAnswers(_this.id, params.filter, params.sort, params.options);\n              case 2:\n                return _context13.abrupt(\"return\", _context13.sent);\n              case 3:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      }));\n      return function (_x15) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"queryOptionVotes\", /*#__PURE__*/function () {\n      var _ref18 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(params) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return _this.client.queryPollVotes(_this.id, params.filter, params.sort, params.options);\n              case 2:\n                return _context14.abrupt(\"return\", _context14.sent);\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n      return function (_x16) {\n        return _ref18.apply(this, arguments);\n      };\n    }());\n    this.client = client;\n    this.id = _poll.id;\n    this.state = new StateStore(this.getInitialStateFromPollResponse(_poll));\n  }\n  _createClass(Poll, [{\n    key: \"data\",\n    get: function get() {\n      return this.state.getLatestValue();\n    }\n  }]);\n  return Poll;\n}();\nfunction getMaxVotedOptionIds(voteCountsByOption) {\n  var maxVotes = 0;\n  var winningOptions = [];\n  for (var _i = 0, _Object$entries = Object.entries(voteCountsByOption !== null && voteCountsByOption !== void 0 ? voteCountsByOption : {}); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      id = _Object$entries$_i[0],\n      count = _Object$entries$_i[1];\n    if (count > maxVotes) {\n      winningOptions = [id];\n      maxVotes = count;\n    } else if (count === maxVotes) {\n      winningOptions.push(id);\n    }\n  }\n  return winningOptions;\n}\nfunction getOwnVotesByOptionId(ownVotes) {\n  return !ownVotes ? {} : ownVotes.reduce(function (acc, vote) {\n    if (isVoteAnswer(vote) || !vote.option_id) return acc;\n    acc[vote.option_id] = vote;\n    return acc;\n  }, {});\n}\nfunction extractPollData(pollResponse) {\n  return {\n    allow_answers: pollResponse.allow_answers,\n    allow_user_suggested_options: pollResponse.allow_user_suggested_options,\n    description: pollResponse.description,\n    enforce_unique_vote: pollResponse.enforce_unique_vote,\n    id: pollResponse.id,\n    is_closed: pollResponse.is_closed,\n    max_votes_allowed: pollResponse.max_votes_allowed,\n    name: pollResponse.name,\n    options: pollResponse.options,\n    voting_visibility: pollResponse.voting_visibility\n  };\n}\nfunction extractPollEnrichedData(pollResponse) {\n  return {\n    answers_count: pollResponse.answers_count,\n    latest_votes_by_option: pollResponse.latest_votes_by_option,\n    vote_count: pollResponse.vote_count,\n    vote_counts_by_option: pollResponse.vote_counts_by_option\n  };\n}\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$1(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\nfunction _arrayLikeToArray$1(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nvar PollManager = /*#__PURE__*/function () {\n  // The pollCache contains only polls that have been created and sent as messages\n  // (i.e only polls that are coupled with a message, can be voted on and require a\n  // reactive state). It shall work as a basic look-up table for our SDK to be able\n  // to quickly consume poll state that will be reactive even without the polls being\n  // rendered within the UI.\n  function PollManager(_ref) {\n    var _this = this;\n    var client = _ref.client;\n    _classCallCheck(this, PollManager);\n    _defineProperty(this, \"client\", void 0);\n    _defineProperty(this, \"pollCache\", new Map());\n    _defineProperty(this, \"unsubscribeFunctions\", new Set());\n    _defineProperty(this, \"fromState\", function (id) {\n      return _this.pollCache.get(id);\n    });\n    _defineProperty(this, \"registerSubscriptions\", function () {\n      if (_this.unsubscribeFunctions.size) {\n        // Already listening for events and changes\n        return;\n      }\n      _this.unsubscribeFunctions.add(_this.subscribeMessageNew());\n      _this.unsubscribeFunctions.add(_this.subscribePollUpdated());\n      _this.unsubscribeFunctions.add(_this.subscribePollClosed());\n      _this.unsubscribeFunctions.add(_this.subscribeVoteCasted());\n      _this.unsubscribeFunctions.add(_this.subscribeVoteChanged());\n      _this.unsubscribeFunctions.add(_this.subscribeVoteRemoved());\n    });\n    _defineProperty(this, \"unregisterSubscriptions\", function () {\n      _this.unsubscribeFunctions.forEach(function (cleanupFunction) {\n        return cleanupFunction();\n      });\n      _this.unsubscribeFunctions.clear();\n    });\n    _defineProperty(this, \"createPoll\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(poll) {\n        var _yield$_this$client$c, createdPoll;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.client.createPoll(poll);\n              case 2:\n                _yield$_this$client$c = _context.sent;\n                createdPoll = _yield$_this$client$c.poll;\n                return _context.abrupt(\"return\", new Poll({\n                  client: _this.client,\n                  poll: createdPoll\n                }));\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"getPoll\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n        var cachedPoll, _yield$_this$client$g, poll;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cachedPoll = _this.fromState(id); // optimistically return the cached poll if it exists and update in the background\n\n                if (!cachedPoll) {\n                  _context2.next = 4;\n                  break;\n                }\n                _this.client.getPoll(id).then(function (_ref4) {\n                  var poll = _ref4.poll;\n                  return _this.setOrOverwriteInCache(poll, true);\n                });\n                return _context2.abrupt(\"return\", cachedPoll);\n              case 4:\n                _context2.next = 6;\n                return _this.client.getPoll(id);\n              case 6:\n                _yield$_this$client$g = _context2.sent;\n                poll = _yield$_this$client$g.poll;\n                _this.setOrOverwriteInCache(poll);\n                return _context2.abrupt(\"return\", _this.fromState(id));\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"queryPolls\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(filter) {\n        var sort,\n          options,\n          _yield$_this$client$q,\n          polls,\n          next,\n          pollInstances,\n          _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                sort = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : [];\n                options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n                _context3.next = 4;\n                return _this.client.queryPolls(filter, sort, options);\n              case 4:\n                _yield$_this$client$q = _context3.sent;\n                polls = _yield$_this$client$q.polls;\n                next = _yield$_this$client$q.next;\n                pollInstances = polls.map(function (poll) {\n                  _this.setOrOverwriteInCache(poll, true);\n                  return _this.fromState(poll.id);\n                });\n                return _context3.abrupt(\"return\", {\n                  polls: pollInstances,\n                  next: next\n                });\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"hydratePollCache\", function (messages, overwriteState) {\n      var _iterator = _createForOfIteratorHelper$1(messages),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var message = _step.value;\n          if (!message.poll) {\n            continue;\n          }\n          var pollResponse = message.poll;\n          _this.setOrOverwriteInCache(pollResponse, overwriteState);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n    _defineProperty(this, \"setOrOverwriteInCache\", function (pollResponse, overwriteState) {\n      if (!_this.client._cacheEnabled()) {\n        return;\n      }\n      var pollFromCache = _this.fromState(pollResponse.id);\n      if (!pollFromCache) {\n        var poll = new Poll({\n          client: _this.client,\n          poll: pollResponse\n        });\n        _this.pollCache.set(poll.id, poll);\n      } else if (overwriteState) {\n        pollFromCache.reinitializeState(pollResponse);\n      }\n    });\n    _defineProperty(this, \"subscribePollUpdated\", function () {\n      return _this.client.on('poll.updated', function (event) {\n        var _event$poll;\n        if ((_event$poll = event.poll) !== null && _event$poll !== void 0 && _event$poll.id) {\n          var _this$fromState;\n          (_this$fromState = _this.fromState(event.poll.id)) === null || _this$fromState === void 0 ? void 0 : _this$fromState.handlePollUpdated(event);\n        }\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribePollClosed\", function () {\n      return _this.client.on('poll.closed', function (event) {\n        var _event$poll2;\n        if ((_event$poll2 = event.poll) !== null && _event$poll2 !== void 0 && _event$poll2.id) {\n          var _this$fromState2;\n          (_this$fromState2 = _this.fromState(event.poll.id)) === null || _this$fromState2 === void 0 ? void 0 : _this$fromState2.handlePollClosed(event);\n        }\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeVoteCasted\", function () {\n      return _this.client.on('poll.vote_casted', function (event) {\n        var _event$poll3;\n        if ((_event$poll3 = event.poll) !== null && _event$poll3 !== void 0 && _event$poll3.id) {\n          var _this$fromState3;\n          (_this$fromState3 = _this.fromState(event.poll.id)) === null || _this$fromState3 === void 0 ? void 0 : _this$fromState3.handleVoteCasted(event);\n        }\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeVoteChanged\", function () {\n      return _this.client.on('poll.vote_changed', function (event) {\n        var _event$poll4;\n        if ((_event$poll4 = event.poll) !== null && _event$poll4 !== void 0 && _event$poll4.id) {\n          var _this$fromState4;\n          (_this$fromState4 = _this.fromState(event.poll.id)) === null || _this$fromState4 === void 0 ? void 0 : _this$fromState4.handleVoteChanged(event);\n        }\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeVoteRemoved\", function () {\n      return _this.client.on('poll.vote_removed', function (event) {\n        var _event$poll5;\n        if ((_event$poll5 = event.poll) !== null && _event$poll5 !== void 0 && _event$poll5.id) {\n          var _this$fromState5;\n          (_this$fromState5 = _this.fromState(event.poll.id)) === null || _this$fromState5 === void 0 ? void 0 : _this$fromState5.handleVoteRemoved(event);\n        }\n      }).unsubscribe;\n    });\n    _defineProperty(this, \"subscribeMessageNew\", function () {\n      return _this.client.on('message.new', function (event) {\n        var message = event.message;\n        if (message) {\n          var formattedMessage = formatMessage(message);\n          _this.hydratePollCache([formattedMessage]);\n        }\n      }).unsubscribe;\n    });\n    this.client = client;\n  }\n  _createClass(PollManager, [{\n    key: \"data\",\n    get: function get() {\n      return this.pollCache;\n    }\n  }]);\n  return PollManager;\n}();\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$2(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar channelManagerEventToHandlerMapping = {\n  'channel.deleted': 'channelDeletedHandler',\n  'channel.hidden': 'channelHiddenHandler',\n  'channel.truncated': 'channelTruncatedHandler',\n  'channel.updated': 'channelUpdatedHandler',\n  'channel.visible': 'channelVisibleHandler',\n  'message.new': 'newMessageHandler',\n  'member.updated': 'memberUpdatedHandler',\n  'notification.added_to_channel': 'notificationAddedToChannelHandler',\n  'notification.message_new': 'notificationNewMessageHandler',\n  'notification.removed_from_channel': 'notificationRemovedFromChannelHandler'\n};\nvar DEFAULT_CHANNEL_MANAGER_OPTIONS = {\n  abortInFlightQuery: false,\n  allowNotLoadedChannelPromotionForEvent: {\n    'channel.visible': true,\n    'message.new': true,\n    'notification.added_to_channel': true,\n    'notification.message_new': true\n  },\n  lockChannelOrder: false\n};\nvar DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS = {\n  limit: 10,\n  offset: 0\n};\n/**\n * A class that manages a list of channels and changes it based on configuration and WS events. The\n * list of channels is reactive as well as the pagination and it can be subscribed to for state updates.\n *\n * @internal\n */\n\nvar ChannelManager = function ChannelManager(_ref) {\n  var _this = this;\n  var client = _ref.client,\n    _ref$eventHandlerOver = _ref.eventHandlerOverrides,\n    _eventHandlerOverrides = _ref$eventHandlerOver === void 0 ? {} : _ref$eventHandlerOver,\n    _ref$options = _ref.options,\n    _options = _ref$options === void 0 ? {} : _ref$options;\n  _classCallCheck(this, ChannelManager);\n  _defineProperty(this, \"state\", void 0);\n  _defineProperty(this, \"client\", void 0);\n  _defineProperty(this, \"unsubscribeFunctions\", new Set());\n  _defineProperty(this, \"eventHandlers\", new Map());\n  _defineProperty(this, \"eventHandlerOverrides\", new Map());\n  _defineProperty(this, \"options\", {});\n  _defineProperty(this, \"stateOptions\", {});\n  _defineProperty(this, \"setChannels\", function (valueOrFactory) {\n    _this.state.next(function (current) {\n      var currentChannels = current.channels;\n      var newChannels = isPatch(valueOrFactory) ? valueOrFactory(currentChannels) : valueOrFactory; // If the references between the two values are the same, just return the\n      // current state; otherwise trigger a state change.\n\n      if (currentChannels === newChannels) {\n        return current;\n      }\n      return _objectSpread$2(_objectSpread$2({}, current), {}, {\n        channels: newChannels\n      });\n    });\n  });\n  _defineProperty(this, \"setEventHandlerOverrides\", function () {\n    var eventHandlerOverrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var truthyEventHandlerOverrides = Object.entries(eventHandlerOverrides).reduce(function (acc, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n      if (value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n    _this.eventHandlerOverrides = new Map(Object.entries(truthyEventHandlerOverrides));\n  });\n  _defineProperty(this, \"setOptions\", function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _this.options = _objectSpread$2(_objectSpread$2({}, DEFAULT_CHANNEL_MANAGER_OPTIONS), options);\n  });\n  _defineProperty(this, \"queryChannels\", /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(filters) {\n      var sort,\n        options,\n        stateOptions,\n        _DEFAULT_CHANNEL_MANA,\n        offset,\n        limit,\n        _this$state$getLatest,\n        isLoading,\n        _channels$length,\n        _channels$length2,\n        channels,\n        newOffset,\n        newOptions,\n        _this$state$getLatest2,\n        pagination,\n        _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              sort = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              stateOptions = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};\n              _DEFAULT_CHANNEL_MANA = _objectSpread$2(_objectSpread$2({}, DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS), options), offset = _DEFAULT_CHANNEL_MANA.offset, limit = _DEFAULT_CHANNEL_MANA.limit;\n              _this$state$getLatest = _this.state.getLatestValue(), isLoading = _this$state$getLatest.pagination.isLoading;\n              if (!(isLoading && !_this.options.abortInFlightQuery)) {\n                _context.next = 7;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 7:\n              _context.prev = 7;\n              _this.stateOptions = stateOptions;\n              _this.state.next(function (currentState) {\n                return _objectSpread$2(_objectSpread$2({}, currentState), {}, {\n                  pagination: _objectSpread$2(_objectSpread$2({}, currentState.pagination), {}, {\n                    isLoading: true,\n                    isLoadingNext: false,\n                    filters: filters,\n                    sort: sort,\n                    options: options\n                  })\n                });\n              });\n              _context.next = 12;\n              return _this.client.queryChannels(filters, sort, options, stateOptions);\n            case 12:\n              channels = _context.sent;\n              newOffset = offset + ((_channels$length = channels === null || channels === void 0 ? void 0 : channels.length) !== null && _channels$length !== void 0 ? _channels$length : 0);\n              newOptions = _objectSpread$2(_objectSpread$2({}, options), {}, {\n                offset: newOffset\n              });\n              _this$state$getLatest2 = _this.state.getLatestValue(), pagination = _this$state$getLatest2.pagination;\n              _this.state.partialNext({\n                channels: channels,\n                pagination: _objectSpread$2(_objectSpread$2({}, pagination), {}, {\n                  hasNext: ((_channels$length2 = channels === null || channels === void 0 ? void 0 : channels.length) !== null && _channels$length2 !== void 0 ? _channels$length2 : 0) >= limit,\n                  isLoading: false,\n                  options: newOptions\n                }),\n                initialized: true\n              });\n              _context.next = 24;\n              break;\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](7);\n              _this.client.logger('error', _context.t0.message);\n              _this.state.next(function (currentState) {\n                return _objectSpread$2(_objectSpread$2({}, currentState), {}, {\n                  pagination: _objectSpread$2(_objectSpread$2({}, currentState.pagination), {}, {\n                    isLoading: false\n                  })\n                });\n              });\n              throw _context.t0;\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 19]]);\n    }));\n    return function (_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, \"loadNext\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _this$state$getLatest3, pagination, initialized, filters, sort, options, isLoadingNext, hasNext, _nextChannels$length, _nextChannels$length2, _DEFAULT_CHANNEL_MANA2, offset, limit, nextChannels, _this$state$getLatest4, channels, newOffset, newOptions;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _this$state$getLatest3 = _this.state.getLatestValue(), pagination = _this$state$getLatest3.pagination, initialized = _this$state$getLatest3.initialized;\n            filters = pagination.filters, sort = pagination.sort, options = pagination.options, isLoadingNext = pagination.isLoadingNext, hasNext = pagination.hasNext;\n            if (!(!initialized || isLoadingNext || !hasNext)) {\n              _context2.next = 4;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 4:\n            _context2.prev = 4;\n            _DEFAULT_CHANNEL_MANA2 = _objectSpread$2(_objectSpread$2({}, DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS), options), offset = _DEFAULT_CHANNEL_MANA2.offset, limit = _DEFAULT_CHANNEL_MANA2.limit;\n            _this.state.partialNext({\n              pagination: _objectSpread$2(_objectSpread$2({}, pagination), {}, {\n                isLoading: false,\n                isLoadingNext: true\n              })\n            });\n            _context2.next = 9;\n            return _this.client.queryChannels(filters, sort, options, _this.stateOptions);\n          case 9:\n            nextChannels = _context2.sent;\n            _this$state$getLatest4 = _this.state.getLatestValue(), channels = _this$state$getLatest4.channels;\n            newOffset = offset + ((_nextChannels$length = nextChannels === null || nextChannels === void 0 ? void 0 : nextChannels.length) !== null && _nextChannels$length !== void 0 ? _nextChannels$length : 0);\n            newOptions = _objectSpread$2(_objectSpread$2({}, options), {}, {\n              offset: newOffset\n            });\n            _this.state.partialNext({\n              channels: uniqBy([].concat(_toConsumableArray(channels || []), _toConsumableArray(nextChannels)), 'cid'),\n              pagination: _objectSpread$2(_objectSpread$2({}, pagination), {}, {\n                hasNext: ((_nextChannels$length2 = nextChannels === null || nextChannels === void 0 ? void 0 : nextChannels.length) !== null && _nextChannels$length2 !== void 0 ? _nextChannels$length2 : 0) >= limit,\n                isLoading: false,\n                isLoadingNext: false,\n                options: newOptions\n              })\n            });\n            _context2.next = 21;\n            break;\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](4);\n            _this.client.logger('error', _context2.t0.message);\n            _this.state.next(function (currentState) {\n              return _objectSpread$2(_objectSpread$2({}, currentState), {}, {\n                pagination: _objectSpread$2(_objectSpread$2({}, currentState.pagination), {}, {\n                  isLoadingNext: false\n                })\n              });\n            });\n            throw _context2.t0;\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 16]]);\n  })));\n  _defineProperty(this, \"notificationAddedToChannelHandler\", /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n      var _event$channel, _this$options$allowNo;\n      var _ref7, id, type, members, channel, _this$state$getLatest5, pagination, channels, _ref9, sort;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _ref7 = (_event$channel = event === null || event === void 0 ? void 0 : event.channel) !== null && _event$channel !== void 0 ? _event$channel : {}, id = _ref7.id, type = _ref7.type, members = _ref7.members;\n              if (!(!type || !((_this$options$allowNo = _this.options.allowNotLoadedChannelPromotionForEvent) !== null && _this$options$allowNo !== void 0 && _this$options$allowNo['notification.added_to_channel']))) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 3:\n              _context3.next = 5;\n              return getAndWatchChannel({\n                client: _this.client,\n                id: id,\n                members: members === null || members === void 0 ? void 0 : members.reduce(function (acc, _ref8) {\n                  var user = _ref8.user,\n                    user_id = _ref8.user_id;\n                  var userId = user_id || (user === null || user === void 0 ? void 0 : user.id);\n                  if (userId) {\n                    acc.push(userId);\n                  }\n                  return acc;\n                }, []),\n                type: type\n              });\n            case 5:\n              channel = _context3.sent;\n              _this$state$getLatest5 = _this.state.getLatestValue(), pagination = _this$state$getLatest5.pagination, channels = _this$state$getLatest5.channels;\n              if (channels) {\n                _context3.next = 9;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 9:\n              _ref9 = pagination !== null && pagination !== void 0 ? pagination : {}, sort = _ref9.sort;\n              _this.setChannels(promoteChannel({\n                channels: channels,\n                channelToMove: channel,\n                sort: sort\n              }));\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return function (_x2) {\n      return _ref6.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, \"channelDeletedHandler\", function (event) {\n    var _this$state$getLatest6 = _this.state.getLatestValue(),\n      channels = _this$state$getLatest6.channels;\n    if (!channels) {\n      return;\n    }\n    var newChannels = _toConsumableArray(channels);\n    var channelIndex = newChannels.findIndex(function (channel) {\n      var _event$channel2;\n      return channel.cid === (event.cid || ((_event$channel2 = event.channel) === null || _event$channel2 === void 0 ? void 0 : _event$channel2.cid));\n    });\n    if (channelIndex < 0) {\n      return;\n    }\n    newChannels.splice(channelIndex, 1);\n    _this.setChannels(newChannels);\n  });\n  _defineProperty(this, \"channelHiddenHandler\", this.channelDeletedHandler);\n  _defineProperty(this, \"newMessageHandler\", function (event) {\n    var _this$options$allowNo2;\n    var _this$state$getLatest7 = _this.state.getLatestValue(),\n      pagination = _this$state$getLatest7.pagination,\n      channels = _this$state$getLatest7.channels;\n    if (!channels) {\n      return;\n    }\n    var _ref10 = pagination !== null && pagination !== void 0 ? pagination : {},\n      filters = _ref10.filters,\n      sort = _ref10.sort;\n    var channelType = event.channel_type;\n    var channelId = event.channel_id;\n    if (!channelType || !channelId) {\n      return;\n    }\n    var targetChannel = _this.client.channel(channelType, channelId);\n    var targetChannelIndex = channels.indexOf(targetChannel);\n    var targetChannelExistsWithinList = targetChannelIndex >= 0;\n    var isTargetChannelPinned = isChannelPinned(targetChannel);\n    var isTargetChannelArchived = isChannelArchived(targetChannel);\n    var considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    var considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n    if (\n    // filter is defined, target channel is archived and filter option is set to false\n    considerArchivedChannels && isTargetChannelArchived && !filters.archived ||\n    // filter is defined, target channel isn't archived and filter option is set to true\n    considerArchivedChannels && !isTargetChannelArchived && filters.archived ||\n    // sort option is defined, target channel is pinned\n    considerPinnedChannels && isTargetChannelPinned ||\n    // list order is locked\n    _this.options.lockChannelOrder ||\n    // target channel is not within the loaded list and loading from cache is disallowed\n    !targetChannelExistsWithinList && !((_this$options$allowNo2 = _this.options.allowNotLoadedChannelPromotionForEvent) !== null && _this$options$allowNo2 !== void 0 && _this$options$allowNo2['message.new'])) {\n      return;\n    }\n    _this.setChannels(promoteChannel({\n      channels: channels,\n      channelToMove: targetChannel,\n      channelToMoveIndexWithinChannels: targetChannelIndex,\n      sort: sort\n    }));\n  });\n  _defineProperty(this, \"notificationNewMessageHandler\", /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(event) {\n      var _event$channel3, _this$options$allowNo3;\n      var _ref12, id, type, channel, _this$state$getLatest8, channels, pagination, _ref13, filters, sort, considerArchivedChannels, isTargetChannelArchived;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _ref12 = (_event$channel3 = event === null || event === void 0 ? void 0 : event.channel) !== null && _event$channel3 !== void 0 ? _event$channel3 : {}, id = _ref12.id, type = _ref12.type;\n              if (!(!id || !type)) {\n                _context4.next = 3;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 3:\n              _context4.next = 5;\n              return getAndWatchChannel({\n                client: _this.client,\n                id: id,\n                type: type\n              });\n            case 5:\n              channel = _context4.sent;\n              _this$state$getLatest8 = _this.state.getLatestValue(), channels = _this$state$getLatest8.channels, pagination = _this$state$getLatest8.pagination;\n              _ref13 = pagination !== null && pagination !== void 0 ? pagination : {}, filters = _ref13.filters, sort = _ref13.sort;\n              considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n              isTargetChannelArchived = isChannelArchived(channel);\n              if (!(!channels || considerArchivedChannels && isTargetChannelArchived && !filters.archived || considerArchivedChannels && !isTargetChannelArchived && filters.archived || !((_this$options$allowNo3 = _this.options.allowNotLoadedChannelPromotionForEvent) !== null && _this$options$allowNo3 !== void 0 && _this$options$allowNo3['notification.message_new']))) {\n                _context4.next = 12;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 12:\n              _this.setChannels(promoteChannel({\n                channels: channels,\n                channelToMove: channel,\n                sort: sort\n              }));\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return function (_x3) {\n      return _ref11.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, \"channelVisibleHandler\", /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(event) {\n      var _this$options$allowNo4;\n      var channelType, channelId, channel, _this$state$getLatest9, channels, pagination, _ref15, sort, filters, considerArchivedChannels, isTargetChannelArchived;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              channelType = event.channel_type, channelId = event.channel_id;\n              if (!(!channelType || !channelId)) {\n                _context5.next = 3;\n                break;\n              }\n              return _context5.abrupt(\"return\");\n            case 3:\n              _context5.next = 5;\n              return getAndWatchChannel({\n                client: _this.client,\n                id: event.channel_id,\n                type: event.channel_type\n              });\n            case 5:\n              channel = _context5.sent;\n              _this$state$getLatest9 = _this.state.getLatestValue(), channels = _this$state$getLatest9.channels, pagination = _this$state$getLatest9.pagination;\n              _ref15 = pagination !== null && pagination !== void 0 ? pagination : {}, sort = _ref15.sort, filters = _ref15.filters;\n              considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n              isTargetChannelArchived = isChannelArchived(channel);\n              if (!(!channels || considerArchivedChannels && isTargetChannelArchived && !filters.archived || considerArchivedChannels && !isTargetChannelArchived && filters.archived || !((_this$options$allowNo4 = _this.options.allowNotLoadedChannelPromotionForEvent) !== null && _this$options$allowNo4 !== void 0 && _this$options$allowNo4['channel.visible']))) {\n                _context5.next = 12;\n                break;\n              }\n              return _context5.abrupt(\"return\");\n            case 12:\n              _this.setChannels(promoteChannel({\n                channels: channels,\n                channelToMove: channel,\n                sort: sort\n              }));\n            case 13:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return function (_x4) {\n      return _ref14.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, \"notificationRemovedFromChannelHandler\", this.channelDeletedHandler);\n  _defineProperty(this, \"memberUpdatedHandler\", function (event) {\n    var _event$member;\n    var _this$state$getLatest10 = _this.state.getLatestValue(),\n      pagination = _this$state$getLatest10.pagination,\n      channels = _this$state$getLatest10.channels;\n    var filters = pagination.filters,\n      sort = pagination.sort;\n    if (!((_event$member = event.member) !== null && _event$member !== void 0 && _event$member.user) || event.member.user.id !== _this.client.userID || !event.channel_type || !event.channel_id) {\n      return;\n    }\n    var channelType = event.channel_type;\n    var channelId = event.channel_id;\n    var considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n    var considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    var pinnedAtSort = extractSortValue({\n      atIndex: 0,\n      sort: sort,\n      targetKey: 'pinned_at'\n    });\n    if (!channels || !considerPinnedChannels && !considerArchivedChannels || _this.options.lockChannelOrder) {\n      return;\n    }\n    var targetChannel = _this.client.channel(channelType, channelId); // assumes that channel instances are not changing\n\n    var targetChannelIndex = channels.indexOf(targetChannel);\n    var targetChannelExistsWithinList = targetChannelIndex >= 0;\n    var isTargetChannelPinned = isChannelPinned(targetChannel);\n    var isTargetChannelArchived = isChannelArchived(targetChannel);\n    var newChannels = _toConsumableArray(channels);\n    if (targetChannelExistsWithinList) {\n      newChannels.splice(targetChannelIndex, 1);\n    } // handle archiving (remove channel)\n\n    if (\n    // When archived filter true, and channel is unarchived\n    considerArchivedChannels && !isTargetChannelArchived && filters !== null && filters !== void 0 && filters.archived ||\n    // When archived filter false, and channel is archived\n    considerArchivedChannels && isTargetChannelArchived && !(filters !== null && filters !== void 0 && filters.archived)) {\n      _this.setChannels(newChannels);\n      return;\n    } // handle pinning\n\n    var lastPinnedChannelIndex = null;\n    if (pinnedAtSort === 1 || pinnedAtSort === -1 && !isTargetChannelPinned) {\n      lastPinnedChannelIndex = findLastPinnedChannelIndex({\n        channels: newChannels\n      });\n    }\n    var newTargetChannelIndex = typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0; // skip state update if the position of the channel does not change\n\n    if (channels[newTargetChannelIndex] === targetChannel) {\n      return;\n    }\n    newChannels.splice(newTargetChannelIndex, 0, targetChannel);\n    _this.setChannels(newChannels);\n  });\n  _defineProperty(this, \"subscriptionOrOverride\", function (event) {\n    var handlerName = channelManagerEventToHandlerMapping[event.type];\n    var defaultEventHandler = _this.eventHandlers.get(handlerName);\n    var eventHandlerOverride = _this.eventHandlerOverrides.get(handlerName);\n    if (eventHandlerOverride && typeof eventHandlerOverride === 'function') {\n      eventHandlerOverride(_this.setChannels, event);\n      return;\n    }\n    if (defaultEventHandler && typeof defaultEventHandler === 'function') {\n      defaultEventHandler(event);\n    }\n  });\n  _defineProperty(this, \"registerSubscriptions\", function () {\n    if (_this.unsubscribeFunctions.size) {\n      // Already listening for events and changes\n      return;\n    }\n    for (var _i = 0, _Object$keys = Object.keys(channelManagerEventToHandlerMapping); _i < _Object$keys.length; _i++) {\n      var eventType = _Object$keys[_i];\n      _this.unsubscribeFunctions.add(_this.client.on(eventType, _this.subscriptionOrOverride).unsubscribe);\n    }\n  });\n  _defineProperty(this, \"unregisterSubscriptions\", function () {\n    _this.unsubscribeFunctions.forEach(function (cleanupFunction) {\n      return cleanupFunction();\n    });\n    _this.unsubscribeFunctions.clear();\n  });\n  this.client = client;\n  this.state = new StateStore({\n    channels: [],\n    pagination: {\n      isLoading: false,\n      isLoadingNext: false,\n      hasNext: false,\n      filters: {},\n      sort: {},\n      options: DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS\n    },\n    initialized: false\n  });\n  this.setEventHandlerOverrides(_eventHandlerOverrides);\n  this.setOptions(_options);\n  this.eventHandlers = new Map(Object.entries({\n    channelDeletedHandler: this.channelDeletedHandler,\n    channelHiddenHandler: this.channelHiddenHandler,\n    channelVisibleHandler: this.channelVisibleHandler,\n    memberUpdatedHandler: this.memberUpdatedHandler,\n    newMessageHandler: this.newMessageHandler,\n    notificationAddedToChannelHandler: this.notificationAddedToChannelHandler,\n    notificationNewMessageHandler: this.notificationNewMessageHandler,\n    notificationRemovedFromChannelHandler: this.notificationRemovedFromChannelHandler\n  }));\n};\nvar _excluded$1 = [\"created_at\", \"updated_at\", \"last_active\", \"online\"],\n  _excluded2 = [\"params\", \"headers\"];\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction isString(x) {\n  return typeof x === 'string' || x instanceof String;\n}\nvar StreamChat = /*#__PURE__*/function () {\n  function StreamChat(_key, secretOrOptions, _options) {\n    var _this = this,\n      _this$options;\n    _classCallCheck(this, StreamChat);\n    _defineProperty(this, \"_user\", void 0);\n    _defineProperty(this, \"activeChannels\", void 0);\n    _defineProperty(this, \"threads\", void 0);\n    _defineProperty(this, \"polls\", void 0);\n    _defineProperty(this, \"anonymous\", void 0);\n    _defineProperty(this, \"persistUserOnConnectionFailure\", void 0);\n    _defineProperty(this, \"axiosInstance\", void 0);\n    _defineProperty(this, \"baseURL\", void 0);\n    _defineProperty(this, \"browser\", void 0);\n    _defineProperty(this, \"cleaningIntervalRef\", void 0);\n    _defineProperty(this, \"clientID\", void 0);\n    _defineProperty(this, \"configs\", void 0);\n    _defineProperty(this, \"key\", void 0);\n    _defineProperty(this, \"listeners\", void 0);\n    _defineProperty(this, \"logger\", void 0);\n    _defineProperty(this, \"recoverStateOnReconnect\", void 0);\n    _defineProperty(this, \"moderation\", void 0);\n    _defineProperty(this, \"mutedChannels\", void 0);\n    _defineProperty(this, \"mutedUsers\", void 0);\n    _defineProperty(this, \"node\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"secret\", void 0);\n    _defineProperty(this, \"setUserPromise\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"tokenManager\", void 0);\n    _defineProperty(this, \"user\", void 0);\n    _defineProperty(this, \"userAgent\", void 0);\n    _defineProperty(this, \"userID\", void 0);\n    _defineProperty(this, \"wsBaseURL\", void 0);\n    _defineProperty(this, \"wsConnection\", void 0);\n    _defineProperty(this, \"wsFallback\", void 0);\n    _defineProperty(this, \"wsPromise\", void 0);\n    _defineProperty(this, \"consecutiveFailures\", void 0);\n    _defineProperty(this, \"insightMetrics\", void 0);\n    _defineProperty(this, \"defaultWSTimeoutWithFallback\", void 0);\n    _defineProperty(this, \"defaultWSTimeout\", void 0);\n    _defineProperty(this, \"sdkIdentifier\", void 0);\n    _defineProperty(this, \"deviceIdentifier\", void 0);\n    _defineProperty(this, \"nextRequestAbortController\", null);\n    _defineProperty(this, \"_getConnectionID\", function () {\n      var _this$wsConnection, _this$wsFallback;\n      return ((_this$wsConnection = _this.wsConnection) === null || _this$wsConnection === void 0 ? void 0 : _this$wsConnection.connectionID) || ((_this$wsFallback = _this.wsFallback) === null || _this$wsFallback === void 0 ? void 0 : _this$wsFallback.connectionID);\n    });\n    _defineProperty(this, \"_hasConnectionID\", function () {\n      return Boolean(_this._getConnectionID());\n    });\n    _defineProperty(this, \"connectUser\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, userTokenOrProvider) {\n        var setTokenPromise, wsPromise;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (user.id) {\n                  _context.next = 2;\n                  break;\n                }\n                throw new Error('The \"id\" field on the user is missing');\n              case 2:\n                if (!(_this.userID === user.id && _this.setUserPromise)) {\n                  _context.next = 5;\n                  break;\n                }\n                console.warn('Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.');\n                return _context.abrupt(\"return\", _this.setUserPromise);\n              case 5:\n                if (!_this.userID) {\n                  _context.next = 7;\n                  break;\n                }\n                throw new Error('Use client.disconnect() before trying to connect as a different user. connectUser was called twice.');\n              case 7:\n                if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {\n                  console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n                } // we generate the client id client side\n\n                _this.userID = user.id;\n                _this.anonymous = false;\n                setTokenPromise = _this._setToken(user, userTokenOrProvider);\n                _this._setUser(user);\n                wsPromise = _this.openConnection();\n                _this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(function (result) {\n                  return result[1];\n                } // We only return connection promise;\n                );\n                _context.prev = 14;\n                _context.next = 17;\n                return _this.setUserPromise;\n              case 17:\n                return _context.abrupt(\"return\", _context.sent);\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](14);\n                if (_this.persistUserOnConnectionFailure) {\n                  // cleanup client to allow the user to retry connectUser again\n                  _this.closeConnection();\n                } else {\n                  _this.disconnectUser();\n                }\n                throw _context.t0;\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[14, 20]]);\n      }));\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"setUser\", this.connectUser);\n    _defineProperty(this, \"_setToken\", function (user, userTokenOrProvider) {\n      return _this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n    });\n    _defineProperty(this, \"closeConnection\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(timeout) {\n        var _this$wsConnection2, _this$wsFallback2;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (_this.cleaningIntervalRef != null) {\n                  clearInterval(_this.cleaningIntervalRef);\n                  _this.cleaningIntervalRef = undefined;\n                }\n                _context2.next = 3;\n                return Promise.all([(_this$wsConnection2 = _this.wsConnection) === null || _this$wsConnection2 === void 0 ? void 0 : _this$wsConnection2.disconnect(timeout), (_this$wsFallback2 = _this.wsFallback) === null || _this$wsFallback2 === void 0 ? void 0 : _this$wsFallback2.disconnect(timeout)]);\n              case 3:\n                return _context2.abrupt(\"return\", Promise.resolve());\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"createChannelManager\", function (_ref3) {\n      var _ref3$eventHandlerOve = _ref3.eventHandlerOverrides,\n        eventHandlerOverrides = _ref3$eventHandlerOve === void 0 ? {} : _ref3$eventHandlerOve,\n        _ref3$options = _ref3.options,\n        options = _ref3$options === void 0 ? {} : _ref3$options;\n      return new ChannelManager({\n        client: _this,\n        eventHandlerOverrides: eventHandlerOverrides,\n        options: options\n      });\n    });\n    _defineProperty(this, \"openConnection\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _this$wsConnection3, _this$wsConnection4, _this$wsFallback3;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_this.userID) {\n                _context3.next = 2;\n                break;\n              }\n              throw Error('User is not set on client, use client.connectUser or client.connectAnonymousUser instead');\n            case 2:\n              if (!((_this$wsConnection3 = _this.wsConnection) !== null && _this$wsConnection3 !== void 0 && _this$wsConnection3.isConnecting && _this.wsPromise)) {\n                _context3.next = 5;\n                break;\n              }\n              _this.logger('info', 'client:openConnection() - connection already in progress', {\n                tags: ['connection', 'client']\n              });\n              return _context3.abrupt(\"return\", _this.wsPromise);\n            case 5:\n              if (!(((_this$wsConnection4 = _this.wsConnection) !== null && _this$wsConnection4 !== void 0 && _this$wsConnection4.isHealthy || (_this$wsFallback3 = _this.wsFallback) !== null && _this$wsFallback3 !== void 0 && _this$wsFallback3.isHealthy()) && _this._hasConnectionID())) {\n                _context3.next = 8;\n                break;\n              }\n              _this.logger('info', 'client:openConnection() - openConnection called twice, healthy connection already exists', {\n                tags: ['connection', 'client']\n              });\n              return _context3.abrupt(\"return\");\n            case 8:\n              _this.clientID = \"\".concat(_this.userID, \"--\").concat(randomId());\n              _this.wsPromise = _this.connect();\n              _this._startCleaning();\n              return _context3.abrupt(\"return\", _this.wsPromise);\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n    _defineProperty(this, \"_setupConnection\", this.openConnection);\n    _defineProperty(this, \"_normalizeDate\", function (before) {\n      if (before instanceof Date) {\n        before = before.toISOString();\n      }\n      if (before === '') {\n        throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n      }\n      return before;\n    });\n    _defineProperty(this, \"disconnectUser\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(timeout) {\n        var closePromise, _i, _Object$values, _channel;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this.logger('info', 'client:disconnect() - Disconnecting the client', {\n                  tags: ['connection', 'client']\n                }); // remove the user specific fields\n\n                delete _this.user;\n                delete _this._user;\n                delete _this.userID;\n                _this.anonymous = false;\n                closePromise = _this.closeConnection(timeout);\n                for (_i = 0, _Object$values = Object.values(_this.activeChannels); _i < _Object$values.length; _i++) {\n                  _channel = _Object$values[_i];\n                  _channel._disconnect();\n                } // ensure we no longer return inactive channels\n\n                _this.activeChannels = {}; // reset client state\n\n                _this.state = new ClientState({\n                  client: _this\n                }); // reset thread manager\n\n                _this.threads.resetState(); // reset token manager\n\n                setTimeout(_this.tokenManager.reset); // delay reseting to use token for disconnect calls\n                // close the WS connection\n\n                return _context4.abrupt(\"return\", closePromise);\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"disconnect\", this.disconnectUser);\n    _defineProperty(this, \"connectAnonymousUser\", function () {\n      if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {\n        console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n      }\n      _this.anonymous = true;\n      _this.userID = randomId();\n      var anonymousUser = {\n        id: _this.userID,\n        anon: true\n      };\n      _this._setToken(anonymousUser, '');\n      _this._setUser(anonymousUser);\n      return _this._setupConnection();\n    });\n    _defineProperty(this, \"setAnonymousUser\", this.connectAnonymousUser);\n    _defineProperty(this, \"doAxiosRequest\", /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(type, url, data) {\n        var options,\n          requestConfig,\n          response,\n          _requestConfig$header,\n          _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : {};\n                _context5.next = 3;\n                return _this.tokenManager.tokenReady();\n              case 3:\n                requestConfig = _this._enrichAxiosOptions(options);\n                _context5.prev = 4;\n                _this._logApiRequest(type, url, data, requestConfig);\n                _context5.t0 = type;\n                _context5.next = _context5.t0 === 'get' ? 9 : _context5.t0 === 'delete' ? 13 : _context5.t0 === 'post' ? 17 : _context5.t0 === 'postForm' ? 21 : _context5.t0 === 'put' ? 25 : _context5.t0 === 'patch' ? 29 : _context5.t0 === 'options' ? 33 : 37;\n                break;\n              case 9:\n                _context5.next = 11;\n                return _this.axiosInstance.get(url, requestConfig);\n              case 11:\n                response = _context5.sent;\n                return _context5.abrupt(\"break\", 38);\n              case 13:\n                _context5.next = 15;\n                return _this.axiosInstance.delete(url, requestConfig);\n              case 15:\n                response = _context5.sent;\n                return _context5.abrupt(\"break\", 38);\n              case 17:\n                _context5.next = 19;\n                return _this.axiosInstance.post(url, data, requestConfig);\n              case 19:\n                response = _context5.sent;\n                return _context5.abrupt(\"break\", 38);\n              case 21:\n                _context5.next = 23;\n                return _this.axiosInstance.postForm(url, data, requestConfig);\n              case 23:\n                response = _context5.sent;\n                return _context5.abrupt(\"break\", 38);\n              case 25:\n                _context5.next = 27;\n                return _this.axiosInstance.put(url, data, requestConfig);\n              case 27:\n                response = _context5.sent;\n                return _context5.abrupt(\"break\", 38);\n              case 29:\n                _context5.next = 31;\n                return _this.axiosInstance.patch(url, data, requestConfig);\n              case 31:\n                response = _context5.sent;\n                return _context5.abrupt(\"break\", 38);\n              case 33:\n                _context5.next = 35;\n                return _this.axiosInstance.options(url, requestConfig);\n              case 35:\n                response = _context5.sent;\n                return _context5.abrupt(\"break\", 38);\n              case 37:\n                throw new Error('Invalid request type');\n              case 38:\n                _this._logApiResponse(type, url, response);\n                _this.consecutiveFailures = 0;\n                return _context5.abrupt(\"return\", _this.handleResponse(response));\n              case 43:\n                _context5.prev = 43;\n                _context5.t1 = _context5[\"catch\"](4);\n                _context5.t1.client_request_id = (_requestConfig$header = requestConfig.headers) === null || _requestConfig$header === void 0 ? void 0 : _requestConfig$header['x-client-request-id'];\n                _this._logApiError(type, url, _context5.t1);\n                _this.consecutiveFailures += 1;\n                if (!_context5.t1.response) {\n                  _context5.next = 60;\n                  break;\n                }\n                if (!(_context5.t1.response.data.code === chatCodes.TOKEN_EXPIRED && !_this.tokenManager.isStatic())) {\n                  _context5.next = 57;\n                  break;\n                }\n                if (!(_this.consecutiveFailures > 1)) {\n                  _context5.next = 53;\n                  break;\n                }\n                _context5.next = 53;\n                return sleep(retryInterval(_this.consecutiveFailures));\n              case 53:\n                _this.tokenManager.loadToken();\n                _context5.next = 56;\n                return _this.doAxiosRequest(type, url, data, options);\n              case 56:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 57:\n                return _context5.abrupt(\"return\", _this.handleResponse(_context5.t1.response));\n              case 60:\n                throw _context5.t1;\n              case 61:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[4, 43]]);\n      }));\n      return function (_x5, _x6, _x7) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"dispatchEvent\", function (event) {\n      if (!event.received_at) event.received_at = new Date(); // client event handlers\n\n      var postListenerCallbacks = _this._handleClientEvent(event); // channel event handlers\n\n      var cid = event.cid;\n      var channel = cid ? _this.activeChannels[cid] : undefined;\n      if (channel) {\n        channel._handleChannelEvent(event);\n      }\n      _this._callClientListeners(event);\n      if (channel) {\n        channel._callChannelListeners(event);\n      }\n      postListenerCallbacks.forEach(function (c) {\n        return c();\n      });\n    });\n    _defineProperty(this, \"handleEvent\", function (messageEvent) {\n      // dispatch the event to the channel listeners\n      var jsonString = messageEvent.data;\n      var event = JSON.parse(jsonString);\n      _this.dispatchEvent(event);\n    });\n    _defineProperty(this, \"_updateMemberWatcherReferences\", function (user) {\n      var refMap = _this.state.userChannelReferences[user.id] || {};\n      for (var _channelID in refMap) {\n        var _channel2 = _this.activeChannels[_channelID];\n        if (_channel2 !== null && _channel2 !== void 0 && _channel2.state) {\n          if (_channel2.state.members[user.id]) {\n            _channel2.state.members[user.id].user = user;\n          }\n          if (_channel2.state.watchers[user.id]) {\n            _channel2.state.watchers[user.id] = user;\n          }\n          if (_channel2.state.read[user.id]) {\n            _channel2.state.read[user.id].user = user;\n          }\n        }\n      }\n    });\n    _defineProperty(this, \"_updateUserReferences\", this._updateMemberWatcherReferences);\n    _defineProperty(this, \"_updateUserMessageReferences\", function (user) {\n      var refMap = _this.state.userChannelReferences[user.id] || {};\n      for (var _channelID2 in refMap) {\n        var _channel3 = _this.activeChannels[_channelID2];\n        if (!_channel3) continue;\n        var state = _channel3.state;\n        /** update the messages from this user. */\n\n        state === null || state === void 0 ? void 0 : state.updateUserMessages(user);\n      }\n    });\n    _defineProperty(this, \"_deleteUserMessageReference\", function (user) {\n      var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var refMap = _this.state.userChannelReferences[user.id] || {};\n      for (var _channelID3 in refMap) {\n        var _channel4 = _this.activeChannels[_channelID3];\n        if (_channel4) {\n          var state = _channel4.state;\n          /** deleted the messages from this user. */\n\n          state === null || state === void 0 ? void 0 : state.deleteUserMessages(user, hardDelete);\n        }\n      }\n    });\n    _defineProperty(this, \"_handleUserEvent\", function (event) {\n      if (!event.user) {\n        return;\n      }\n      /** update the client.state with any changes to users */\n\n      if (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n        if (event.user.id === _this.userID) {\n          var user = _objectSpread$1({}, _this.user || {});\n          var _user = _objectSpread$1({}, _this._user || {}); // Remove deleted properties from user objects.\n\n          for (var _key2 in _this.user) {\n            if (_key2 in event.user || isOwnUserBaseProperty(_key2)) {\n              continue;\n            }\n            delete user[_key2];\n            delete _user[_key2];\n          }\n          /** Updating only available properties in _user object. */\n\n          for (var _key3 in event.user) {\n            if (_user && _key3 in _user) {\n              _user[_key3] = event.user[_key3];\n            }\n          } // @ts-expect-error\n\n          _this._user = _objectSpread$1({}, _user);\n          _this.user = _objectSpread$1(_objectSpread$1({}, user), event.user);\n        }\n        _this.state.updateUser(event.user);\n        _this._updateMemberWatcherReferences(event.user);\n      }\n      if (event.type === 'user.updated') {\n        _this._updateUserMessageReferences(event.user);\n      }\n      if (event.type === 'user.deleted' && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {\n        _this._deleteUserMessageReference(event.user, event.hard_delete);\n      }\n    });\n    _defineProperty(this, \"_callClientListeners\", function (event) {\n      var client = _this; // gather and call the listeners\n\n      var listeners = [];\n      if (client.listeners.all) {\n        listeners.push.apply(listeners, _toConsumableArray(client.listeners.all));\n      }\n      if (client.listeners[event.type]) {\n        listeners.push.apply(listeners, _toConsumableArray(client.listeners[event.type]));\n      } // call the event and send it to the listeners\n\n      for (var _i2 = 0, _listeners = listeners; _i2 < _listeners.length; _i2++) {\n        var listener = _listeners[_i2];\n        listener(event);\n      }\n    });\n    _defineProperty(this, \"recoverState\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var cids;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this.logger('info', \"client:recoverState() - Start of recoverState with connectionID \".concat(_this._getConnectionID()), {\n                tags: ['connection']\n              });\n              cids = Object.keys(_this.activeChannels);\n              if (!(cids.length && _this.recoverStateOnReconnect)) {\n                _context6.next = 10;\n                break;\n              }\n              _this.logger('info', \"client:recoverState() - Start the querying of \".concat(cids.length, \" channels\"), {\n                tags: ['connection', 'client']\n              });\n              _context6.next = 6;\n              return _this.queryChannels({\n                cid: {\n                  $in: cids\n                }\n              }, {\n                last_message_at: -1\n              }, {\n                limit: 30\n              });\n            case 6:\n              _this.logger('info', 'client:recoverState() - Querying channels finished', {\n                tags: ['connection', 'client']\n              });\n              _this.dispatchEvent({\n                type: 'connection.recovered'\n              });\n              _context6.next = 11;\n              break;\n            case 10:\n              _this.dispatchEvent({\n                type: 'connection.recovered'\n              });\n            case 11:\n              _this.wsPromise = Promise.resolve();\n              _this.setUserPromise = Promise.resolve();\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    })));\n    _defineProperty(this, \"getChannelByMembers\", function (channelType, custom) {\n      var _custom$members;\n\n      // Check if the channel already exists.\n      // Only allow 1 channel object per cid\n      var memberIds = ((_custom$members = custom.members) !== null && _custom$members !== void 0 ? _custom$members : []).map(function (member) {\n        var _member$user_id;\n        return typeof member === 'string' ? member : (_member$user_id = member.user_id) !== null && _member$user_id !== void 0 ? _member$user_id : '';\n      });\n      var membersStr = memberIds.sort().join(',');\n      var tempCid = generateChannelTempCid(channelType, memberIds);\n      if (!tempCid) {\n        throw Error('Please specify atleast one member when creating unique conversation');\n      } // channel could exist in `activeChannels` list with either one of the following two keys:\n      // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create\n      // 2. Sorted membersStr - E.g., \"messaging:amin,vishal\" OR \"messaging:amin,jaap,tom\"\n      //                        This is set when you create a channel, but haven't queried yet. After query,\n      //                        we will replace it with `cid`\n\n      for (var _key4 in _this.activeChannels) {\n        var _channel5 = _this.activeChannels[_key4];\n        if (_channel5.disconnected) {\n          continue;\n        }\n        if (_key4 === tempCid) {\n          return _channel5;\n        }\n        if (_key4.indexOf(\"\".concat(channelType, \":!members-\")) === 0) {\n          var membersStrInExistingChannel = Object.keys(_channel5.state.members).sort().join(',');\n          if (membersStrInExistingChannel === membersStr) {\n            return _channel5;\n          }\n        }\n      }\n      var channel = new Channel(_this, channelType, undefined, custom); // For the time being set the key as membersStr, since we don't know the cid yet.\n      // In channel.query, we will replace it with 'cid'.\n\n      if (_this._cacheEnabled()) {\n        _this.activeChannels[tempCid] = channel;\n      }\n      return channel;\n    });\n    _defineProperty(this, \"getChannelById\", function (channelType, channelID, custom) {\n      if (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n        throw Error(\"Invalid channel id \".concat(channelID, \", can't contain the : character\"));\n      } // only allow 1 channel object per cid\n\n      var cid = \"\".concat(channelType, \":\").concat(channelID);\n      if (cid in _this.activeChannels && _this.activeChannels[cid] && !_this.activeChannels[cid].disconnected) {\n        var _channel6 = _this.activeChannels[cid];\n        if (Object.keys(custom).length > 0) {\n          _channel6.data = _objectSpread$1(_objectSpread$1({}, _channel6.data), custom);\n          _channel6._data = _objectSpread$1(_objectSpread$1({}, _channel6._data), custom);\n        }\n        return _channel6;\n      }\n      var channel = new Channel(_this, channelType, channelID, custom);\n      if (_this._cacheEnabled()) {\n        _this.activeChannels[channel.cid] = channel;\n      }\n      return channel;\n    });\n    _defineProperty(this, \"updateUsers\", this.upsertUsers);\n    _defineProperty(this, \"updateUser\", this.upsertUser);\n    _defineProperty(this, \"_unblockMessage\", this.unblockMessage);\n    _defineProperty(this, \"markAllRead\", this.markChannelsRead);\n    _defineProperty(this, \"_isUsingServerAuth\", function () {\n      return !!_this.secret;\n    });\n    _defineProperty(this, \"_cacheEnabled\", function () {\n      return !_this._isUsingServerAuth() || !_this.options.disableCache;\n    });\n    _defineProperty(this, \"_buildWSPayload\", function (client_request_id) {\n      return JSON.stringify({\n        user_id: _this.userID,\n        user_details: _this._user,\n        device: _this.options.device,\n        client_request_id: client_request_id\n      });\n    });\n\n    // set the key\n    this.key = _key;\n    this.listeners = {};\n    this.state = new ClientState({\n      client: this\n    }); // a list of channels to hide ws events from\n\n    this.mutedChannels = [];\n    this.mutedUsers = [];\n    this.moderation = new Moderation(this); // set the secret\n\n    if (secretOrOptions && isString(secretOrOptions)) {\n      this.secret = secretOrOptions;\n    } // set the options... and figure out defaults...\n\n    var inputOptions = _options ? _options : secretOrOptions && !isString(secretOrOptions) ? secretOrOptions : {};\n    this.browser = typeof inputOptions.browser !== 'undefined' ? inputOptions.browser : typeof window !== 'undefined';\n    this.node = !this.browser;\n    this.options = _objectSpread$1({\n      timeout: 3000,\n      withCredentials: false,\n      // making sure cookies are not sent\n      warmUp: false,\n      recoverStateOnReconnect: true,\n      disableCache: false\n    }, inputOptions);\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000\n      });\n    }\n    this.axiosInstance = axios.create(this.options);\n    this.setBaseURL(this.options.baseURL || 'https://chat.stream-io-api.com');\n    if (typeof process !== 'undefined' && 'env' in process && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL('http://localhost:3030');\n    }\n    if (typeof process !== 'undefined' && 'env' in process && process.env.STREAM_LOCAL_TEST_HOST) {\n      this.setBaseURL('http://' + process.env.STREAM_LOCAL_TEST_HOST);\n    } // WS connection is initialized when setUser is called\n\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null; // keeps a reference to all the channels that are in use\n\n    this.activeChannels = {}; // mapping between channel groups and configs\n\n    this.configs = {};\n    this.anonymous = false;\n    this.persistUserOnConnectionFailure = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.persistUserOnConnectionFailure; // If its a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n    this.insightMetrics = new InsightMetrics();\n    this.defaultWSTimeoutWithFallback = 6 * 1000;\n    this.defaultWSTimeout = 15 * 1000;\n    this.axiosInstance.defaults.paramsSerializer = axiosParamsSerializer;\n    /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */\n\n    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : function () {\n      return null;\n    };\n    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n    this.threads = new ThreadManager({\n      client: this\n    });\n    this.polls = new PollManager({\n      client: this\n    });\n  }\n  /**\n   * Get a client instance\n   *\n   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections\n   *\n   * **After the first call, the client configuration will not change if the key or options parameters change**\n   *\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * StreamChat.getInstance('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * StreamChat.getInstance('api_key', { timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * StreamChat.getInstance('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n\n  _createClass(StreamChat, [{\n    key: \"devToken\",\n    value: function devToken(userID) {\n      return DevToken(userID);\n    }\n  }, {\n    key: \"getAuthType\",\n    value: function getAuthType() {\n      return this.anonymous ? 'anonymous' : 'jwt';\n    }\n  }, {\n    key: \"setBaseURL\",\n    value: function setBaseURL(baseURL) {\n      this.baseURL = baseURL;\n      this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n    }\n  }, {\n    key: \"_setUser\",\n    value: function _setUser(user) {\n      /**\n       * This one is used by the frontend. This is a copy of the current user object stored on backend.\n       * It contains reserved properties and own user properties which are not present in `this._user`.\n       */\n      this.user = user;\n      this.userID = user.id; // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n\n      this._user = _objectSpread$1({}, user);\n    }\n    /**\n     * Disconnects the websocket connection, without removing the user set on client.\n     * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n     * to call client.openConnection to reconnect to websocket.\n     *\n     * This is mainly useful on mobile side. You can only receive push notifications\n     * if you don't have active websocket connection.\n     * So when your app goes to background, you can call `client.closeConnection`.\n     * And when app comes back to foreground, call `client.openConnection`.\n     *\n     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n     */\n  }, {\n    key: \"updateAppSettings\",\n    value:\n    /**\n     * updateAppSettings - updates application settings\n     *\n     * @param {AppSettings} options App settings.\n     * IE: {\n        'apn_config': {\n          'auth_type': 'token',\n          'auth_key\": fs.readFileSync(\n            './apn-push-auth-key.p8',\n            'utf-8',\n          ),\n          'key_id': 'keyid',\n          'team_id': 'teamid',\n          'notification_template\": 'notification handlebars template',\n          'bundle_id': 'com.apple.your.app',\n          'development': true\n        },\n        'firebase_config': {\n          'server_key': 'server key from fcm',\n          'notification_template': 'notification handlebars template',\n          'data_template': 'data handlebars template',\n          'apn_template': 'apn notification handlebars template under v2'\n        },\n        'webhook_url': 'https://acme.com/my/awesome/webhook/'\n      }\n     */\n    function () {\n      var _updateAppSettings = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(options) {\n        var apn_config;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                apn_config = options.apn_config;\n                if (apn_config !== null && apn_config !== void 0 && apn_config.p12_cert) {\n                  options = _objectSpread$1(_objectSpread$1({}, options), {}, {\n                    apn_config: _objectSpread$1(_objectSpread$1({}, apn_config), {}, {\n                      p12_cert: Buffer.from(apn_config.p12_cert).toString('base64')\n                    })\n                  });\n                }\n                _context7.next = 4;\n                return this.patch(this.baseURL + '/app', options);\n              case 4:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function updateAppSettings(_x8) {\n        return _updateAppSettings.apply(this, arguments);\n      }\n      return updateAppSettings;\n    }()\n  }, {\n    key: \"revokeTokens\",\n    value:\n    /**\n     * Revokes all tokens on application level issued before given time\n     */\n    function () {\n      var _revokeTokens = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(before) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.updateAppSettings({\n                  revoke_tokens_issued_before: this._normalizeDate(before)\n                });\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function revokeTokens(_x9) {\n        return _revokeTokens.apply(this, arguments);\n      }\n      return revokeTokens;\n    }()\n    /**\n     * Revokes token for a user issued before given time\n     */\n  }, {\n    key: \"revokeUserToken\",\n    value: function () {\n      var _revokeUserToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(userID, before) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.revokeUsersToken([userID], before);\n              case 2:\n                return _context9.abrupt(\"return\", _context9.sent);\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function revokeUserToken(_x10, _x11) {\n        return _revokeUserToken.apply(this, arguments);\n      }\n      return revokeUserToken;\n    }()\n    /**\n     * Revokes tokens for a list of users issued before given time\n     */\n  }, {\n    key: \"revokeUsersToken\",\n    value: function () {\n      var _revokeUsersToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(userIDs, before) {\n        var users, _iterator, _step, userID;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (before === undefined) {\n                  before = new Date().toISOString();\n                } else {\n                  before = this._normalizeDate(before);\n                }\n                users = [];\n                _iterator = _createForOfIteratorHelper(userIDs);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    userID = _step.value;\n                    users.push({\n                      id: userID,\n                      set: {\n                        revoke_tokens_issued_before: before\n                      }\n                    });\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                _context10.next = 6;\n                return this.partialUpdateUsers(users);\n              case 6:\n                return _context10.abrupt(\"return\", _context10.sent);\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function revokeUsersToken(_x12, _x13) {\n        return _revokeUsersToken.apply(this, arguments);\n      }\n      return revokeUsersToken;\n    }()\n    /**\n     * getAppSettings - retrieves application settings\n     */\n  }, {\n    key: \"getAppSettings\",\n    value: function () {\n      var _getAppSettings = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.get(this.baseURL + '/app');\n              case 2:\n                return _context11.abrupt(\"return\", _context11.sent);\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function getAppSettings() {\n        return _getAppSettings.apply(this, arguments);\n      }\n      return getAppSettings;\n    }()\n    /**\n     * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n     *\n     * @param {string} userID User ID. If user has no devices, it will error\n     * @param {TestPushDataInput} [data] Overrides for push templates/message used\n     *  IE: {\n          messageID: 'id-of-message', // will error if message does not exist\n          apnTemplate: '{}', // if app doesn't have apn configured it will error\n          firebaseTemplate: '{}', // if app doesn't have firebase configured it will error\n          firebaseDataTemplate: '{}', // if app doesn't have firebase configured it will error\n          skipDevices: true, // skip config/device checks and sending to real devices\n          pushProviderName: 'staging' // one of your configured push providers\n          pushProviderType: 'apn' // one of supported provider types\n        }\n    */\n  }, {\n    key: \"testPushSettings\",\n    value: function () {\n      var _testPushSettings = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(userID) {\n        var data,\n          _args12 = arguments;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                data = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};\n                _context12.next = 3;\n                return this.post(this.baseURL + '/check_push', _objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1({\n                  user_id: userID\n                }, data.messageID ? {\n                  message_id: data.messageID\n                } : {}), data.apnTemplate ? {\n                  apn_template: data.apnTemplate\n                } : {}), data.firebaseTemplate ? {\n                  firebase_template: data.firebaseTemplate\n                } : {}), data.firebaseDataTemplate ? {\n                  firebase_data_template: data.firebaseDataTemplate\n                } : {}), data.skipDevices ? {\n                  skip_devices: true\n                } : {}), data.pushProviderName ? {\n                  push_provider_name: data.pushProviderName\n                } : {}), data.pushProviderType ? {\n                  push_provider_type: data.pushProviderType\n                } : {}));\n              case 3:\n                return _context12.abrupt(\"return\", _context12.sent);\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function testPushSettings(_x14) {\n        return _testPushSettings.apply(this, arguments);\n      }\n      return testPushSettings;\n    }()\n    /**\n     * testSQSSettings - Tests that the given or configured SQS configuration is valid\n     *\n     * @param {TestSQSDataInput} [data] Overrides SQS settings for testing if needed\n     *  IE: {\n          sqs_key: 'auth_key',\n          sqs_secret: 'auth_secret',\n          sqs_url: 'url_to_queue',\n        }\n     */\n  }, {\n    key: \"testSQSSettings\",\n    value: function () {\n      var _testSQSSettings = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var data,\n          _args13 = arguments;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                data = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};\n                _context13.next = 3;\n                return this.post(this.baseURL + '/check_sqs', data);\n              case 3:\n                return _context13.abrupt(\"return\", _context13.sent);\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function testSQSSettings() {\n        return _testSQSSettings.apply(this, arguments);\n      }\n      return testSQSSettings;\n    }()\n    /**\n     * testSNSSettings - Tests that the given or configured SNS configuration is valid\n     *\n     * @param {TestSNSDataInput} [data] Overrides SNS settings for testing if needed\n     *  IE: {\n          sns_key: 'auth_key',\n          sns_secret: 'auth_secret',\n          sns_topic_arn: 'topic_to_publish_to',\n        }\n     */\n  }, {\n    key: \"testSNSSettings\",\n    value: function () {\n      var _testSNSSettings = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var data,\n          _args14 = arguments;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                data = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};\n                _context14.next = 3;\n                return this.post(this.baseURL + '/check_sns', data);\n              case 3:\n                return _context14.abrupt(\"return\", _context14.sent);\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function testSNSSettings() {\n        return _testSNSSettings.apply(this, arguments);\n      }\n      return testSNSSettings;\n    }()\n    /**\n     * Disconnects the websocket and removes the user from client.\n     *\n     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n     */\n  }, {\n    key: \"setGuestUser\",\n    value:\n    /**\n     * setGuestUser - Setup a temporary guest user\n     *\n     * @param {UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n     *\n     * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n     */\n    function () {\n      var _setGuestUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(user) {\n        var response, _response$user, guestUser;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                this.anonymous = true;\n                _context15.prev = 1;\n                _context15.next = 4;\n                return this.post(this.baseURL + '/guest', {\n                  user: user\n                });\n              case 4:\n                response = _context15.sent;\n                _context15.next = 11;\n                break;\n              case 7:\n                _context15.prev = 7;\n                _context15.t0 = _context15[\"catch\"](1);\n                this.anonymous = false;\n                throw _context15.t0;\n              case 11:\n                this.anonymous = false; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n                _response$user = response.user, _response$user.created_at, _response$user.updated_at, _response$user.last_active, _response$user.online, guestUser = _objectWithoutProperties(_response$user, _excluded$1);\n                _context15.next = 15;\n                return this.connectUser(guestUser, response.access_token);\n              case 15:\n                return _context15.abrupt(\"return\", _context15.sent);\n              case 16:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this, [[1, 7]]);\n      }));\n      function setGuestUser(_x15) {\n        return _setGuestUser.apply(this, arguments);\n      }\n      return setGuestUser;\n    }()\n    /**\n     * createToken - Creates a token to authenticate this user. This function is used server side.\n     * The resulting token should be passed to the client side when the users registers or logs in.\n     *\n     * @param {string} userID The User ID\n     * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n     *\n     * @return {string} Returns a token\n     */\n  }, {\n    key: \"createToken\",\n    value: function createToken(userID, exp, iat) {\n      if (this.secret == null) {\n        throw Error(\"tokens can only be created server-side using the API Secret\");\n      }\n      var extra = {};\n      if (exp) {\n        extra.exp = exp;\n      }\n      if (iat) {\n        extra.iat = iat;\n      }\n      return JWTUserToken(this.secret, userID, extra, {});\n    }\n    /**\n     * on - Listen to events on all channels and users your watching\n     *\n     * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n     * or\n     * client.on(event => {console.log(event.type)})\n     *\n     * @param {EventHandler<StreamChatGenerics> | string} callbackOrString  The event type to listen for (optional)\n     * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call\n     *\n     * @return {{ unsubscribe: () => void }} Description\n     */\n  }, {\n    key: \"on\",\n    value: function on(callbackOrString, callbackOrNothing) {\n      var _this2 = this;\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n      this.logger('info', \"Attaching listener for \".concat(key, \" event\"), {\n        tags: ['event', 'client']\n      });\n      this.listeners[key].push(callback);\n      return {\n        unsubscribe: function unsubscribe() {\n          _this2.logger('info', \"Removing listener for \".concat(key, \" event\"), {\n            tags: ['event', 'client']\n          });\n          _this2.listeners[key] = _this2.listeners[key].filter(function (el) {\n            return el !== callback;\n          });\n        }\n      };\n    }\n    /**\n     * off - Remove the event handler\n     *\n     */\n  }, {\n    key: \"off\",\n    value: function off(callbackOrString, callbackOrNothing) {\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n      this.logger('info', \"Removing listener for \".concat(key, \" event\"), {\n        tags: ['event', 'client']\n      });\n      this.listeners[key] = this.listeners[key].filter(function (value) {\n        return value !== callback;\n      });\n    }\n  }, {\n    key: \"_logApiRequest\",\n    value: function _logApiRequest(type, url, data, config) {\n      this.logger('info', \"client: \".concat(type, \" - Request - \").concat(url), {\n        tags: ['api', 'api_request', 'client'],\n        url: url,\n        payload: data,\n        config: config\n      });\n    }\n  }, {\n    key: \"_logApiResponse\",\n    value: function _logApiResponse(type, url, response) {\n      this.logger('info', \"client:\".concat(type, \" - Response - url: \").concat(url, \" > status \").concat(response.status), {\n        tags: ['api', 'api_response', 'client'],\n        url: url,\n        response: response\n      });\n    }\n  }, {\n    key: \"_logApiError\",\n    value: function _logApiError(type, url, error) {\n      this.logger('error', \"client:\".concat(type, \" - Error - url: \").concat(url), {\n        tags: ['api', 'api_response', 'client'],\n        url: url,\n        error: error\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(url, params) {\n      return this.doAxiosRequest('get', url, null, {\n        params: params\n      });\n    }\n  }, {\n    key: \"put\",\n    value: function put(url, data) {\n      return this.doAxiosRequest('put', url, data);\n    }\n  }, {\n    key: \"post\",\n    value: function post(url, data) {\n      return this.doAxiosRequest('post', url, data);\n    }\n  }, {\n    key: \"patch\",\n    value: function patch(url, data) {\n      return this.doAxiosRequest('patch', url, data);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(url, params) {\n      return this.doAxiosRequest('delete', url, null, {\n        params: params\n      });\n    }\n  }, {\n    key: \"sendFile\",\n    value: function sendFile(url, uri, name, contentType, user) {\n      var data = addFileToFormData(uri, name, contentType || 'multipart/form-data');\n      if (user != null) data.append('user', JSON.stringify(user));\n      return this.doAxiosRequest('postForm', url, data, {\n        headers: data.getHeaders ? data.getHeaders() : {},\n        // node vs browser\n        config: {\n          timeout: 0,\n          maxContentLength: Infinity,\n          maxBodyLength: Infinity\n        }\n      });\n    }\n  }, {\n    key: \"errorFromResponse\",\n    value: function errorFromResponse(response) {\n      var err;\n      err = new ErrorFromResponse(\"StreamChat error HTTP code: \".concat(response.status));\n      if (response.data && response.data.code) {\n        err = new Error(\"StreamChat error code \".concat(response.data.code, \": \").concat(response.data.message));\n        err.code = response.data.code;\n      }\n      err.response = response;\n      err.status = response.status;\n      return err;\n    }\n  }, {\n    key: \"handleResponse\",\n    value: function handleResponse(response) {\n      var data = response.data;\n      if (isErrorResponse(response)) {\n        throw this.errorFromResponse(response);\n      }\n      return data;\n    }\n  }, {\n    key: \"_handleClientEvent\",\n    value: function _handleClientEvent(event) {\n      var _event$me,\n        _event$me2,\n        _this3 = this;\n      var client = this;\n      var postListenerCallbacks = [];\n      this.logger('info', \"client:_handleClientEvent - Received event of type { \".concat(event.type, \" }\"), {\n        tags: ['event', 'client'],\n        event: event\n      });\n      if (event.type === 'user.presence.changed' || event.type === 'user.updated' || event.type === 'user.deleted') {\n        this._handleUserEvent(event);\n      }\n      if (event.type === 'health.check' && event.me) {\n        client.user = event.me;\n        client.state.updateUser(event.me);\n        client.mutedChannels = event.me.channel_mutes;\n        client.mutedUsers = event.me.mutes;\n      }\n      if (event.channel && event.type === 'notification.message_new') {\n        this._addChannelConfig(event.channel);\n      }\n      if (event.type === 'notification.channel_mutes_updated' && (_event$me = event.me) !== null && _event$me !== void 0 && _event$me.channel_mutes) {\n        this.mutedChannels = event.me.channel_mutes;\n      }\n      if (event.type === 'notification.mutes_updated' && (_event$me2 = event.me) !== null && _event$me2 !== void 0 && _event$me2.mutes) {\n        this.mutedUsers = event.me.mutes;\n      }\n      if (event.type === 'notification.mark_read' && event.unread_channels === 0) {\n        var activeChannelKeys = Object.keys(this.activeChannels);\n        activeChannelKeys.forEach(function (activeChannelKey) {\n          return _this3.activeChannels[activeChannelKey].state.unreadCount = 0;\n        });\n      }\n      if ((event.type === 'channel.deleted' || event.type === 'notification.channel_deleted') && event.cid) {\n        var _this$activeChannels$;\n        client.state.deleteAllChannelReference(event.cid);\n        (_this$activeChannels$ = this.activeChannels[event.cid]) === null || _this$activeChannels$ === void 0 ? void 0 : _this$activeChannels$._disconnect();\n        postListenerCallbacks.push(function () {\n          if (!event.cid) return;\n          delete _this3.activeChannels[event.cid];\n        });\n      }\n      return postListenerCallbacks;\n    }\n  }, {\n    key: \"_muteStatus\",\n    value: function _muteStatus(cid) {\n      var muteStatus;\n      for (var i = 0; i < this.mutedChannels.length; i++) {\n        var _mute$channel;\n        var mute = this.mutedChannels[i];\n        if (((_mute$channel = mute.channel) === null || _mute$channel === void 0 ? void 0 : _mute$channel.cid) === cid) {\n          muteStatus = {\n            muted: mute.expires ? new Date(mute.expires).getTime() > new Date().getTime() : true,\n            createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n            expiresAt: mute.expires ? new Date(mute.expires) : null\n          };\n          break;\n        }\n      }\n      if (muteStatus) {\n        return muteStatus;\n      }\n      return {\n        muted: false,\n        createdAt: null,\n        expiresAt: null\n      };\n    }\n  }, {\n    key: \"connect\",\n    value:\n    /**\n     * @private\n     */\n    function () {\n      var _connect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                if (!(!this.userID || !this._user)) {\n                  _context16.next = 2;\n                  break;\n                }\n                throw Error('Call connectUser or connectAnonymousUser before starting the connection');\n              case 2:\n                if (this.wsBaseURL) {\n                  _context16.next = 4;\n                  break;\n                }\n                throw Error('Websocket base url not set');\n              case 4:\n                if (this.clientID) {\n                  _context16.next = 6;\n                  break;\n                }\n                throw Error('clientID is not set');\n              case 6:\n                if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n                  this._sayHi();\n                } // The StableWSConnection handles all the reconnection logic.\n\n                if (this.options.wsConnection && this.node) {\n                  // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n                  this.options.wsConnection.setClient(this);\n                  this.wsConnection = this.options.wsConnection;\n                } else {\n                  this.wsConnection = new StableWSConnection({\n                    client: this\n                  });\n                }\n                _context16.prev = 8;\n                if (!this.wsFallback) {\n                  _context16.next = 13;\n                  break;\n                }\n                _context16.next = 12;\n                return this.wsFallback.connect();\n              case 12:\n                return _context16.abrupt(\"return\", _context16.sent);\n              case 13:\n                _context16.next = 15;\n                return this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);\n              case 15:\n                return _context16.abrupt(\"return\", _context16.sent);\n              case 18:\n                _context16.prev = 18;\n                _context16.t0 = _context16[\"catch\"](8);\n                if (!(this.options.enableWSFallback && isWSFailure(_context16.t0) && isOnline())) {\n                  _context16.next = 29;\n                  break;\n                }\n                this.logger('info', 'client:connect() - WS failed, fallback to longpoll', {\n                  tags: ['connection', 'client']\n                });\n                this.dispatchEvent({\n                  type: 'transport.changed',\n                  mode: 'longpoll'\n                });\n                this.wsConnection._destroyCurrentWSConnection();\n                this.wsConnection.disconnect().then(); // close WS so no retry\n\n                this.wsFallback = new WSConnectionFallback({\n                  client: this\n                });\n                _context16.next = 28;\n                return this.wsFallback.connect();\n              case 28:\n                return _context16.abrupt(\"return\", _context16.sent);\n              case 29:\n                throw _context16.t0;\n              case 30:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[8, 18]]);\n      }));\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n    /**\n     * Check the connectivity with server for warmup purpose.\n     *\n     * @private\n     */\n  }, {\n    key: \"_sayHi\",\n    value: function _sayHi() {\n      var _this4 = this;\n      var client_request_id = randomId();\n      var opts = {\n        headers: {\n          'x-client-request-id': client_request_id\n        }\n      };\n      this.doAxiosRequest('get', this.baseURL + '/hi', null, opts).catch(function (e) {\n        if (_this4.options.enableInsights) {\n          postInsights('http_hi_failed', {\n            api_key: _this4.key,\n            err: e,\n            client_request_id: client_request_id\n          });\n        }\n      });\n    }\n    /**\n     * queryUsers - Query users and watch user presence\n     *\n     * @param {UserFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions\n     * @param {UserSort<StreamChatGenerics>} sort Sort options, for instance [{last_active: -1}].\n     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n     * @param {UserOptions} options Option object, {presence: true}\n     *\n     * @return {Promise<{ users: Array<UserResponse<StreamChatGenerics>> }>} User Query Response\n     */\n  }, {\n    key: \"queryUsers\",\n    value: function () {\n      var _queryUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(filterConditions) {\n        var sort,\n          options,\n          defaultOptions,\n          data,\n          _args17 = arguments;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                sort = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : [];\n                options = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};\n                defaultOptions = {\n                  presence: false\n                }; // Make sure we wait for the connect promise if there is a pending one\n\n                _context17.next = 5;\n                return this.wsPromise;\n              case 5:\n                if (!this._hasConnectionID()) {\n                  defaultOptions.presence = false;\n                } // Return a list of users\n\n                _context17.next = 8;\n                return this.get(this.baseURL + '/users', {\n                  payload: _objectSpread$1(_objectSpread$1({\n                    filter_conditions: filterConditions,\n                    sort: normalizeQuerySort(sort)\n                  }, defaultOptions), options)\n                });\n              case 8:\n                data = _context17.sent;\n                this.state.updateUsers(data.users);\n                return _context17.abrupt(\"return\", data);\n              case 11:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function queryUsers(_x16) {\n        return _queryUsers.apply(this, arguments);\n      }\n      return queryUsers;\n    }()\n    /**\n     * queryBannedUsers - Query user bans\n     *\n     * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions\n     * @param {BannedUsersSort} sort Sort options [{created_at: 1}].\n     * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0, exclude_expired_bans: true}\n     *\n     * @return {Promise<BannedUsersResponse<StreamChatGenerics>>} Ban Query Response\n     */\n  }, {\n    key: \"queryBannedUsers\",\n    value: function () {\n      var _queryBannedUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var filterConditions,\n          sort,\n          options,\n          _args18 = arguments;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                filterConditions = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};\n                sort = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : [];\n                options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};\n                _context18.next = 5;\n                return this.get(this.baseURL + '/query_banned_users', {\n                  payload: _objectSpread$1({\n                    filter_conditions: filterConditions,\n                    sort: normalizeQuerySort(sort)\n                  }, options)\n                });\n              case 5:\n                return _context18.abrupt(\"return\", _context18.sent);\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function queryBannedUsers() {\n        return _queryBannedUsers.apply(this, arguments);\n      }\n      return queryBannedUsers;\n    }()\n    /**\n     * queryMessageFlags - Query message flags\n     *\n     * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions\n     * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n     *\n     * @return {Promise<MessageFlagsResponse<StreamChatGenerics>>} Message Flags Response\n     */\n  }, {\n    key: \"queryMessageFlags\",\n    value: function () {\n      var _queryMessageFlags = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        var filterConditions,\n          options,\n          _args19 = arguments;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                filterConditions = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};\n                options = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};\n                _context19.next = 4;\n                return this.get(this.baseURL + '/moderation/flags/message', {\n                  payload: _objectSpread$1({\n                    filter_conditions: filterConditions\n                  }, options)\n                });\n              case 4:\n                return _context19.abrupt(\"return\", _context19.sent);\n              case 5:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function queryMessageFlags() {\n        return _queryMessageFlags.apply(this, arguments);\n      }\n      return queryMessageFlags;\n    }()\n    /**\n     * queryChannels - Query channels\n     *\n     * @param {ChannelFilters<StreamChatGenerics>} filterConditions object MongoDB style filters\n     * @param {ChannelSort<StreamChatGenerics>} [sort] Sort options, for instance {created_at: -1}.\n     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n     * @param {ChannelOptions} [options] Options object\n     * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.\n     * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.\n     *\n     * @return {Promise<{ channels: Array<ChannelAPIResponse<AStreamChatGenerics>>}> } search channels response\n     */\n  }, {\n    key: \"queryChannels\",\n    value: function () {\n      var _queryChannels = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(filterConditions) {\n        var sort,\n          options,\n          stateOptions,\n          defaultOptions,\n          payload,\n          data,\n          _args20 = arguments;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                sort = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : [];\n                options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};\n                stateOptions = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : {};\n                defaultOptions = {\n                  state: true,\n                  watch: true,\n                  presence: false\n                }; // Make sure we wait for the connect promise if there is a pending one\n\n                _context20.next = 6;\n                return this.wsPromise;\n              case 6:\n                if (!this._hasConnectionID()) {\n                  defaultOptions.watch = false;\n                } // Return a list of channels\n\n                payload = _objectSpread$1(_objectSpread$1({\n                  filter_conditions: filterConditions,\n                  sort: normalizeQuerySort(sort)\n                }, defaultOptions), options);\n                _context20.next = 10;\n                return this.post(this.baseURL + '/channels', payload);\n              case 10:\n                data = _context20.sent;\n                this.dispatchEvent({\n                  type: 'channels.queried',\n                  queriedChannels: {\n                    channels: data.channels,\n                    isLatestMessageSet: true\n                  }\n                });\n                return _context20.abrupt(\"return\", this.hydrateActiveChannels(data.channels, stateOptions, options));\n              case 13:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n      function queryChannels(_x17) {\n        return _queryChannels.apply(this, arguments);\n      }\n      return queryChannels;\n    }()\n    /**\n     * queryReactions - Query reactions\n     *\n     * @param {ReactionFilters<StreamChatGenerics>} filter object MongoDB style filters\n     * @param {ReactionSort<StreamChatGenerics>} [sort] Sort options, for instance {created_at: -1}.\n     * @param {QueryReactionsOptions} [options] Pagination object\n     *\n     * @return {Promise<{ QueryReactionsAPIResponse } search channels response\n     */\n  }, {\n    key: \"queryReactions\",\n    value: function () {\n      var _queryReactions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(messageID, filter) {\n        var sort,\n          options,\n          payload,\n          _args21 = arguments;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                sort = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : [];\n                options = _args21.length > 3 && _args21[3] !== undefined ? _args21[3] : {};\n                _context21.next = 4;\n                return this.wsPromise;\n              case 4:\n                // Return a list of channels\n                payload = _objectSpread$1({\n                  filter: filter,\n                  sort: normalizeQuerySort(sort)\n                }, options);\n                _context21.next = 7;\n                return this.post(this.baseURL + '/messages/' + encodeURIComponent(messageID) + '/reactions', payload);\n              case 7:\n                return _context21.abrupt(\"return\", _context21.sent);\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n      function queryReactions(_x18, _x19) {\n        return _queryReactions.apply(this, arguments);\n      }\n      return queryReactions;\n    }()\n  }, {\n    key: \"hydrateActiveChannels\",\n    value: function hydrateActiveChannels() {\n      var channelsFromApi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var stateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryChannelsOptions = arguments.length > 2 ? arguments[2] : undefined;\n      var skipInitialization = stateOptions.skipInitialization,\n        _stateOptions$offline = stateOptions.offlineMode,\n        offlineMode = _stateOptions$offline === void 0 ? false : _stateOptions$offline;\n      var channels = [];\n      var _iterator2 = _createForOfIteratorHelper(channelsFromApi),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var channelState = _step2.value;\n          this._addChannelConfig(channelState.channel);\n          var c = this.channel(channelState.channel.type, channelState.channel.id);\n          c.data = channelState.channel;\n          c.offlineMode = offlineMode;\n          c.initialized = !offlineMode;\n          c.push_preferences = channelState.push_preferences;\n          var updatedMessagesSet = void 0;\n          if (skipInitialization === undefined) {\n            var _c$_initializeState = c._initializeState(channelState, 'latest'),\n              messageSet = _c$_initializeState.messageSet;\n            updatedMessagesSet = messageSet;\n          } else if (!skipInitialization.includes(channelState.channel.id)) {\n            c.state.clearMessages();\n            var _c$_initializeState2 = c._initializeState(channelState, 'latest'),\n              _messageSet = _c$_initializeState2.messageSet;\n            updatedMessagesSet = _messageSet;\n          }\n          if (updatedMessagesSet) {\n            updatedMessagesSet.pagination = _objectSpread$1(_objectSpread$1({}, updatedMessagesSet.pagination), messageSetPagination({\n              parentSet: updatedMessagesSet,\n              requestedPageSize: (queryChannelsOptions === null || queryChannelsOptions === void 0 ? void 0 : queryChannelsOptions.message_limit) || DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE,\n              returnedPage: channelState.messages,\n              logger: this.logger\n            }));\n            this.polls.hydratePollCache(channelState.messages, true);\n          }\n          channels.push(c);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return channels;\n    }\n    /**\n     * search - Query messages\n     *\n     * @param {ChannelFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions\n     * @param {MessageFilters<StreamChatGenerics> | string} query search query or object MongoDB style filters\n     * @param {SearchOptions<StreamChatGenerics>} [options] Option object, {user_id: 'tommaso'}\n     *\n     * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response\n     */\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(filterConditions, query) {\n        var options,\n          payload,\n          _args22 = arguments;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                options = _args22.length > 2 && _args22[2] !== undefined ? _args22[2] : {};\n                if (!(options.offset && options.next)) {\n                  _context22.next = 3;\n                  break;\n                }\n                throw Error(\"Cannot specify offset with next\");\n              case 3:\n                payload = _objectSpread$1(_objectSpread$1({\n                  filter_conditions: filterConditions\n                }, options), {}, {\n                  sort: options.sort ? normalizeQuerySort(options.sort) : undefined\n                });\n                if (!(typeof query === 'string')) {\n                  _context22.next = 8;\n                  break;\n                }\n                payload.query = query;\n                _context22.next = 13;\n                break;\n              case 8:\n                if (!(_typeof(query) === 'object')) {\n                  _context22.next = 12;\n                  break;\n                }\n                payload.message_filter_conditions = query;\n                _context22.next = 13;\n                break;\n              case 12:\n                throw Error(\"Invalid type \".concat(_typeof(query), \" for query parameter\"));\n              case 13:\n                _context22.next = 15;\n                return this.wsPromise;\n              case 15:\n                _context22.next = 17;\n                return this.get(this.baseURL + '/search', {\n                  payload: payload\n                });\n              case 17:\n                return _context22.abrupt(\"return\", _context22.sent);\n              case 18:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n      function search(_x20, _x21) {\n        return _search.apply(this, arguments);\n      }\n      return search;\n    }()\n    /**\n     * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically\n     *\n     * @param {BaseDeviceFields} device the device object\n     * @param {string} device.id device id\n     * @param {string} device.push_provider the push provider\n     *\n     */\n  }, {\n    key: \"setLocalDevice\",\n    value: function setLocalDevice(device) {\n      var _this$wsConnection5, _this$wsConnection6, _this$wsFallback4;\n      if ((_this$wsConnection5 = this.wsConnection) !== null && _this$wsConnection5 !== void 0 && _this$wsConnection5.isConnecting && this.wsPromise || ((_this$wsConnection6 = this.wsConnection) !== null && _this$wsConnection6 !== void 0 && _this$wsConnection6.isHealthy || (_this$wsFallback4 = this.wsFallback) !== null && _this$wsFallback4 !== void 0 && _this$wsFallback4.isHealthy()) && this._hasConnectionID()) {\n        throw new Error('you can only set device before opening a websocket connection');\n      }\n      this.options.device = device;\n    }\n    /**\n     * addDevice - Adds a push device for a user.\n     *\n     * @param {string} id the device id\n     * @param {PushProvider} push_provider the push provider\n     * @param {string} [userID] the user id (defaults to current user)\n     * @param {string} [push_provider_name] user provided push provider name for multi bundle support\n     *\n     */\n  }, {\n    key: \"addDevice\",\n    value: function () {\n      var _addDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(id, push_provider, userID, push_provider_name) {\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this.post(this.baseURL + '/devices', _objectSpread$1(_objectSpread$1({\n                  id: id,\n                  push_provider: push_provider\n                }, userID != null ? {\n                  user_id: userID\n                } : {}), push_provider_name != null ? {\n                  push_provider_name: push_provider_name\n                } : {}));\n              case 2:\n                return _context23.abrupt(\"return\", _context23.sent);\n              case 3:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n      function addDevice(_x22, _x23, _x24, _x25) {\n        return _addDevice.apply(this, arguments);\n      }\n      return addDevice;\n    }()\n    /**\n     * getDevices - Returns the devices associated with a current user\n     *\n     * @param {string} [userID] User ID. Only works on serverside\n     *\n     * @return {Device<StreamChatGenerics>[]} Array of devices\n     */\n  }, {\n    key: \"getDevices\",\n    value: function () {\n      var _getDevices = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(userID) {\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.get(this.baseURL + '/devices', userID ? {\n                  user_id: userID\n                } : {});\n              case 2:\n                return _context24.abrupt(\"return\", _context24.sent);\n              case 3:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n      function getDevices(_x26) {\n        return _getDevices.apply(this, arguments);\n      }\n      return getDevices;\n    }()\n    /**\n     * getUnreadCount - Returns unread counts for a single user\n     *\n     * @param {string} [userID] User ID.\n     *\n     * @return {<GetUnreadCountAPIResponse>}\n     */\n  }, {\n    key: \"getUnreadCount\",\n    value: function () {\n      var _getUnreadCount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(userID) {\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return this.get(this.baseURL + '/unread', userID ? {\n                  user_id: userID\n                } : {});\n              case 2:\n                return _context25.abrupt(\"return\", _context25.sent);\n              case 3:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n      function getUnreadCount(_x27) {\n        return _getUnreadCount.apply(this, arguments);\n      }\n      return getUnreadCount;\n    }()\n    /**\n     * getUnreadCountBatch - Returns unread counts for multiple users at once. Only works server side.\n     *\n     * @param {string[]} [userIDs] List of user IDs to fetch unread counts for.\n     *\n     * @return {<GetUnreadCountBatchAPIResponse>}\n     */\n  }, {\n    key: \"getUnreadCountBatch\",\n    value: function () {\n      var _getUnreadCountBatch = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(userIDs) {\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return this.post(this.baseURL + '/unread_batch', {\n                  user_ids: userIDs\n                });\n              case 2:\n                return _context26.abrupt(\"return\", _context26.sent);\n              case 3:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n      function getUnreadCountBatch(_x28) {\n        return _getUnreadCountBatch.apply(this, arguments);\n      }\n      return getUnreadCountBatch;\n    }()\n    /**\n     * setPushPreferences - Applies the list of push preferences.\n     *\n     * @param {PushPreference[]} A list of push preferences.\n     *\n     * @return {<UpsertPushPreferencesResponse>}\n     */\n  }, {\n    key: \"setPushPreferences\",\n    value: function () {\n      var _setPushPreferences = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(preferences) {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return this.post(this.baseURL + '/push_preferences', {\n                  preferences: preferences\n                });\n              case 2:\n                return _context27.abrupt(\"return\", _context27.sent);\n              case 3:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n      function setPushPreferences(_x29) {\n        return _setPushPreferences.apply(this, arguments);\n      }\n      return setPushPreferences;\n    }()\n    /**\n     * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n     *\n     * @param {string} id The device id\n     * @param {string} [userID] The user id. Only specify this for serverside requests\n     *\n     */\n  }, {\n    key: \"removeDevice\",\n    value: function () {\n      var _removeDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(id, userID) {\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return this.delete(this.baseURL + '/devices', _objectSpread$1({\n                  id: id\n                }, userID ? {\n                  user_id: userID\n                } : {}));\n              case 2:\n                return _context28.abrupt(\"return\", _context28.sent);\n              case 3:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n      function removeDevice(_x30, _x31) {\n        return _removeDevice.apply(this, arguments);\n      }\n      return removeDevice;\n    }()\n    /**\n     * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.\n     * Only available server-side.\n     *\n     * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.\n     * @returns {Promise<GetRateLimitsResponse>}\n     */\n  }, {\n    key: \"getRateLimits\",\n    value: function () {\n      var _getRateLimits = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(params) {\n        var _ref8, serverSide, web, android, ios, endpoints;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _ref8 = params || {}, serverSide = _ref8.serverSide, web = _ref8.web, android = _ref8.android, ios = _ref8.ios, endpoints = _ref8.endpoints;\n                return _context29.abrupt(\"return\", this.get(this.baseURL + '/rate_limits', {\n                  server_side: serverSide,\n                  web: web,\n                  android: android,\n                  ios: ios,\n                  endpoints: endpoints ? endpoints.join(',') : undefined\n                }));\n              case 2:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n      function getRateLimits(_x32) {\n        return _getRateLimits.apply(this, arguments);\n      }\n      return getRateLimits;\n    }()\n  }, {\n    key: \"_addChannelConfig\",\n    value: function _addChannelConfig(_ref9) {\n      var cid = _ref9.cid,\n        config = _ref9.config;\n      if (this._cacheEnabled()) {\n        this.configs[cid] = config;\n      }\n    }\n    /**\n     * channel - Returns a new channel with the given type, id and custom data\n     *\n     * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.\n     * Make sure to await channel.create() or channel.watch() before accessing channel functions:\n     * ie. channel = client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n     * await channel.create() to assign an ID to channel\n     *\n     * @param {string} channelType The channel type\n     * @param {string | ChannelData<StreamChatGenerics> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel\n     * @param {object} [custom]    Custom data to attach to the channel\n     *\n     * @return {channel} The channel object, initialize it using channel.watch()\n     */\n  }, {\n    key: \"channel\",\n    value: function channel(channelType, channelIDOrCustom) {\n      var _custom$members2;\n      var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (!this.userID && !this._isUsingServerAuth()) {\n        throw Error('Call connectUser or connectAnonymousUser before creating a channel');\n      }\n      if (~channelType.indexOf(':')) {\n        throw Error(\"Invalid channel group \".concat(channelType, \", can't contain the : character\"));\n      } // support channel(\"messaging\", {options})\n\n      if (channelIDOrCustom && _typeof(channelIDOrCustom) === 'object') {\n        return this.getChannelByMembers(channelType, channelIDOrCustom);\n      } // // support channel(\"messaging\", undefined, {options})\n\n      if (!channelIDOrCustom && _typeof(custom) === 'object' && (_custom$members2 = custom.members) !== null && _custom$members2 !== void 0 && _custom$members2.length) {\n        return this.getChannelByMembers(channelType, custom);\n      } // support channel(\"messaging\", null, {options})\n      // support channel(\"messaging\", undefined, {options})\n      // support channel(\"messaging\", \"\", {options})\n\n      if (!channelIDOrCustom) {\n        return new Channel(this, channelType, undefined, custom);\n      }\n      return this.getChannelById(channelType, channelIDOrCustom, custom);\n    }\n    /**\n     * It's a helper method for `client.channel()` method, used to create unique conversation or\n     * channel based on member list instead of id.\n     *\n     * If the channel already exists in `activeChannels` list, then we simply return it, since that\n     * means the same channel was already requested or created.\n     *\n     * Otherwise we create a new instance of Channel class and return it.\n     *\n     * @private\n     *\n     * @param {string} channelType The channel type\n     * @param {object} [custom]    Custom data to attach to the channel\n     *\n     * @return {channel} The channel object, initialize it using channel.watch()\n     */\n  }, {\n    key: \"partialUpdateUser\",\n    value:\n    /**\n     * partialUpdateUser - Update the given user object\n     *\n     * @param {PartialUserUpdate<StreamChatGenerics>} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n     * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n     *\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>} list of updated users\n     */\n    function () {\n      var _partialUpdateUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(partialUserObject) {\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                _context30.next = 2;\n                return this.partialUpdateUsers([partialUserObject]);\n              case 2:\n                return _context30.abrupt(\"return\", _context30.sent);\n              case 3:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n      function partialUpdateUser(_x33) {\n        return _partialUpdateUser.apply(this, arguments);\n      }\n      return partialUpdateUser;\n    }()\n    /**\n     * upsertUsers - Batch upsert the list of users\n     *\n     * @param {UserResponse<StreamChatGenerics>[]} users list of users\n     *\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n     */\n  }, {\n    key: \"upsertUsers\",\n    value: function () {\n      var _upsertUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31(users) {\n        var userMap, _iterator3, _step3, userObject;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                userMap = {};\n                _iterator3 = _createForOfIteratorHelper(users);\n                _context31.prev = 2;\n                _iterator3.s();\n              case 4:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context31.next = 11;\n                  break;\n                }\n                userObject = _step3.value;\n                if (userObject.id) {\n                  _context31.next = 8;\n                  break;\n                }\n                throw Error('User ID is required when updating a user');\n              case 8:\n                userMap[userObject.id] = userObject;\n              case 9:\n                _context31.next = 4;\n                break;\n              case 11:\n                _context31.next = 16;\n                break;\n              case 13:\n                _context31.prev = 13;\n                _context31.t0 = _context31[\"catch\"](2);\n                _iterator3.e(_context31.t0);\n              case 16:\n                _context31.prev = 16;\n                _iterator3.f();\n                return _context31.finish(16);\n              case 19:\n                _context31.next = 21;\n                return this.post(this.baseURL + '/users', {\n                  users: userMap\n                });\n              case 21:\n                return _context31.abrupt(\"return\", _context31.sent);\n              case 22:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this, [[2, 13, 16, 19]]);\n      }));\n      function upsertUsers(_x34) {\n        return _upsertUsers.apply(this, arguments);\n      }\n      return upsertUsers;\n    }()\n    /**\n     * @deprecated Please use upsertUsers() function instead.\n     *\n     * updateUsers - Batch update the list of users\n     *\n     * @param {UserResponse<StreamChatGenerics>[]} users list of users\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n     */\n  }, {\n    key: \"upsertUser\",\n    value:\n    /**\n     * upsertUser - Update or Create the given user object\n     *\n     * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n     *\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n     */\n    function upsertUser(userObject) {\n      return this.upsertUsers([userObject]);\n    }\n    /**\n     * @deprecated Please use upsertUser() function instead.\n     *\n     * updateUser - Update or Create the given user object\n     *\n     * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n     */\n  }, {\n    key: \"partialUpdateUsers\",\n    value:\n    /**\n     * partialUpdateUsers - Batch partial update of users\n     *\n     * @param {PartialUserUpdate<StreamChatGenerics>[]} users list of partial update requests\n     *\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n     */\n    function () {\n      var _partialUpdateUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(users) {\n        var _iterator4, _step4, userObject;\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _iterator4 = _createForOfIteratorHelper(users);\n                _context32.prev = 1;\n                _iterator4.s();\n              case 3:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context32.next = 9;\n                  break;\n                }\n                userObject = _step4.value;\n                if (userObject.id) {\n                  _context32.next = 7;\n                  break;\n                }\n                throw Error('User ID is required when updating a user');\n              case 7:\n                _context32.next = 3;\n                break;\n              case 9:\n                _context32.next = 14;\n                break;\n              case 11:\n                _context32.prev = 11;\n                _context32.t0 = _context32[\"catch\"](1);\n                _iterator4.e(_context32.t0);\n              case 14:\n                _context32.prev = 14;\n                _iterator4.f();\n                return _context32.finish(14);\n              case 17:\n                _context32.next = 19;\n                return this.patch(this.baseURL + '/users', {\n                  users: users\n                });\n              case 19:\n                return _context32.abrupt(\"return\", _context32.sent);\n              case 20:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this, [[1, 11, 14, 17]]);\n      }));\n      function partialUpdateUsers(_x35) {\n        return _partialUpdateUsers.apply(this, arguments);\n      }\n      return partialUpdateUsers;\n    }()\n  }, {\n    key: \"deleteUser\",\n    value: function () {\n      var _deleteUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(userID, params) {\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                _context33.next = 2;\n                return this.delete(this.baseURL + \"/users/\".concat(encodeURIComponent(userID)), params);\n              case 2:\n                return _context33.abrupt(\"return\", _context33.sent);\n              case 3:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n      function deleteUser(_x36, _x37) {\n        return _deleteUser.apply(this, arguments);\n      }\n      return deleteUser;\n    }()\n    /**\n     * restoreUsers - Restore soft deleted users\n     *\n     * @param {string[]} user_ids which users to restore\n     *\n     * @return {APIResponse} An API response\n     */\n  }, {\n    key: \"restoreUsers\",\n    value: function () {\n      var _restoreUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(user_ids) {\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                _context34.next = 2;\n                return this.post(this.baseURL + \"/users/restore\", {\n                  user_ids: user_ids\n                });\n              case 2:\n                return _context34.abrupt(\"return\", _context34.sent);\n              case 3:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n      function restoreUsers(_x38) {\n        return _restoreUsers.apply(this, arguments);\n      }\n      return restoreUsers;\n    }()\n    /**\n     * reactivateUser - Reactivate one user\n     *\n     * @param {string} userID which user to reactivate\n     * @param {ReactivateUserOptions} [options]\n     *\n     * @return {UserResponse} Reactivated user\n     */\n  }, {\n    key: \"reactivateUser\",\n    value: function () {\n      var _reactivateUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35(userID, options) {\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                _context35.next = 2;\n                return this.post(this.baseURL + \"/users/\".concat(encodeURIComponent(userID), \"/reactivate\"), _objectSpread$1({}, options));\n              case 2:\n                return _context35.abrupt(\"return\", _context35.sent);\n              case 3:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n      function reactivateUser(_x39, _x40) {\n        return _reactivateUser.apply(this, arguments);\n      }\n      return reactivateUser;\n    }()\n    /**\n     * reactivateUsers - Reactivate many users asynchronously\n     *\n     * @param {string[]} user_ids which users to reactivate\n     * @param {ReactivateUsersOptions} [options]\n     *\n     * @return {TaskResponse} A task ID\n     */\n  }, {\n    key: \"reactivateUsers\",\n    value: function () {\n      var _reactivateUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(user_ids, options) {\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                _context36.next = 2;\n                return this.post(this.baseURL + \"/users/reactivate\", _objectSpread$1({\n                  user_ids: user_ids\n                }, options));\n              case 2:\n                return _context36.abrupt(\"return\", _context36.sent);\n              case 3:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n      function reactivateUsers(_x41, _x42) {\n        return _reactivateUsers.apply(this, arguments);\n      }\n      return reactivateUsers;\n    }()\n    /**\n     * deactivateUser - Deactivate one user\n     *\n     * @param {string} userID which user to deactivate\n     * @param {DeactivateUsersOptions} [options]\n     *\n     * @return {UserResponse} Deactivated user\n     */\n  }, {\n    key: \"deactivateUser\",\n    value: function () {\n      var _deactivateUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee37(userID, options) {\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                _context37.next = 2;\n                return this.post(this.baseURL + \"/users/\".concat(encodeURIComponent(userID), \"/deactivate\"), _objectSpread$1({}, options));\n              case 2:\n                return _context37.abrupt(\"return\", _context37.sent);\n              case 3:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n      function deactivateUser(_x43, _x44) {\n        return _deactivateUser.apply(this, arguments);\n      }\n      return deactivateUser;\n    }()\n    /**\n     * deactivateUsers - Deactivate many users asynchronously\n     *\n     * @param {string[]} user_ids which users to deactivate\n     * @param {DeactivateUsersOptions} [options]\n     *\n     * @return {TaskResponse} A task ID\n     */\n  }, {\n    key: \"deactivateUsers\",\n    value: function () {\n      var _deactivateUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee38(user_ids, options) {\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                _context38.next = 2;\n                return this.post(this.baseURL + \"/users/deactivate\", _objectSpread$1({\n                  user_ids: user_ids\n                }, options));\n              case 2:\n                return _context38.abrupt(\"return\", _context38.sent);\n              case 3:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n      function deactivateUsers(_x45, _x46) {\n        return _deactivateUsers.apply(this, arguments);\n      }\n      return deactivateUsers;\n    }()\n  }, {\n    key: \"exportUser\",\n    value: function () {\n      var _exportUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee39(userID, options) {\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                _context39.next = 2;\n                return this.get(this.baseURL + \"/users/\".concat(encodeURIComponent(userID), \"/export\"), _objectSpread$1({}, options));\n              case 2:\n                return _context39.abrupt(\"return\", _context39.sent);\n              case 3:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n      function exportUser(_x47, _x48) {\n        return _exportUser.apply(this, arguments);\n      }\n      return exportUser;\n    }()\n    /** banUser - bans a user from all channels\n     *\n     * @param {string} targetUserID\n     * @param {BanUserOptions<StreamChatGenerics>} [options]\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"banUser\",\n    value: function () {\n      var _banUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee40(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                _context40.next = 2;\n                return this.post(this.baseURL + '/moderation/ban', _objectSpread$1({\n                  target_user_id: targetUserID\n                }, options));\n              case 2:\n                return _context40.abrupt(\"return\", _context40.sent);\n              case 3:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n      function banUser(_x49, _x50) {\n        return _banUser.apply(this, arguments);\n      }\n      return banUser;\n    }()\n    /** unbanUser - revoke global ban for a user\n     *\n     * @param {string} targetUserID\n     * @param {UnBanUserOptions} [options]\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unbanUser\",\n    value: function () {\n      var _unbanUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee41(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                _context41.next = 2;\n                return this.delete(this.baseURL + '/moderation/ban', _objectSpread$1({\n                  target_user_id: targetUserID\n                }, options));\n              case 2:\n                return _context41.abrupt(\"return\", _context41.sent);\n              case 3:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n      function unbanUser(_x51, _x52) {\n        return _unbanUser.apply(this, arguments);\n      }\n      return unbanUser;\n    }()\n    /** shadowBan - shadow bans a user from all channels\n     *\n     * @param {string} targetUserID\n     * @param {BanUserOptions<StreamChatGenerics>} [options]\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"shadowBan\",\n    value: function () {\n      var _shadowBan = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee42(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                _context42.next = 2;\n                return this.banUser(targetUserID, _objectSpread$1({\n                  shadow: true\n                }, options));\n              case 2:\n                return _context42.abrupt(\"return\", _context42.sent);\n              case 3:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n      function shadowBan(_x53, _x54) {\n        return _shadowBan.apply(this, arguments);\n      }\n      return shadowBan;\n    }()\n    /** removeShadowBan - revoke global shadow ban for a user\n     *\n     * @param {string} targetUserID\n     * @param {UnBanUserOptions} [options]\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"removeShadowBan\",\n    value: function () {\n      var _removeShadowBan = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee43(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                _context43.next = 2;\n                return this.unbanUser(targetUserID, _objectSpread$1({\n                  shadow: true\n                }, options));\n              case 2:\n                return _context43.abrupt(\"return\", _context43.sent);\n              case 3:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n      function removeShadowBan(_x55, _x56) {\n        return _removeShadowBan.apply(this, arguments);\n      }\n      return removeShadowBan;\n    }()\n  }, {\n    key: \"blockUser\",\n    value: function () {\n      var _blockUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee44(blockedUserID, user_id) {\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                _context44.next = 2;\n                return this.post(this.baseURL + '/users/block', _objectSpread$1({\n                  blocked_user_id: blockedUserID\n                }, user_id ? {\n                  user_id: user_id\n                } : {}));\n              case 2:\n                return _context44.abrupt(\"return\", _context44.sent);\n              case 3:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n      function blockUser(_x57, _x58) {\n        return _blockUser.apply(this, arguments);\n      }\n      return blockUser;\n    }()\n  }, {\n    key: \"getBlockedUsers\",\n    value: function () {\n      var _getBlockedUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee45(user_id) {\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                _context45.next = 2;\n                return this.get(this.baseURL + '/users/block', _objectSpread$1({}, user_id ? {\n                  user_id: user_id\n                } : {}));\n              case 2:\n                return _context45.abrupt(\"return\", _context45.sent);\n              case 3:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n      function getBlockedUsers(_x59) {\n        return _getBlockedUsers.apply(this, arguments);\n      }\n      return getBlockedUsers;\n    }()\n  }, {\n    key: \"unBlockUser\",\n    value: function () {\n      var _unBlockUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee46(blockedUserID, userID) {\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                _context46.next = 2;\n                return this.post(this.baseURL + '/users/unblock', _objectSpread$1({\n                  blocked_user_id: blockedUserID\n                }, userID ? {\n                  user_id: userID\n                } : {}));\n              case 2:\n                return _context46.abrupt(\"return\", _context46.sent);\n              case 3:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n      function unBlockUser(_x60, _x61) {\n        return _unBlockUser.apply(this, arguments);\n      }\n      return unBlockUser;\n    }()\n    /** muteUser - mutes a user\n     *\n     * @param {string} targetID\n     * @param {string} [userID] Only used with serverside auth\n     * @param {MuteUserOptions<StreamChatGenerics>} [options]\n     * @returns {Promise<MuteUserResponse<StreamChatGenerics>>}\n     */\n  }, {\n    key: \"muteUser\",\n    value: function () {\n      var _muteUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee47(targetID, userID) {\n        var options,\n          _args47 = arguments;\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                options = _args47.length > 2 && _args47[2] !== undefined ? _args47[2] : {};\n                _context47.next = 3;\n                return this.post(this.baseURL + '/moderation/mute', _objectSpread$1(_objectSpread$1({\n                  target_id: targetID\n                }, userID ? {\n                  user_id: userID\n                } : {}), options));\n              case 3:\n                return _context47.abrupt(\"return\", _context47.sent);\n              case 4:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n      function muteUser(_x62, _x63) {\n        return _muteUser.apply(this, arguments);\n      }\n      return muteUser;\n    }()\n    /** unmuteUser - unmutes a user\n     *\n     * @param {string} targetID\n     * @param {string} [currentUserID] Only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unmuteUser\",\n    value: function () {\n      var _unmuteUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee48(targetID, currentUserID) {\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                _context48.next = 2;\n                return this.post(this.baseURL + '/moderation/unmute', _objectSpread$1({\n                  target_id: targetID\n                }, currentUserID ? {\n                  user_id: currentUserID\n                } : {}));\n              case 2:\n                return _context48.abrupt(\"return\", _context48.sent);\n              case 3:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this);\n      }));\n      function unmuteUser(_x64, _x65) {\n        return _unmuteUser.apply(this, arguments);\n      }\n      return unmuteUser;\n    }()\n    /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called\n     *\n     * @param {string} targetID\n     * @returns {boolean}\n     */\n  }, {\n    key: \"userMuteStatus\",\n    value: function userMuteStatus(targetID) {\n      if (!this.user || !this.wsPromise) {\n        throw new Error('Make sure to await connectUser() first.');\n      }\n      for (var i = 0; i < this.mutedUsers.length; i += 1) {\n        if (this.mutedUsers[i].target.id === targetID) return true;\n      }\n      return false;\n    }\n    /**\n     * flagMessage - flag a message\n     * @param {string} targetMessageID\n     * @param {string} [options.user_id] currentUserID, only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"flagMessage\",\n    value: function () {\n      var _flagMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee49(targetMessageID) {\n        var options,\n          _args49 = arguments;\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                options = _args49.length > 1 && _args49[1] !== undefined ? _args49[1] : {};\n                _context49.next = 3;\n                return this.post(this.baseURL + '/moderation/flag', _objectSpread$1({\n                  target_message_id: targetMessageID\n                }, options));\n              case 3:\n                return _context49.abrupt(\"return\", _context49.sent);\n              case 4:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this);\n      }));\n      function flagMessage(_x66) {\n        return _flagMessage.apply(this, arguments);\n      }\n      return flagMessage;\n    }()\n    /**\n     * flagUser - flag a user\n     * @param {string} targetID\n     * @param {string} [options.user_id] currentUserID, only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"flagUser\",\n    value: function () {\n      var _flagUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee50(targetID) {\n        var options,\n          _args50 = arguments;\n        return _regeneratorRuntime.wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n                options = _args50.length > 1 && _args50[1] !== undefined ? _args50[1] : {};\n                _context50.next = 3;\n                return this.post(this.baseURL + '/moderation/flag', _objectSpread$1({\n                  target_user_id: targetID\n                }, options));\n              case 3:\n                return _context50.abrupt(\"return\", _context50.sent);\n              case 4:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n        }, _callee50, this);\n      }));\n      function flagUser(_x67) {\n        return _flagUser.apply(this, arguments);\n      }\n      return flagUser;\n    }()\n    /**\n     * unflagMessage - unflag a message\n     * @param {string} targetMessageID\n     * @param {string} [options.user_id] currentUserID, only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unflagMessage\",\n    value: function () {\n      var _unflagMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee51(targetMessageID) {\n        var options,\n          _args51 = arguments;\n        return _regeneratorRuntime.wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n                options = _args51.length > 1 && _args51[1] !== undefined ? _args51[1] : {};\n                _context51.next = 3;\n                return this.post(this.baseURL + '/moderation/unflag', _objectSpread$1({\n                  target_message_id: targetMessageID\n                }, options));\n              case 3:\n                return _context51.abrupt(\"return\", _context51.sent);\n              case 4:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51, this);\n      }));\n      function unflagMessage(_x68) {\n        return _unflagMessage.apply(this, arguments);\n      }\n      return unflagMessage;\n    }()\n    /**\n     * unflagUser - unflag a user\n     * @param {string} targetID\n     * @param {string} [options.user_id] currentUserID, only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unflagUser\",\n    value: function () {\n      var _unflagUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee52(targetID) {\n        var options,\n          _args52 = arguments;\n        return _regeneratorRuntime.wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n                options = _args52.length > 1 && _args52[1] !== undefined ? _args52[1] : {};\n                _context52.next = 3;\n                return this.post(this.baseURL + '/moderation/unflag', _objectSpread$1({\n                  target_user_id: targetID\n                }, options));\n              case 3:\n                return _context52.abrupt(\"return\", _context52.sent);\n              case 4:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52, this);\n      }));\n      function unflagUser(_x69) {\n        return _unflagUser.apply(this, arguments);\n      }\n      return unflagUser;\n    }()\n    /**\n     * getCallToken - retrieves the auth token needed to join a call\n     *\n     * @param {string} callID\n     * @param {object} options\n     * @returns {Promise<GetCallTokenResponse>}\n     */\n  }, {\n    key: \"getCallToken\",\n    value: function () {\n      var _getCallToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee53(callID) {\n        var options,\n          _args53 = arguments;\n        return _regeneratorRuntime.wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n                options = _args53.length > 1 && _args53[1] !== undefined ? _args53[1] : {};\n                _context53.next = 3;\n                return this.post(this.baseURL + \"/calls/\".concat(encodeURIComponent(callID)), _objectSpread$1({}, options));\n              case 3:\n                return _context53.abrupt(\"return\", _context53.sent);\n              case 4:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n        }, _callee53, this);\n      }));\n      function getCallToken(_x70) {\n        return _getCallToken.apply(this, arguments);\n      }\n      return getCallToken;\n    }()\n    /**\n     * _queryFlags - Query flags.\n     *\n     * Note: Do not use this.\n     * It is present for internal usage only.\n     * This function can, and will, break and/or be removed at any point in time.\n     *\n     * @private\n     * @param {FlagsFilters} filterConditions MongoDB style filter conditions\n     * @param {FlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n     *\n     * @return {Promise<FlagsResponse<StreamChatGenerics>>} Flags Response\n     */\n  }, {\n    key: \"_queryFlags\",\n    value: function () {\n      var _queryFlags2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee54() {\n        var filterConditions,\n          options,\n          _args54 = arguments;\n        return _regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                filterConditions = _args54.length > 0 && _args54[0] !== undefined ? _args54[0] : {};\n                options = _args54.length > 1 && _args54[1] !== undefined ? _args54[1] : {};\n                _context54.next = 4;\n                return this.post(this.baseURL + '/moderation/flags', _objectSpread$1({\n                  filter_conditions: filterConditions\n                }, options));\n              case 4:\n                return _context54.abrupt(\"return\", _context54.sent);\n              case 5:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54, this);\n      }));\n      function _queryFlags() {\n        return _queryFlags2.apply(this, arguments);\n      }\n      return _queryFlags;\n    }()\n    /**\n     * _queryFlagReports - Query flag reports.\n     *\n     * Note: Do not use this.\n     * It is present for internal usage only.\n     * This function can, and will, break and/or be removed at any point in time.\n     *\n     * @private\n     * @param {FlagReportsFilters} filterConditions MongoDB style filter conditions\n     * @param {FlagReportsPaginationOptions} options Option object, {limit: 10, offset:0}\n     *\n     * @return {Promise<FlagReportsResponse<StreamChatGenerics>>} Flag Reports Response\n     */\n  }, {\n    key: \"_queryFlagReports\",\n    value: function () {\n      var _queryFlagReports2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee55() {\n        var filterConditions,\n          options,\n          _args55 = arguments;\n        return _regeneratorRuntime.wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n                filterConditions = _args55.length > 0 && _args55[0] !== undefined ? _args55[0] : {};\n                options = _args55.length > 1 && _args55[1] !== undefined ? _args55[1] : {};\n                _context55.next = 4;\n                return this.post(this.baseURL + '/moderation/reports', _objectSpread$1({\n                  filter_conditions: filterConditions\n                }, options));\n              case 4:\n                return _context55.abrupt(\"return\", _context55.sent);\n              case 5:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55, this);\n      }));\n      function _queryFlagReports() {\n        return _queryFlagReports2.apply(this, arguments);\n      }\n      return _queryFlagReports;\n    }()\n    /**\n     * _reviewFlagReport - review flag report\n     *\n     * Note: Do not use this.\n     * It is present for internal usage only.\n     * This function can, and will, break and/or be removed at any point in time.\n     *\n     * @private\n     * @param {string} [id] flag report to review\n     * @param {string} [reviewResult] flag report review result\n     * @param {string} [options.user_id] currentUserID, only used with serverside auth\n     * @param {string} [options.review_details] custom information about review result\n     * @returns {Promise<ReviewFlagReportResponse>>}\n     */\n  }, {\n    key: \"_reviewFlagReport\",\n    value: function () {\n      var _reviewFlagReport2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee56(id, reviewResult) {\n        var options,\n          _args56 = arguments;\n        return _regeneratorRuntime.wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n                options = _args56.length > 2 && _args56[2] !== undefined ? _args56[2] : {};\n                _context56.next = 3;\n                return this.patch(this.baseURL + \"/moderation/reports/\".concat(encodeURIComponent(id)), _objectSpread$1({\n                  review_result: reviewResult\n                }, options));\n              case 3:\n                return _context56.abrupt(\"return\", _context56.sent);\n              case 4:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n        }, _callee56, this);\n      }));\n      function _reviewFlagReport(_x71, _x72) {\n        return _reviewFlagReport2.apply(this, arguments);\n      }\n      return _reviewFlagReport;\n    }()\n    /**\n     * unblockMessage - unblocks message blocked by automod\n     *\n     *\n     * @param {string} targetMessageID\n     * @param {string} [options.user_id] currentUserID, only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unblockMessage\",\n    value: function () {\n      var _unblockMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee57(targetMessageID) {\n        var options,\n          _args57 = arguments;\n        return _regeneratorRuntime.wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                options = _args57.length > 1 && _args57[1] !== undefined ? _args57[1] : {};\n                _context57.next = 3;\n                return this.post(this.baseURL + '/moderation/unblock_message', _objectSpread$1({\n                  target_message_id: targetMessageID\n                }, options));\n              case 3:\n                return _context57.abrupt(\"return\", _context57.sent);\n              case 4:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57, this);\n      }));\n      function unblockMessage(_x73) {\n        return _unblockMessage.apply(this, arguments);\n      }\n      return unblockMessage;\n    }() // alias for backwards compatibility\n  }, {\n    key: \"markChannelsRead\",\n    value:\n    /**\n     * markChannelsRead - marks channels read -\n     * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read\n     *\n     * @param {MarkChannelsReadOptions <StreamChatGenerics>} [data]\n     *\n     * @return {Promise<APIResponse>}\n     */\n    function () {\n      var _markChannelsRead = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee58() {\n        var data,\n          _args58 = arguments;\n        return _regeneratorRuntime.wrap(function _callee58$(_context58) {\n          while (1) {\n            switch (_context58.prev = _context58.next) {\n              case 0:\n                data = _args58.length > 0 && _args58[0] !== undefined ? _args58[0] : {};\n                _context58.next = 3;\n                return this.post(this.baseURL + '/channels/read', _objectSpread$1({}, data));\n              case 3:\n              case \"end\":\n                return _context58.stop();\n            }\n          }\n        }, _callee58, this);\n      }));\n      function markChannelsRead() {\n        return _markChannelsRead.apply(this, arguments);\n      }\n      return markChannelsRead;\n    }()\n  }, {\n    key: \"createCommand\",\n    value: function createCommand(data) {\n      return this.post(this.baseURL + '/commands', data);\n    }\n  }, {\n    key: \"getCommand\",\n    value: function getCommand(name) {\n      return this.get(this.baseURL + \"/commands/\".concat(encodeURIComponent(name)));\n    }\n  }, {\n    key: \"updateCommand\",\n    value: function updateCommand(name, data) {\n      return this.put(this.baseURL + \"/commands/\".concat(encodeURIComponent(name)), data);\n    }\n  }, {\n    key: \"deleteCommand\",\n    value: function deleteCommand(name) {\n      return this.delete(this.baseURL + \"/commands/\".concat(encodeURIComponent(name)));\n    }\n  }, {\n    key: \"listCommands\",\n    value: function listCommands() {\n      return this.get(this.baseURL + \"/commands\");\n    }\n  }, {\n    key: \"createChannelType\",\n    value: function createChannelType(data) {\n      var channelData = _extends({}, {\n        commands: ['all']\n      }, data);\n      return this.post(this.baseURL + '/channeltypes', channelData);\n    }\n  }, {\n    key: \"getChannelType\",\n    value: function getChannelType(channelType) {\n      return this.get(this.baseURL + \"/channeltypes/\".concat(encodeURIComponent(channelType)));\n    }\n  }, {\n    key: \"updateChannelType\",\n    value: function updateChannelType(channelType, data) {\n      return this.put(this.baseURL + \"/channeltypes/\".concat(encodeURIComponent(channelType)), data);\n    }\n  }, {\n    key: \"deleteChannelType\",\n    value: function deleteChannelType(channelType) {\n      return this.delete(this.baseURL + \"/channeltypes/\".concat(encodeURIComponent(channelType)));\n    }\n  }, {\n    key: \"listChannelTypes\",\n    value: function listChannelTypes() {\n      return this.get(this.baseURL + \"/channeltypes\");\n    }\n    /**\n     * translateMessage - adds the translation to the message\n     *\n     * @param {string} messageId\n     * @param {string} language\n     *\n     * @return {MessageResponse<StreamChatGenerics>} Response that includes the message\n     */\n  }, {\n    key: \"translateMessage\",\n    value: function () {\n      var _translateMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee59(messageId, language) {\n        return _regeneratorRuntime.wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n                _context59.next = 2;\n                return this.post(this.baseURL + \"/messages/\".concat(encodeURIComponent(messageId), \"/translate\"), {\n                  language: language\n                });\n              case 2:\n                return _context59.abrupt(\"return\", _context59.sent);\n              case 3:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee59, this);\n      }));\n      function translateMessage(_x74, _x75) {\n        return _translateMessage.apply(this, arguments);\n      }\n      return translateMessage;\n    }()\n    /**\n     * translate - translates the given text to provided language\n     *\n     * @param {string} text\n     * @param {string} destination_language\n     * @param {string} source_language\n     *\n     * @return {TranslateResponse} Response that includes the message\n     */\n  }, {\n    key: \"translate\",\n    value: function () {\n      var _translate = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee60(text, destination_language, source_language) {\n        return _regeneratorRuntime.wrap(function _callee60$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n                _context60.next = 2;\n                return this.post(this.baseURL + \"/translate\", {\n                  text: text,\n                  source_language: source_language,\n                  destination_language: destination_language\n                });\n              case 2:\n                return _context60.abrupt(\"return\", _context60.sent);\n              case 3:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n        }, _callee60, this);\n      }));\n      function translate(_x76, _x77, _x78) {\n        return _translate.apply(this, arguments);\n      }\n      return translate;\n    }()\n    /**\n     * _normalizeExpiration - transforms expiration value into ISO string\n     * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n     */\n  }, {\n    key: \"_normalizeExpiration\",\n    value: function _normalizeExpiration(timeoutOrExpirationDate) {\n      var pinExpires = null;\n      if (typeof timeoutOrExpirationDate === 'number') {\n        var now = new Date();\n        now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n        pinExpires = now.toISOString();\n      } else if (isString(timeoutOrExpirationDate)) {\n        pinExpires = timeoutOrExpirationDate;\n      } else if (timeoutOrExpirationDate instanceof Date) {\n        pinExpires = timeoutOrExpirationDate.toISOString();\n      }\n      return pinExpires;\n    }\n    /**\n     * _messageId - extracts string message id from either message object or message id\n     * @param {string | { id: string }} messageOrMessageId message object or message id\n     * @param {string} errorText error message to report in case of message id absence\n     */\n  }, {\n    key: \"_validateAndGetMessageId\",\n    value: function _validateAndGetMessageId(messageOrMessageId, errorText) {\n      var messageId;\n      if (typeof messageOrMessageId === 'string') {\n        messageId = messageOrMessageId;\n      } else {\n        if (!messageOrMessageId.id) {\n          throw Error(errorText);\n        }\n        messageId = messageOrMessageId.id;\n      }\n      return messageId;\n    }\n    /**\n     * pinMessage - pins the message\n     * @param {string | { id: string }} messageOrMessageId message object or message id\n     * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n     * @param {undefined|string | { id: string }} [pinnedBy] who will appear as a user who pinned a message. Only for server-side use. Provide `undefined` when pinning message client-side\n     * @param {undefined|number|string|Date} pinnedAt date when message should be pinned. It affects the order of pinned messages. Use negative number to set relative time in the past, string or Date to set exact date of pin\n     */\n  }, {\n    key: \"pinMessage\",\n    value: function pinMessage(messageOrMessageId, timeoutOrExpirationDate, pinnedBy, pinnedAt) {\n      var messageId = this._validateAndGetMessageId(messageOrMessageId, 'Please specify the message id when calling unpinMessage');\n      return this.partialUpdateMessage(messageId, {\n        set: {\n          pinned: true,\n          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),\n          pinned_at: this._normalizeExpiration(pinnedAt)\n        }\n      }, pinnedBy);\n    }\n    /**\n     * unpinMessage - unpins the message that was previously pinned\n     * @param {string | { id: string }} messageOrMessageId message object or message id\n     * @param {string | { id: string }} [userId]\n     */\n  }, {\n    key: \"unpinMessage\",\n    value: function unpinMessage(messageOrMessageId, userId) {\n      var messageId = this._validateAndGetMessageId(messageOrMessageId, 'Please specify the message id when calling unpinMessage');\n      return this.partialUpdateMessage(messageId, {\n        set: {\n          pinned: false\n        }\n      }, userId);\n    }\n    /**\n     * updateMessage - Update the given message\n     *\n     * @param {Omit<MessageResponse<StreamChatGenerics>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified\n     * @param {string | { id: string }} [userId]\n     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n     *\n     * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the message\n     */\n  }, {\n    key: \"updateMessage\",\n    value: function () {\n      var _updateMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee61(message, userId, options) {\n        var clonedMessage, reservedMessageFields;\n        return _regeneratorRuntime.wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n                if (message.id) {\n                  _context61.next = 2;\n                  break;\n                }\n                throw Error('Please specify the message id when calling updateMessage');\n              case 2:\n                clonedMessage = _extends({}, message);\n                delete clonedMessage.id;\n                reservedMessageFields = ['command', 'created_at', 'html', 'latest_reactions', 'own_reactions', 'quoted_message', 'reaction_counts', 'reply_count', 'type', 'updated_at', 'user', 'pinned_at', '__html'];\n                reservedMessageFields.forEach(function (item) {\n                  if (clonedMessage[item] != null) {\n                    delete clonedMessage[item];\n                  }\n                });\n                if (userId != null) {\n                  if (isString(userId)) {\n                    clonedMessage.user_id = userId;\n                  } else {\n                    clonedMessage.user = {\n                      id: userId.id\n                    };\n                  }\n                }\n                /**\n                 * Server always expects mentioned_users to be array of string. We are adding extra check, just in case\n                 * SDK missed this conversion.\n                 */\n\n                if (Array.isArray(clonedMessage.mentioned_users) && !isString(clonedMessage.mentioned_users[0])) {\n                  clonedMessage.mentioned_users = clonedMessage.mentioned_users.map(function (mu) {\n                    return mu.id;\n                  });\n                }\n                _context61.next = 10;\n                return this.post(this.baseURL + \"/messages/\".concat(encodeURIComponent(message.id)), _objectSpread$1({\n                  message: clonedMessage\n                }, options));\n              case 10:\n                return _context61.abrupt(\"return\", _context61.sent);\n              case 11:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee61, this);\n      }));\n      function updateMessage(_x79, _x80, _x81) {\n        return _updateMessage.apply(this, arguments);\n      }\n      return updateMessage;\n    }()\n    /**\n     * partialUpdateMessage - Update the given message id while retaining additional properties\n     *\n     * @param {string} id the message id\n     *\n     * @param {PartialUpdateMessage<StreamChatGenerics>}  partialMessageObject which should contain id and any of \"set\" or \"unset\" params;\n     *         example: {id: \"user1\", set:{text: \"hi\"}, unset:[\"color\"]}\n     * @param {string | { id: string }} [userId]\n     *\n     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n     *\n     * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the updated message\n     */\n  }, {\n    key: \"partialUpdateMessage\",\n    value: function () {\n      var _partialUpdateMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee62(id, partialMessageObject, userId, options) {\n        var user;\n        return _regeneratorRuntime.wrap(function _callee62$(_context62) {\n          while (1) {\n            switch (_context62.prev = _context62.next) {\n              case 0:\n                if (id) {\n                  _context62.next = 2;\n                  break;\n                }\n                throw Error('Please specify the message id when calling partialUpdateMessage');\n              case 2:\n                user = userId;\n                if (userId != null && isString(userId)) {\n                  user = {\n                    id: userId\n                  };\n                }\n                _context62.next = 6;\n                return this.put(this.baseURL + \"/messages/\".concat(encodeURIComponent(id)), _objectSpread$1(_objectSpread$1(_objectSpread$1({}, partialMessageObject), options), {}, {\n                  user: user\n                }));\n              case 6:\n                return _context62.abrupt(\"return\", _context62.sent);\n              case 7:\n              case \"end\":\n                return _context62.stop();\n            }\n          }\n        }, _callee62, this);\n      }));\n      function partialUpdateMessage(_x82, _x83, _x84, _x85) {\n        return _partialUpdateMessage.apply(this, arguments);\n      }\n      return partialUpdateMessage;\n    }()\n  }, {\n    key: \"deleteMessage\",\n    value: function () {\n      var _deleteMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee63(messageID, hardDelete) {\n        var params;\n        return _regeneratorRuntime.wrap(function _callee63$(_context63) {\n          while (1) {\n            switch (_context63.prev = _context63.next) {\n              case 0:\n                params = {};\n                if (hardDelete) {\n                  params = {\n                    hard: true\n                  };\n                }\n                _context63.next = 4;\n                return this.delete(this.baseURL + \"/messages/\".concat(encodeURIComponent(messageID)), params);\n              case 4:\n                return _context63.abrupt(\"return\", _context63.sent);\n              case 5:\n              case \"end\":\n                return _context63.stop();\n            }\n          }\n        }, _callee63, this);\n      }));\n      function deleteMessage(_x86, _x87) {\n        return _deleteMessage.apply(this, arguments);\n      }\n      return deleteMessage;\n    }()\n    /**\n     * undeleteMessage - Undelete a message\n     *\n     * undeletes a message that was previous soft deleted. Hard deleted messages\n     * cannot be undeleted. This is only allowed to be called from server-side\n     * clients.\n     *\n     * @param {string} messageID The id of the message to undelete\n     * @param {string} userID The id of the user who undeleted the message\n     *\n     * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the message\n     */\n  }, {\n    key: \"undeleteMessage\",\n    value: function () {\n      var _undeleteMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee64(messageID, userID) {\n        return _regeneratorRuntime.wrap(function _callee64$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n                _context64.next = 2;\n                return this.post(this.baseURL + \"/messages/\".concat(encodeURIComponent(messageID), \"/undelete\"), {\n                  undeleted_by: userID\n                });\n              case 2:\n                return _context64.abrupt(\"return\", _context64.sent);\n              case 3:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n        }, _callee64, this);\n      }));\n      function undeleteMessage(_x88, _x89) {\n        return _undeleteMessage.apply(this, arguments);\n      }\n      return undeleteMessage;\n    }()\n  }, {\n    key: \"getMessage\",\n    value: function () {\n      var _getMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee65(messageID, options) {\n        return _regeneratorRuntime.wrap(function _callee65$(_context65) {\n          while (1) {\n            switch (_context65.prev = _context65.next) {\n              case 0:\n                _context65.next = 2;\n                return this.get(this.baseURL + \"/messages/\".concat(encodeURIComponent(messageID)), _objectSpread$1({}, options));\n              case 2:\n                return _context65.abrupt(\"return\", _context65.sent);\n              case 3:\n              case \"end\":\n                return _context65.stop();\n            }\n          }\n        }, _callee65, this);\n      }));\n      function getMessage(_x90, _x91) {\n        return _getMessage.apply(this, arguments);\n      }\n      return getMessage;\n    }()\n    /**\n     * queryThreads - returns the list of threads of current user.\n     *\n     * @param {QueryThreadsOptions} options Options object for pagination and limiting the participants and replies.\n     * @param {number}  options.limit Limits the number of threads to be returned.\n     * @param {boolean} options.watch Subscribes the user to the channels of the threads.\n     * @param {number}  options.participant_limit Limits the number of participants returned per threads.\n     * @param {number}  options.reply_limit Limits the number of replies returned per threads.\n     *\n     * @returns {{ threads: Thread<StreamChatGenerics>[], next: string }} Returns the list of threads and the next cursor.\n     */\n  }, {\n    key: \"queryThreads\",\n    value: function () {\n      var _queryThreads = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee66() {\n        var _this5 = this;\n        var options,\n          optionsWithDefaults,\n          response,\n          _args66 = arguments;\n        return _regeneratorRuntime.wrap(function _callee66$(_context66) {\n          while (1) {\n            switch (_context66.prev = _context66.next) {\n              case 0:\n                options = _args66.length > 0 && _args66[0] !== undefined ? _args66[0] : {};\n                optionsWithDefaults = _objectSpread$1({\n                  limit: 10,\n                  participant_limit: 10,\n                  reply_limit: 3,\n                  watch: true\n                }, options);\n                _context66.next = 4;\n                return this.post(\"\".concat(this.baseURL, \"/threads\"), optionsWithDefaults);\n              case 4:\n                response = _context66.sent;\n                return _context66.abrupt(\"return\", {\n                  threads: response.threads.map(function (thread) {\n                    return new Thread({\n                      client: _this5,\n                      threadData: thread\n                    });\n                  }),\n                  next: response.next\n                });\n              case 6:\n              case \"end\":\n                return _context66.stop();\n            }\n          }\n        }, _callee66, this);\n      }));\n      function queryThreads() {\n        return _queryThreads.apply(this, arguments);\n      }\n      return queryThreads;\n    }()\n    /**\n     * getThread - returns the thread of a message by its id.\n     *\n     * @param {string}            messageId The message id\n     * @param {GetThreadOptions}  options Options object for pagination and limiting the participants and replies.\n     * @param {boolean}           options.watch Subscribes the user to the channel of the thread.\n     * @param {number}            options.participant_limit Limits the number of participants returned per threads.\n     * @param {number}            options.reply_limit Limits the number of replies returned per threads.\n     *\n     * @returns {Thread<StreamChatGenerics>} Returns the thread.\n     */\n  }, {\n    key: \"getThread\",\n    value: function () {\n      var _getThread = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee67(messageId) {\n        var options,\n          optionsWithDefaults,\n          response,\n          _args67 = arguments;\n        return _regeneratorRuntime.wrap(function _callee67$(_context67) {\n          while (1) {\n            switch (_context67.prev = _context67.next) {\n              case 0:\n                options = _args67.length > 1 && _args67[1] !== undefined ? _args67[1] : {};\n                if (messageId) {\n                  _context67.next = 3;\n                  break;\n                }\n                throw Error('Please specify the messageId when calling getThread');\n              case 3:\n                optionsWithDefaults = _objectSpread$1({\n                  participant_limit: 100,\n                  reply_limit: 3,\n                  watch: true\n                }, options);\n                _context67.next = 6;\n                return this.get(\"\".concat(this.baseURL, \"/threads/\").concat(encodeURIComponent(messageId)), optionsWithDefaults);\n              case 6:\n                response = _context67.sent;\n                return _context67.abrupt(\"return\", new Thread({\n                  client: this,\n                  threadData: response.thread\n                }));\n              case 8:\n              case \"end\":\n                return _context67.stop();\n            }\n          }\n        }, _callee67, this);\n      }));\n      function getThread(_x92) {\n        return _getThread.apply(this, arguments);\n      }\n      return getThread;\n    }()\n    /**\n     * partialUpdateThread - updates the given thread\n     *\n     * @param {string}              messageId The id of the thread message which needs to be updated.\n     * @param {PartialThreadUpdate} partialThreadObject should contain \"set\" or \"unset\" params for any of the thread's non-reserved fields.\n     *\n     * @returns {GetThreadAPIResponse<StreamChatGenerics>} Returns the updated thread.\n     */\n  }, {\n    key: \"partialUpdateThread\",\n    value: function () {\n      var _partialUpdateThread = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee68(messageId, partialThreadObject) {\n        var reservedThreadFields, _key5;\n        return _regeneratorRuntime.wrap(function _callee68$(_context68) {\n          while (1) {\n            switch (_context68.prev = _context68.next) {\n              case 0:\n                if (messageId) {\n                  _context68.next = 2;\n                  break;\n                }\n                throw Error('Please specify the message id when calling partialUpdateThread');\n              case 2:\n                // check for reserved fields from ThreadResponse type within partialThreadObject's set and unset.\n                // Throw error if any of the reserved field is found.\n                reservedThreadFields = ['created_at', 'id', 'last_message_at', 'type', 'updated_at', 'user', 'reply_count', 'participants', 'channel', 'custom'];\n                _context68.t0 = _regeneratorRuntime.keys(_objectSpread$1(_objectSpread$1({}, partialThreadObject.set), partialThreadObject.unset));\n              case 4:\n                if ((_context68.t1 = _context68.t0()).done) {\n                  _context68.next = 10;\n                  break;\n                }\n                _key5 = _context68.t1.value;\n                if (!reservedThreadFields.includes(_key5)) {\n                  _context68.next = 8;\n                  break;\n                }\n                throw Error(\"You cannot set \".concat(_key5, \" field on Thread object. \").concat(_key5, \" is reserved for server-side use. Please omit \").concat(_key5, \" from your set object.\"));\n              case 8:\n                _context68.next = 4;\n                break;\n              case 10:\n                _context68.next = 12;\n                return this.patch(\"\".concat(this.baseURL, \"/threads/\").concat(encodeURIComponent(messageId)), partialThreadObject);\n              case 12:\n                return _context68.abrupt(\"return\", _context68.sent);\n              case 13:\n              case \"end\":\n                return _context68.stop();\n            }\n          }\n        }, _callee68, this);\n      }));\n      function partialUpdateThread(_x93, _x94) {\n        return _partialUpdateThread.apply(this, arguments);\n      }\n      return partialUpdateThread;\n    }()\n  }, {\n    key: \"getUserAgent\",\n    value: function getUserAgent() {\n      var _this$deviceIdentifie;\n      if (this.userAgent) {\n        return this.userAgent;\n      }\n      var version = \"8.57.6\";\n      var clientBundle = \"\";\n      var userAgentString = '';\n      if (this.sdkIdentifier) {\n        userAgentString = \"stream-chat-\".concat(this.sdkIdentifier.name, \"-v\").concat(this.sdkIdentifier.version, \"-llc-v\").concat(version);\n      } else {\n        userAgentString = \"stream-chat-js-v\".concat(version, \"-\").concat(this.node ? 'node' : 'browser');\n      }\n      var _ref10 = (_this$deviceIdentifie = this.deviceIdentifier) !== null && _this$deviceIdentifie !== void 0 ? _this$deviceIdentifie : {},\n        os = _ref10.os,\n        model = _ref10.model;\n      return [\n      // reports the device OS, if provided\n      ['os', os],\n      // reports the device model, if provided\n      ['device_model', model],\n      // reports which bundle is being picked from the exports\n      ['client_bundle', clientBundle]].reduce(function (withArguments, _ref11) {\n        var _ref12 = _slicedToArray(_ref11, 2),\n          key = _ref12[0],\n          value = _ref12[1];\n        return value && value.length > 0 ? withArguments.concat(\"|\".concat(key, \"=\").concat(value)) : withArguments;\n      }, userAgentString);\n    }\n    /**\n     * @deprecated use sdkIdentifier instead\n     * @param userAgent\n     */\n  }, {\n    key: \"setUserAgent\",\n    value: function setUserAgent(userAgent) {\n      this.userAgent = userAgent;\n    }\n    /**\n     * _isUsingServerAuth - Returns true if we're using server side auth\n     */\n  }, {\n    key: \"_enrichAxiosOptions\",\n    value: function _enrichAxiosOptions() {\n      var _options$headers;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        params: {},\n        headers: {},\n        config: {}\n      };\n      var token = this._getToken();\n      var authorization = token ? {\n        Authorization: token\n      } : undefined;\n      var signal = null;\n      if (this.nextRequestAbortController !== null) {\n        signal = this.nextRequestAbortController.signal;\n        this.nextRequestAbortController = null;\n      }\n      if (!((_options$headers = options.headers) !== null && _options$headers !== void 0 && _options$headers['x-client-request-id'])) {\n        options.headers = _objectSpread$1(_objectSpread$1({}, options.headers), {}, {\n          'x-client-request-id': randomId()\n        });\n      }\n      var _ref13 = this.options.axiosRequestConfig || {},\n        axiosRequestConfigParams = _ref13.params,\n        axiosRequestConfigHeaders = _ref13.headers,\n        axiosRequestConfigRest = _objectWithoutProperties(_ref13, _excluded2);\n      return _objectSpread$1(_objectSpread$1(_objectSpread$1({\n        params: _objectSpread$1(_objectSpread$1({\n          user_id: this.userID,\n          connection_id: this._getConnectionID(),\n          api_key: this.key\n        }, options.params), axiosRequestConfigParams || {}),\n        headers: _objectSpread$1(_objectSpread$1(_objectSpread$1({}, authorization), {}, {\n          'stream-auth-type': this.getAuthType(),\n          'X-Stream-Client': this.getUserAgent()\n        }, options.headers), axiosRequestConfigHeaders || {})\n      }, signal ? {\n        signal: signal\n      } : {}), options.config), axiosRequestConfigRest || {});\n    }\n  }, {\n    key: \"_getToken\",\n    value: function _getToken() {\n      if (!this.tokenManager || this.anonymous) return null;\n      return this.tokenManager.getToken();\n    }\n  }, {\n    key: \"_startCleaning\",\n    value: function _startCleaning() {\n      var that = this;\n      if (this.cleaningIntervalRef != null) {\n        return;\n      }\n      this.cleaningIntervalRef = setInterval(function () {\n        // call clean on the channel, used for calling the stop.typing event etc.\n        for (var _i3 = 0, _Object$values2 = Object.values(that.activeChannels); _i3 < _Object$values2.length; _i3++) {\n          var _channel7 = _Object$values2[_i3];\n          _channel7.clean();\n        }\n      }, 500);\n    }\n    /**\n     * encode ws url payload\n     * @private\n     * @returns json string\n     */\n  }, {\n    key: \"verifyWebhook\",\n    value:\n    /**\n     * checks signature of a request\n     * @param {string | Buffer} rawBody\n     * @param {string} signature from HTTP header\n     * @returns {boolean}\n     */\n    function verifyWebhook(requestBody, xSignature) {\n      return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n    }\n    /** getPermission - gets the definition for a permission\n     *\n     * @param {string} name\n     * @returns {Promise<PermissionAPIResponse>}\n     */\n  }, {\n    key: \"getPermission\",\n    value: function getPermission(name) {\n      return this.get(\"\".concat(this.baseURL, \"/permissions/\").concat(encodeURIComponent(name)));\n    }\n    /** createPermission - creates a custom permission\n     *\n     * @param {CustomPermissionOptions} permissionData the permission data\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"createPermission\",\n    value: function createPermission(permissionData) {\n      return this.post(\"\".concat(this.baseURL, \"/permissions\"), _objectSpread$1({}, permissionData));\n    }\n    /** updatePermission - updates an existing custom permission\n     *\n     * @param {string} id\n     * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"updatePermission\",\n    value: function updatePermission(id, permissionData) {\n      return this.put(\"\".concat(this.baseURL, \"/permissions/\").concat(encodeURIComponent(id)), _objectSpread$1({}, permissionData));\n    }\n    /** deletePermission - deletes a custom permission\n     *\n     * @param {string} name\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"deletePermission\",\n    value: function deletePermission(name) {\n      return this.delete(\"\".concat(this.baseURL, \"/permissions/\").concat(encodeURIComponent(name)));\n    }\n    /** listPermissions - returns the list of all permissions for this application\n     *\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"listPermissions\",\n    value: function listPermissions() {\n      return this.get(\"\".concat(this.baseURL, \"/permissions\"));\n    }\n    /** createRole - creates a custom role\n     *\n     * @param {string} name the new role name\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"createRole\",\n    value: function createRole(name) {\n      return this.post(\"\".concat(this.baseURL, \"/roles\"), {\n        name: name\n      });\n    }\n    /** listRoles - returns the list of all roles for this application\n     *\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"listRoles\",\n    value: function listRoles() {\n      return this.get(\"\".concat(this.baseURL, \"/roles\"));\n    }\n    /** deleteRole - deletes a custom role\n     *\n     * @param {string} name the role name\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"deleteRole\",\n    value: function deleteRole(name) {\n      return this.delete(\"\".concat(this.baseURL, \"/roles/\").concat(encodeURIComponent(name)));\n    }\n    /** sync - returns all events that happened for a list of channels since last sync\n     * @param {string[]} channel_cids list of channel CIDs\n     * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n     * @param {SyncOptions} options See JSDoc in the type fields for more info\n     *\n     * @returns {Promise<SyncResponse>}\n     */\n  }, {\n    key: \"sync\",\n    value: function sync(channel_cids, last_sync_at) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.post(\"\".concat(this.baseURL, \"/sync\"), _objectSpread$1({\n        channel_cids: channel_cids,\n        last_sync_at: last_sync_at\n      }, options));\n    }\n    /**\n     * sendUserCustomEvent - Send a custom event to a user\n     *\n     * @param {string} targetUserID target user id\n     * @param {UserCustomEvent} event for example {type: 'friendship-request'}\n     *\n     * @return {Promise<APIResponse>} The Server Response\n     */\n  }, {\n    key: \"sendUserCustomEvent\",\n    value: function () {\n      var _sendUserCustomEvent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee69(targetUserID, event) {\n        return _regeneratorRuntime.wrap(function _callee69$(_context69) {\n          while (1) {\n            switch (_context69.prev = _context69.next) {\n              case 0:\n                _context69.next = 2;\n                return this.post(\"\".concat(this.baseURL, \"/users/\").concat(encodeURIComponent(targetUserID), \"/event\"), {\n                  event: event\n                });\n              case 2:\n                return _context69.abrupt(\"return\", _context69.sent);\n              case 3:\n              case \"end\":\n                return _context69.stop();\n            }\n          }\n        }, _callee69, this);\n      }));\n      function sendUserCustomEvent(_x95, _x96) {\n        return _sendUserCustomEvent.apply(this, arguments);\n      }\n      return sendUserCustomEvent;\n    }()\n    /**\n     * Creates a new block list\n     *\n     * @param {BlockList} blockList - The block list to create\n     * @param {string} blockList.name - The name of the block list\n     * @param {string[]} blockList.words - List of words to block\n     * @param {string} [blockList.team] - Team ID the block list belongs to\n     *\n     * @returns {Promise<APIResponse>} The server response\n     */\n  }, {\n    key: \"createBlockList\",\n    value: function createBlockList(blockList) {\n      return this.post(\"\".concat(this.baseURL, \"/blocklists\"), blockList);\n    }\n    /**\n     * Lists all block lists\n     *\n     * @param {Object} [data] - Query parameters\n     * @param {string} [data.team] - Team ID to filter block lists by\n     *\n     * @returns {Promise<APIResponse & {blocklists: BlockListResponse[]}>} Response containing array of block lists\n     */\n  }, {\n    key: \"listBlockLists\",\n    value: function listBlockLists(data) {\n      return this.get(\"\".concat(this.baseURL, \"/blocklists\"), data);\n    }\n    /**\n     * Gets a specific block list\n     *\n     * @param {string} name - The name of the block list to retrieve\n     * @param {Object} [data] - Query parameters\n     * @param {string} [data.team] - Team ID that blocklist belongs to\n     *\n     * @returns {Promise<APIResponse & {blocklist: BlockListResponse}>} Response containing the block list\n     */\n  }, {\n    key: \"getBlockList\",\n    value: function getBlockList(name, data) {\n      return this.get(\"\".concat(this.baseURL, \"/blocklists/\").concat(encodeURIComponent(name)), data);\n    }\n    /**\n     * Updates an existing block list\n     *\n     * @param {string} name - The name of the block list to update\n     * @param {Object} data - The update data\n     * @param {string[]} data.words - New list of words to block\n     * @param {string} [data.team] - Team ID that blocklist belongs to\n     *\n     * @returns {Promise<APIResponse>} The server response\n     */\n  }, {\n    key: \"updateBlockList\",\n    value: function updateBlockList(name, data) {\n      return this.put(\"\".concat(this.baseURL, \"/blocklists/\").concat(encodeURIComponent(name)), data);\n    }\n    /**\n     * Deletes a block list\n     *\n     * @param {string} name - The name of the block list to delete\n     * @param {Object} [data] - Query parameters\n     * @param {string} [data.team] - Team ID that blocklist belongs to\n     *\n     * @returns {Promise<APIResponse>} The server response\n     */\n  }, {\n    key: \"deleteBlockList\",\n    value: function deleteBlockList(name, data) {\n      return this.delete(\"\".concat(this.baseURL, \"/blocklists/\").concat(encodeURIComponent(name)), data);\n    }\n  }, {\n    key: \"exportChannels\",\n    value: function exportChannels(request) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var payload = _objectSpread$1({\n        channels: request\n      }, options);\n      return this.post(\"\".concat(this.baseURL, \"/export_channels\"), payload);\n    }\n  }, {\n    key: \"exportUsers\",\n    value: function exportUsers(request) {\n      return this.post(\"\".concat(this.baseURL, \"/export/users\"), request);\n    }\n  }, {\n    key: \"exportChannel\",\n    value: function exportChannel(request, options) {\n      return this.exportChannels([request], options);\n    }\n  }, {\n    key: \"getExportChannelStatus\",\n    value: function getExportChannelStatus(id) {\n      return this.get(\"\".concat(this.baseURL, \"/export_channels/\").concat(encodeURIComponent(id)));\n    }\n  }, {\n    key: \"campaign\",\n    value: function campaign(idOrData, data) {\n      if (idOrData && _typeof(idOrData) === 'object') {\n        return new Campaign(this, null, idOrData);\n      }\n      return new Campaign(this, idOrData, data);\n    }\n  }, {\n    key: \"segment\",\n    value: function segment(type, idOrData, data) {\n      if (typeof idOrData === 'string') {\n        return new Segment(this, type, idOrData, data);\n      }\n      return new Segment(this, type, null, idOrData);\n    }\n  }, {\n    key: \"validateServerSideAuth\",\n    value: function validateServerSideAuth() {\n      if (!this.secret) {\n        throw new Error('Campaigns is a server-side only feature. Please initialize the client with a secret to use this feature.');\n      }\n    }\n    /**\n     * createSegment - Creates a segment\n     *\n     * @private\n     * @param {SegmentType} type Segment type\n     * @param {string} id Segment ID\n     * @param {string} name Segment name\n     * @param {SegmentData} params Segment data\n     *\n     * @return {{segment: SegmentResponse} & APIResponse} The created Segment\n     */\n  }, {\n    key: \"createSegment\",\n    value: function () {\n      var _createSegment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee70(type, id, data) {\n        var body;\n        return _regeneratorRuntime.wrap(function _callee70$(_context70) {\n          while (1) {\n            switch (_context70.prev = _context70.next) {\n              case 0:\n                this.validateServerSideAuth();\n                body = _objectSpread$1({\n                  id: id,\n                  type: type\n                }, data);\n                return _context70.abrupt(\"return\", this.post(this.baseURL + \"/segments\", body));\n              case 3:\n              case \"end\":\n                return _context70.stop();\n            }\n          }\n        }, _callee70, this);\n      }));\n      function createSegment(_x97, _x98, _x99) {\n        return _createSegment.apply(this, arguments);\n      }\n      return createSegment;\n    }()\n    /**\n     * createUserSegment - Creates a user segment\n     *\n     * @param {string} id Segment ID\n     * @param {string} name Segment name\n     * @param {SegmentData} data Segment data\n     *\n     * @return {Segment} The created Segment\n     */\n  }, {\n    key: \"createUserSegment\",\n    value: function () {\n      var _createUserSegment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee71(id, data) {\n        return _regeneratorRuntime.wrap(function _callee71$(_context71) {\n          while (1) {\n            switch (_context71.prev = _context71.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context71.abrupt(\"return\", this.createSegment('user', id, data));\n              case 2:\n              case \"end\":\n                return _context71.stop();\n            }\n          }\n        }, _callee71, this);\n      }));\n      function createUserSegment(_x100, _x101) {\n        return _createUserSegment.apply(this, arguments);\n      }\n      return createUserSegment;\n    }()\n    /**\n     * createChannelSegment - Creates a channel segment\n     *\n     * @param {string} id Segment ID\n     * @param {string} name Segment name\n     * @param {SegmentData} data Segment data\n     *\n     * @return {Segment} The created Segment\n     */\n  }, {\n    key: \"createChannelSegment\",\n    value: function () {\n      var _createChannelSegment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee72(id, data) {\n        return _regeneratorRuntime.wrap(function _callee72$(_context72) {\n          while (1) {\n            switch (_context72.prev = _context72.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context72.abrupt(\"return\", this.createSegment('channel', id, data));\n              case 2:\n              case \"end\":\n                return _context72.stop();\n            }\n          }\n        }, _callee72, this);\n      }));\n      function createChannelSegment(_x102, _x103) {\n        return _createChannelSegment.apply(this, arguments);\n      }\n      return createChannelSegment;\n    }()\n  }, {\n    key: \"getSegment\",\n    value: function () {\n      var _getSegment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee73(id) {\n        return _regeneratorRuntime.wrap(function _callee73$(_context73) {\n          while (1) {\n            switch (_context73.prev = _context73.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context73.abrupt(\"return\", this.get(this.baseURL + \"/segments/\".concat(encodeURIComponent(id))));\n              case 2:\n              case \"end\":\n                return _context73.stop();\n            }\n          }\n        }, _callee73, this);\n      }));\n      function getSegment(_x104) {\n        return _getSegment.apply(this, arguments);\n      }\n      return getSegment;\n    }()\n    /**\n     * updateSegment - Update a segment\n     *\n     * @param {string} id Segment ID\n     * @param {Partial<UpdateSegmentData>} data Data to update\n     *\n     * @return {Segment} Updated Segment\n     */\n  }, {\n    key: \"updateSegment\",\n    value: function () {\n      var _updateSegment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee74(id, data) {\n        return _regeneratorRuntime.wrap(function _callee74$(_context74) {\n          while (1) {\n            switch (_context74.prev = _context74.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context74.abrupt(\"return\", this.put(this.baseURL + \"/segments/\".concat(encodeURIComponent(id)), data));\n              case 2:\n              case \"end\":\n                return _context74.stop();\n            }\n          }\n        }, _callee74, this);\n      }));\n      function updateSegment(_x105, _x106) {\n        return _updateSegment.apply(this, arguments);\n      }\n      return updateSegment;\n    }()\n    /**\n     * addSegmentTargets - Add targets to a segment\n     *\n     * @param {string} id Segment ID\n     * @param {string[]} targets Targets to add to the segment\n     *\n     * @return {APIResponse} API response\n     */\n  }, {\n    key: \"addSegmentTargets\",\n    value: function () {\n      var _addSegmentTargets = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee75(id, targets) {\n        var body;\n        return _regeneratorRuntime.wrap(function _callee75$(_context75) {\n          while (1) {\n            switch (_context75.prev = _context75.next) {\n              case 0:\n                this.validateServerSideAuth();\n                body = {\n                  target_ids: targets\n                };\n                return _context75.abrupt(\"return\", this.post(this.baseURL + \"/segments/\".concat(encodeURIComponent(id), \"/addtargets\"), body));\n              case 3:\n              case \"end\":\n                return _context75.stop();\n            }\n          }\n        }, _callee75, this);\n      }));\n      function addSegmentTargets(_x107, _x108) {\n        return _addSegmentTargets.apply(this, arguments);\n      }\n      return addSegmentTargets;\n    }()\n  }, {\n    key: \"querySegmentTargets\",\n    value: function () {\n      var _querySegmentTargets = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee76(id) {\n        var filter,\n          sort,\n          options,\n          _args76 = arguments;\n        return _regeneratorRuntime.wrap(function _callee76$(_context76) {\n          while (1) {\n            switch (_context76.prev = _context76.next) {\n              case 0:\n                filter = _args76.length > 1 && _args76[1] !== undefined ? _args76[1] : {};\n                sort = _args76.length > 2 && _args76[2] !== undefined ? _args76[2] : [];\n                options = _args76.length > 3 && _args76[3] !== undefined ? _args76[3] : {};\n                this.validateServerSideAuth();\n                return _context76.abrupt(\"return\", this.post(this.baseURL + \"/segments/\".concat(encodeURIComponent(id), \"/targets/query\"), _objectSpread$1({\n                  filter: filter || {},\n                  sort: sort || []\n                }, options)));\n              case 5:\n              case \"end\":\n                return _context76.stop();\n            }\n          }\n        }, _callee76, this);\n      }));\n      function querySegmentTargets(_x109) {\n        return _querySegmentTargets.apply(this, arguments);\n      }\n      return querySegmentTargets;\n    }()\n    /**\n     * removeSegmentTargets - Remove targets from a segment\n     *\n     * @param {string} id Segment ID\n     * @param {string[]} targets Targets to add to the segment\n     *\n     * @return {APIResponse} API response\n     */\n  }, {\n    key: \"removeSegmentTargets\",\n    value: function () {\n      var _removeSegmentTargets = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee77(id, targets) {\n        var body;\n        return _regeneratorRuntime.wrap(function _callee77$(_context77) {\n          while (1) {\n            switch (_context77.prev = _context77.next) {\n              case 0:\n                this.validateServerSideAuth();\n                body = {\n                  target_ids: targets\n                };\n                return _context77.abrupt(\"return\", this.post(this.baseURL + \"/segments/\".concat(encodeURIComponent(id), \"/deletetargets\"), body));\n              case 3:\n              case \"end\":\n                return _context77.stop();\n            }\n          }\n        }, _callee77, this);\n      }));\n      function removeSegmentTargets(_x110, _x111) {\n        return _removeSegmentTargets.apply(this, arguments);\n      }\n      return removeSegmentTargets;\n    }()\n    /**\n     * querySegments - Query Segments\n     *\n     * @param {filter} filter MongoDB style filter conditions\n     * @param {QuerySegmentsOptions} options Options for sorting/paginating the results\n     *\n     * @return {Segment[]} Segments\n     */\n  }, {\n    key: \"querySegments\",\n    value: function () {\n      var _querySegments = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee78(filter, sort) {\n        var options,\n          _args78 = arguments;\n        return _regeneratorRuntime.wrap(function _callee78$(_context78) {\n          while (1) {\n            switch (_context78.prev = _context78.next) {\n              case 0:\n                options = _args78.length > 2 && _args78[2] !== undefined ? _args78[2] : {};\n                this.validateServerSideAuth();\n                return _context78.abrupt(\"return\", this.post(this.baseURL + \"/segments/query\", _objectSpread$1({\n                  filter: filter,\n                  sort: sort\n                }, options)));\n              case 3:\n              case \"end\":\n                return _context78.stop();\n            }\n          }\n        }, _callee78, this);\n      }));\n      function querySegments(_x112, _x113) {\n        return _querySegments.apply(this, arguments);\n      }\n      return querySegments;\n    }()\n    /**\n     * deleteSegment - Delete a Campaign Segment\n     *\n     * @param {string} id Segment ID\n     *\n     * @return {Promise<APIResponse>} The Server Response\n     */\n  }, {\n    key: \"deleteSegment\",\n    value: function () {\n      var _deleteSegment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee79(id) {\n        return _regeneratorRuntime.wrap(function _callee79$(_context79) {\n          while (1) {\n            switch (_context79.prev = _context79.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context79.abrupt(\"return\", this.delete(this.baseURL + \"/segments/\".concat(encodeURIComponent(id))));\n              case 2:\n              case \"end\":\n                return _context79.stop();\n            }\n          }\n        }, _callee79, this);\n      }));\n      function deleteSegment(_x114) {\n        return _deleteSegment.apply(this, arguments);\n      }\n      return deleteSegment;\n    }()\n    /**\n     * segmentTargetExists - Check if a target exists in a segment\n     *\n     * @param {string} segmentId Segment ID\n     * @param {string} targetId Target ID\n     *\n     * @return {Promise<APIResponse>} The Server Response\n     */\n  }, {\n    key: \"segmentTargetExists\",\n    value: function () {\n      var _segmentTargetExists = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee80(segmentId, targetId) {\n        return _regeneratorRuntime.wrap(function _callee80$(_context80) {\n          while (1) {\n            switch (_context80.prev = _context80.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context80.abrupt(\"return\", this.get(this.baseURL + \"/segments/\".concat(encodeURIComponent(segmentId), \"/target/\").concat(encodeURIComponent(targetId))));\n              case 2:\n              case \"end\":\n                return _context80.stop();\n            }\n          }\n        }, _callee80, this);\n      }));\n      function segmentTargetExists(_x115, _x116) {\n        return _segmentTargetExists.apply(this, arguments);\n      }\n      return segmentTargetExists;\n    }()\n    /**\n     * createCampaign - Creates a Campaign\n     *\n     * @param {CampaignData} params Campaign data\n     *\n     * @return {Campaign} The Created Campaign\n     */\n  }, {\n    key: \"createCampaign\",\n    value: function () {\n      var _createCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee81(params) {\n        return _regeneratorRuntime.wrap(function _callee81$(_context81) {\n          while (1) {\n            switch (_context81.prev = _context81.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context81.abrupt(\"return\", this.post(this.baseURL + \"/campaigns\", _objectSpread$1({}, params)));\n              case 2:\n              case \"end\":\n                return _context81.stop();\n            }\n          }\n        }, _callee81, this);\n      }));\n      function createCampaign(_x117) {\n        return _createCampaign.apply(this, arguments);\n      }\n      return createCampaign;\n    }()\n  }, {\n    key: \"getCampaign\",\n    value: function () {\n      var _getCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee82(id, options) {\n        return _regeneratorRuntime.wrap(function _callee82$(_context82) {\n          while (1) {\n            switch (_context82.prev = _context82.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context82.abrupt(\"return\", this.get(this.baseURL + \"/campaigns/\".concat(encodeURIComponent(id)), _objectSpread$1({}, options === null || options === void 0 ? void 0 : options.users)));\n              case 2:\n              case \"end\":\n                return _context82.stop();\n            }\n          }\n        }, _callee82, this);\n      }));\n      function getCampaign(_x118, _x119) {\n        return _getCampaign.apply(this, arguments);\n      }\n      return getCampaign;\n    }()\n  }, {\n    key: \"startCampaign\",\n    value: function () {\n      var _startCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee83(id, options) {\n        return _regeneratorRuntime.wrap(function _callee83$(_context83) {\n          while (1) {\n            switch (_context83.prev = _context83.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context83.abrupt(\"return\", this.post(this.baseURL + \"/campaigns/\".concat(encodeURIComponent(id), \"/start\"), {\n                  scheduled_for: options === null || options === void 0 ? void 0 : options.scheduledFor,\n                  stop_at: options === null || options === void 0 ? void 0 : options.stopAt\n                }));\n              case 2:\n              case \"end\":\n                return _context83.stop();\n            }\n          }\n        }, _callee83, this);\n      }));\n      function startCampaign(_x120, _x121) {\n        return _startCampaign.apply(this, arguments);\n      }\n      return startCampaign;\n    }()\n    /**\n     * queryCampaigns - Query Campaigns\n     *\n     *\n     * @return {Campaign[]} Campaigns\n     */\n  }, {\n    key: \"queryCampaigns\",\n    value: function () {\n      var _queryCampaigns = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee84(filter, sort, options) {\n        return _regeneratorRuntime.wrap(function _callee84$(_context84) {\n          while (1) {\n            switch (_context84.prev = _context84.next) {\n              case 0:\n                this.validateServerSideAuth();\n                _context84.next = 3;\n                return this.post(this.baseURL + \"/campaigns/query\", _objectSpread$1({\n                  filter: filter,\n                  sort: sort\n                }, options || {}));\n              case 3:\n                return _context84.abrupt(\"return\", _context84.sent);\n              case 4:\n              case \"end\":\n                return _context84.stop();\n            }\n          }\n        }, _callee84, this);\n      }));\n      function queryCampaigns(_x122, _x123, _x124) {\n        return _queryCampaigns.apply(this, arguments);\n      }\n      return queryCampaigns;\n    }()\n    /**\n     * updateCampaign - Update a Campaign\n     *\n     * @param {string} id Campaign ID\n     * @param {Partial<CampaignData>} params Campaign data\n     *\n     * @return {Campaign} Updated Campaign\n     */\n  }, {\n    key: \"updateCampaign\",\n    value: function () {\n      var _updateCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee85(id, params) {\n        return _regeneratorRuntime.wrap(function _callee85$(_context85) {\n          while (1) {\n            switch (_context85.prev = _context85.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context85.abrupt(\"return\", this.put(this.baseURL + \"/campaigns/\".concat(encodeURIComponent(id)), params));\n              case 2:\n              case \"end\":\n                return _context85.stop();\n            }\n          }\n        }, _callee85, this);\n      }));\n      function updateCampaign(_x125, _x126) {\n        return _updateCampaign.apply(this, arguments);\n      }\n      return updateCampaign;\n    }()\n    /**\n     * deleteCampaign - Delete a Campaign\n     *\n     * @param {string} id Campaign ID\n     *\n     * @return {Promise<APIResponse>} The Server Response\n     */\n  }, {\n    key: \"deleteCampaign\",\n    value: function () {\n      var _deleteCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee86(id) {\n        return _regeneratorRuntime.wrap(function _callee86$(_context86) {\n          while (1) {\n            switch (_context86.prev = _context86.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context86.abrupt(\"return\", this.delete(this.baseURL + \"/campaigns/\".concat(encodeURIComponent(id))));\n              case 2:\n              case \"end\":\n                return _context86.stop();\n            }\n          }\n        }, _callee86, this);\n      }));\n      function deleteCampaign(_x127) {\n        return _deleteCampaign.apply(this, arguments);\n      }\n      return deleteCampaign;\n    }()\n    /**\n     * stopCampaign - Stop a Campaign\n     *\n     * @param {string} id Campaign ID\n     *\n     * @return {Campaign} Stopped Campaign\n     */\n  }, {\n    key: \"stopCampaign\",\n    value: function () {\n      var _stopCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee87(id) {\n        return _regeneratorRuntime.wrap(function _callee87$(_context87) {\n          while (1) {\n            switch (_context87.prev = _context87.next) {\n              case 0:\n                this.validateServerSideAuth();\n                return _context87.abrupt(\"return\", this.post(this.baseURL + \"/campaigns/\".concat(encodeURIComponent(id), \"/stop\")));\n              case 2:\n              case \"end\":\n                return _context87.stop();\n            }\n          }\n        }, _callee87, this);\n      }));\n      function stopCampaign(_x128) {\n        return _stopCampaign.apply(this, arguments);\n      }\n      return stopCampaign;\n    }()\n    /**\n     * enrichURL - Get OpenGraph data of the given link\n     *\n     * @param {string} url link\n     * @return {OGAttachment} OG Attachment\n     */\n  }, {\n    key: \"enrichURL\",\n    value: function () {\n      var _enrichURL = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee88(url) {\n        return _regeneratorRuntime.wrap(function _callee88$(_context88) {\n          while (1) {\n            switch (_context88.prev = _context88.next) {\n              case 0:\n                return _context88.abrupt(\"return\", this.get(this.baseURL + \"/og\", {\n                  url: url\n                }));\n              case 1:\n              case \"end\":\n                return _context88.stop();\n            }\n          }\n        }, _callee88, this);\n      }));\n      function enrichURL(_x129) {\n        return _enrichURL.apply(this, arguments);\n      }\n      return enrichURL;\n    }()\n    /**\n     * getTask - Gets status of a long running task\n     *\n     * @param {string} id Task ID\n     *\n     * @return {TaskStatus} The task status\n     */\n  }, {\n    key: \"getTask\",\n    value: function () {\n      var _getTask = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee89(id) {\n        return _regeneratorRuntime.wrap(function _callee89$(_context89) {\n          while (1) {\n            switch (_context89.prev = _context89.next) {\n              case 0:\n                return _context89.abrupt(\"return\", this.get(\"\".concat(this.baseURL, \"/tasks/\").concat(encodeURIComponent(id))));\n              case 1:\n              case \"end\":\n                return _context89.stop();\n            }\n          }\n        }, _callee89, this);\n      }));\n      function getTask(_x130) {\n        return _getTask.apply(this, arguments);\n      }\n      return getTask;\n    }()\n    /**\n     * deleteChannels - Deletes a list of channel\n     *\n     * @param {string[]} cids Channel CIDs\n     * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n     *\n     * @return {DeleteChannelsResponse} Result of the soft deletion, if server-side, it holds the task ID as well\n     */\n  }, {\n    key: \"deleteChannels\",\n    value: function () {\n      var _deleteChannels = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee90(cids) {\n        var options,\n          _args90 = arguments;\n        return _regeneratorRuntime.wrap(function _callee90$(_context90) {\n          while (1) {\n            switch (_context90.prev = _context90.next) {\n              case 0:\n                options = _args90.length > 1 && _args90[1] !== undefined ? _args90[1] : {};\n                _context90.next = 3;\n                return this.post(this.baseURL + \"/channels/delete\", _objectSpread$1({\n                  cids: cids\n                }, options));\n              case 3:\n                return _context90.abrupt(\"return\", _context90.sent);\n              case 4:\n              case \"end\":\n                return _context90.stop();\n            }\n          }\n        }, _callee90, this);\n      }));\n      function deleteChannels(_x131) {\n        return _deleteChannels.apply(this, arguments);\n      }\n      return deleteChannels;\n    }()\n    /**\n     * deleteUsers - Batch Delete Users\n     *\n     * @param {string[]} user_ids which users to delete\n     * @param {DeleteUserOptions} options Configuration how to delete users\n     *\n     * @return {TaskResponse} A task ID\n     */\n  }, {\n    key: \"deleteUsers\",\n    value: function () {\n      var _deleteUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee91(user_ids) {\n        var options,\n          _args91 = arguments;\n        return _regeneratorRuntime.wrap(function _callee91$(_context91) {\n          while (1) {\n            switch (_context91.prev = _context91.next) {\n              case 0:\n                options = _args91.length > 1 && _args91[1] !== undefined ? _args91[1] : {};\n                if (!(typeof options.user !== 'undefined' && !['soft', 'hard', 'pruning'].includes(options.user))) {\n                  _context91.next = 3;\n                  break;\n                }\n                throw new Error('Invalid delete user options. user must be one of [soft hard pruning]');\n              case 3:\n                if (!(typeof options.conversations !== 'undefined' && !['soft', 'hard'].includes(options.conversations))) {\n                  _context91.next = 5;\n                  break;\n                }\n                throw new Error('Invalid delete user options. conversations must be one of [soft hard]');\n              case 5:\n                if (!(typeof options.messages !== 'undefined' && !['soft', 'hard', 'pruning'].includes(options.messages))) {\n                  _context91.next = 7;\n                  break;\n                }\n                throw new Error('Invalid delete user options. messages must be one of [soft hard pruning]');\n              case 7:\n                _context91.next = 9;\n                return this.post(this.baseURL + \"/users/delete\", _objectSpread$1({\n                  user_ids: user_ids\n                }, options));\n              case 9:\n                return _context91.abrupt(\"return\", _context91.sent);\n              case 10:\n              case \"end\":\n                return _context91.stop();\n            }\n          }\n        }, _callee91, this);\n      }));\n      function deleteUsers(_x132) {\n        return _deleteUsers.apply(this, arguments);\n      }\n      return deleteUsers;\n    }()\n    /**\n     * _createImportURL - Create an Import upload url.\n     *\n     * Note: Do not use this.\n     * It is present for internal usage only.\n     * This function can, and will, break and/or be removed at any point in time.\n     *\n     * @private\n     * @param {string} filename filename of uploaded data\n     * @return {APIResponse & CreateImportResponse} An ImportTask\n     */\n  }, {\n    key: \"_createImportURL\",\n    value: function () {\n      var _createImportURL2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee92(filename) {\n        return _regeneratorRuntime.wrap(function _callee92$(_context92) {\n          while (1) {\n            switch (_context92.prev = _context92.next) {\n              case 0:\n                _context92.next = 2;\n                return this.post(this.baseURL + \"/import_urls\", {\n                  filename: filename\n                });\n              case 2:\n                return _context92.abrupt(\"return\", _context92.sent);\n              case 3:\n              case \"end\":\n                return _context92.stop();\n            }\n          }\n        }, _callee92, this);\n      }));\n      function _createImportURL(_x133) {\n        return _createImportURL2.apply(this, arguments);\n      }\n      return _createImportURL;\n    }()\n    /**\n     * _createImport - Create an Import Task.\n     *\n     * Note: Do not use this.\n     * It is present for internal usage only.\n     * This function can, and will, break and/or be removed at any point in time.\n     *\n     * @private\n     * @param {string} path path of uploaded data\n     * @param {CreateImportOptions} options import options\n     * @return {APIResponse & CreateImportResponse} An ImportTask\n     */\n  }, {\n    key: \"_createImport\",\n    value: function () {\n      var _createImport2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee93(path) {\n        var options,\n          _args93 = arguments;\n        return _regeneratorRuntime.wrap(function _callee93$(_context93) {\n          while (1) {\n            switch (_context93.prev = _context93.next) {\n              case 0:\n                options = _args93.length > 1 && _args93[1] !== undefined ? _args93[1] : {\n                  mode: 'upsert'\n                };\n                _context93.next = 3;\n                return this.post(this.baseURL + \"/imports\", _objectSpread$1({\n                  path: path\n                }, options));\n              case 3:\n                return _context93.abrupt(\"return\", _context93.sent);\n              case 4:\n              case \"end\":\n                return _context93.stop();\n            }\n          }\n        }, _callee93, this);\n      }));\n      function _createImport(_x134) {\n        return _createImport2.apply(this, arguments);\n      }\n      return _createImport;\n    }()\n    /**\n     * _getImport - Get an Import Task.\n     *\n     * Note: Do not use this.\n     * It is present for internal usage only.\n     * This function can, and will, break and/or be removed at any point in time.\n     *\n     * @private\n     * @param {string} id id of Import Task\n     *\n     * @return {APIResponse & GetImportResponse} An ImportTask\n     */\n  }, {\n    key: \"_getImport\",\n    value: function () {\n      var _getImport2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee94(id) {\n        return _regeneratorRuntime.wrap(function _callee94$(_context94) {\n          while (1) {\n            switch (_context94.prev = _context94.next) {\n              case 0:\n                _context94.next = 2;\n                return this.get(this.baseURL + \"/imports/\".concat(encodeURIComponent(id)));\n              case 2:\n                return _context94.abrupt(\"return\", _context94.sent);\n              case 3:\n              case \"end\":\n                return _context94.stop();\n            }\n          }\n        }, _callee94, this);\n      }));\n      function _getImport(_x135) {\n        return _getImport2.apply(this, arguments);\n      }\n      return _getImport;\n    }()\n    /**\n     * _listImports - Lists Import Tasks.\n     *\n     * Note: Do not use this.\n     * It is present for internal usage only.\n     * This function can, and will, break and/or be removed at any point in time.\n     *\n     * @private\n     * @param {ListImportsPaginationOptions} options pagination options\n     *\n     * @return {APIResponse & ListImportsResponse} An ImportTask\n     */\n  }, {\n    key: \"_listImports\",\n    value: function () {\n      var _listImports2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee95(options) {\n        return _regeneratorRuntime.wrap(function _callee95$(_context95) {\n          while (1) {\n            switch (_context95.prev = _context95.next) {\n              case 0:\n                _context95.next = 2;\n                return this.get(this.baseURL + \"/imports\", options);\n              case 2:\n                return _context95.abrupt(\"return\", _context95.sent);\n              case 3:\n              case \"end\":\n                return _context95.stop();\n            }\n          }\n        }, _callee95, this);\n      }));\n      function _listImports(_x136) {\n        return _listImports2.apply(this, arguments);\n      }\n      return _listImports;\n    }()\n    /**\n     * upsertPushProvider - Create or Update a push provider\n     *\n     * Note: Works only for v2 push version is enabled on app settings.\n     *\n     * @param {PushProviderConfig} configuration of the provider you want to create or update\n     *\n     * @return {APIResponse & PushProviderUpsertResponse} A push provider\n     */\n  }, {\n    key: \"upsertPushProvider\",\n    value: function () {\n      var _upsertPushProvider = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee96(pushProvider) {\n        return _regeneratorRuntime.wrap(function _callee96$(_context96) {\n          while (1) {\n            switch (_context96.prev = _context96.next) {\n              case 0:\n                _context96.next = 2;\n                return this.post(this.baseURL + \"/push_providers\", {\n                  push_provider: pushProvider\n                });\n              case 2:\n                return _context96.abrupt(\"return\", _context96.sent);\n              case 3:\n              case \"end\":\n                return _context96.stop();\n            }\n          }\n        }, _callee96, this);\n      }));\n      function upsertPushProvider(_x137) {\n        return _upsertPushProvider.apply(this, arguments);\n      }\n      return upsertPushProvider;\n    }()\n    /**\n     * deletePushProvider - Delete a push provider\n     *\n     * Note: Works only for v2 push version is enabled on app settings.\n     *\n     * @param {PushProviderID} type and foreign id of the push provider to be deleted\n     *\n     * @return {APIResponse} An API response\n     */\n  }, {\n    key: \"deletePushProvider\",\n    value: function () {\n      var _deletePushProvider = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee97(_ref14) {\n        var type, name;\n        return _regeneratorRuntime.wrap(function _callee97$(_context97) {\n          while (1) {\n            switch (_context97.prev = _context97.next) {\n              case 0:\n                type = _ref14.type, name = _ref14.name;\n                _context97.next = 3;\n                return this.delete(this.baseURL + \"/push_providers/\".concat(encodeURIComponent(type), \"/\").concat(encodeURIComponent(name)));\n              case 3:\n                return _context97.abrupt(\"return\", _context97.sent);\n              case 4:\n              case \"end\":\n                return _context97.stop();\n            }\n          }\n        }, _callee97, this);\n      }));\n      function deletePushProvider(_x138) {\n        return _deletePushProvider.apply(this, arguments);\n      }\n      return deletePushProvider;\n    }()\n    /**\n     * listPushProviders - Get all push providers in the app\n     *\n     * Note: Works only for v2 push version is enabled on app settings.\n     *\n     * @return {APIResponse & PushProviderListResponse} A push provider\n     */\n  }, {\n    key: \"listPushProviders\",\n    value: function () {\n      var _listPushProviders = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee98() {\n        return _regeneratorRuntime.wrap(function _callee98$(_context98) {\n          while (1) {\n            switch (_context98.prev = _context98.next) {\n              case 0:\n                _context98.next = 2;\n                return this.get(this.baseURL + \"/push_providers\");\n              case 2:\n                return _context98.abrupt(\"return\", _context98.sent);\n              case 3:\n              case \"end\":\n                return _context98.stop();\n            }\n          }\n        }, _callee98, this);\n      }));\n      function listPushProviders() {\n        return _listPushProviders.apply(this, arguments);\n      }\n      return listPushProviders;\n    }()\n    /**\n     * creates an abort controller that will be used by the next HTTP Request.\n     */\n  }, {\n    key: \"createAbortControllerForNextRequest\",\n    value: function createAbortControllerForNextRequest() {\n      return this.nextRequestAbortController = new AbortController();\n    }\n    /**\n     * commits a pending message, making it visible in the channel and for other users\n     * @param id the message id\n     *\n     * @return {APIResponse & MessageResponse} The message\n     */\n  }, {\n    key: \"commitMessage\",\n    value: function () {\n      var _commitMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee99(id) {\n        return _regeneratorRuntime.wrap(function _callee99$(_context99) {\n          while (1) {\n            switch (_context99.prev = _context99.next) {\n              case 0:\n                _context99.next = 2;\n                return this.post(this.baseURL + \"/messages/\".concat(encodeURIComponent(id), \"/commit\"));\n              case 2:\n                return _context99.abrupt(\"return\", _context99.sent);\n              case 3:\n              case \"end\":\n                return _context99.stop();\n            }\n          }\n        }, _callee99, this);\n      }));\n      function commitMessage(_x139) {\n        return _commitMessage.apply(this, arguments);\n      }\n      return commitMessage;\n    }()\n    /**\n     * Creates a poll\n     * @param poll PollData The poll that will be created\n     * @param userId string The user id (only serverside)\n     * @returns {APIResponse & CreatePollAPIResponse} The poll\n     */\n  }, {\n    key: \"createPoll\",\n    value: function () {\n      var _createPoll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee100(poll, userId) {\n        return _regeneratorRuntime.wrap(function _callee100$(_context100) {\n          while (1) {\n            switch (_context100.prev = _context100.next) {\n              case 0:\n                _context100.next = 2;\n                return this.post(this.baseURL + \"/polls\", _objectSpread$1(_objectSpread$1({}, poll), userId ? {\n                  user_id: userId\n                } : {}));\n              case 2:\n                return _context100.abrupt(\"return\", _context100.sent);\n              case 3:\n              case \"end\":\n                return _context100.stop();\n            }\n          }\n        }, _callee100, this);\n      }));\n      function createPoll(_x140, _x141) {\n        return _createPoll.apply(this, arguments);\n      }\n      return createPoll;\n    }()\n    /**\n     * Retrieves a poll\n     * @param id string The poll id\n     *  @param userId string The user id (only serverside)\n     * @returns {APIResponse & GetPollAPIResponse} The poll\n     */\n  }, {\n    key: \"getPoll\",\n    value: function () {\n      var _getPoll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee101(id, userId) {\n        return _regeneratorRuntime.wrap(function _callee101$(_context101) {\n          while (1) {\n            switch (_context101.prev = _context101.next) {\n              case 0:\n                _context101.next = 2;\n                return this.get(this.baseURL + \"/polls/\".concat(encodeURIComponent(id)), userId ? {\n                  user_id: userId\n                } : {});\n              case 2:\n                return _context101.abrupt(\"return\", _context101.sent);\n              case 3:\n              case \"end\":\n                return _context101.stop();\n            }\n          }\n        }, _callee101, this);\n      }));\n      function getPoll(_x142, _x143) {\n        return _getPoll.apply(this, arguments);\n      }\n      return getPoll;\n    }()\n    /**\n     * Updates a poll\n     * @param poll PollData The poll that will be updated\n     * @param userId string The user id (only serverside)\n     * @returns {APIResponse & PollResponse} The poll\n     */\n  }, {\n    key: \"updatePoll\",\n    value: function () {\n      var _updatePoll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee102(poll, userId) {\n        return _regeneratorRuntime.wrap(function _callee102$(_context102) {\n          while (1) {\n            switch (_context102.prev = _context102.next) {\n              case 0:\n                _context102.next = 2;\n                return this.put(this.baseURL + \"/polls\", _objectSpread$1(_objectSpread$1({}, poll), userId ? {\n                  user_id: userId\n                } : {}));\n              case 2:\n                return _context102.abrupt(\"return\", _context102.sent);\n              case 3:\n              case \"end\":\n                return _context102.stop();\n            }\n          }\n        }, _callee102, this);\n      }));\n      function updatePoll(_x144, _x145) {\n        return _updatePoll.apply(this, arguments);\n      }\n      return updatePoll;\n    }()\n    /**\n     * Partially updates a poll\n     * @param id string The poll id\n     * @param {PartialPollUpdate<StreamChatGenerics>} partialPollObject which should contain id and any of \"set\" or \"unset\" params;\n     * @param userId string The user id (only serverside)\n     * example: {id: \"44f26af5-f2be-4fa7-9dac-71cf893781de\", set:{field: value}, unset:[\"field2\"]}\n     * @returns {APIResponse & UpdatePollAPIResponse} The poll\n     */\n  }, {\n    key: \"partialUpdatePoll\",\n    value: function () {\n      var _partialUpdatePoll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee103(id, partialPollObject, userId) {\n        return _regeneratorRuntime.wrap(function _callee103$(_context103) {\n          while (1) {\n            switch (_context103.prev = _context103.next) {\n              case 0:\n                _context103.next = 2;\n                return this.patch(this.baseURL + \"/polls/\".concat(encodeURIComponent(id)), _objectSpread$1(_objectSpread$1({}, partialPollObject), userId ? {\n                  user_id: userId\n                } : {}));\n              case 2:\n                return _context103.abrupt(\"return\", _context103.sent);\n              case 3:\n              case \"end\":\n                return _context103.stop();\n            }\n          }\n        }, _callee103, this);\n      }));\n      function partialUpdatePoll(_x146, _x147, _x148) {\n        return _partialUpdatePoll.apply(this, arguments);\n      }\n      return partialUpdatePoll;\n    }()\n    /**\n     * Delete a poll\n     * @param id string The poll id\n     * @param userId string The user id (only serverside)\n     * @returns\n     */\n  }, {\n    key: \"deletePoll\",\n    value: function () {\n      var _deletePoll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee104(id, userId) {\n        return _regeneratorRuntime.wrap(function _callee104$(_context104) {\n          while (1) {\n            switch (_context104.prev = _context104.next) {\n              case 0:\n                _context104.next = 2;\n                return this.delete(this.baseURL + \"/polls/\".concat(encodeURIComponent(id)), _objectSpread$1({}, userId ? {\n                  user_id: userId\n                } : {}));\n              case 2:\n                return _context104.abrupt(\"return\", _context104.sent);\n              case 3:\n              case \"end\":\n                return _context104.stop();\n            }\n          }\n        }, _callee104, this);\n      }));\n      function deletePoll(_x149, _x150) {\n        return _deletePoll.apply(this, arguments);\n      }\n      return deletePoll;\n    }()\n    /**\n     * Close a poll\n     * @param id string The poll id\n     * @param userId string The user id (only serverside)\n     * @returns {APIResponse & UpdatePollAPIResponse} The poll\n     */\n  }, {\n    key: \"closePoll\",\n    value: function () {\n      var _closePoll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee105(id, userId) {\n        return _regeneratorRuntime.wrap(function _callee105$(_context105) {\n          while (1) {\n            switch (_context105.prev = _context105.next) {\n              case 0:\n                return _context105.abrupt(\"return\", this.partialUpdatePoll(id, {\n                  set: {\n                    is_closed: true\n                  }\n                }, userId));\n              case 1:\n              case \"end\":\n                return _context105.stop();\n            }\n          }\n        }, _callee105, this);\n      }));\n      function closePoll(_x151, _x152) {\n        return _closePoll.apply(this, arguments);\n      }\n      return closePoll;\n    }()\n    /**\n     * Creates a poll option\n     * @param pollId string The poll id\n     * @param option PollOptionData The poll option that will be created\n     * @param userId string The user id (only serverside)\n     * @returns {APIResponse & PollOptionResponse} The poll option\n     */\n  }, {\n    key: \"createPollOption\",\n    value: function () {\n      var _createPollOption = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee106(pollId, option, userId) {\n        return _regeneratorRuntime.wrap(function _callee106$(_context106) {\n          while (1) {\n            switch (_context106.prev = _context106.next) {\n              case 0:\n                _context106.next = 2;\n                return this.post(this.baseURL + \"/polls/\".concat(encodeURIComponent(pollId), \"/options\"), _objectSpread$1(_objectSpread$1({}, option), userId ? {\n                  user_id: userId\n                } : {}));\n              case 2:\n                return _context106.abrupt(\"return\", _context106.sent);\n              case 3:\n              case \"end\":\n                return _context106.stop();\n            }\n          }\n        }, _callee106, this);\n      }));\n      function createPollOption(_x153, _x154, _x155) {\n        return _createPollOption.apply(this, arguments);\n      }\n      return createPollOption;\n    }()\n    /**\n     * Retrieves a poll option\n     * @param pollId string The poll id\n     * @param optionId string The poll option id\n     * @param userId string The user id (only serverside)\n     * @returns {APIResponse & PollOptionResponse} The poll option\n     */\n  }, {\n    key: \"getPollOption\",\n    value: function () {\n      var _getPollOption = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee107(pollId, optionId, userId) {\n        return _regeneratorRuntime.wrap(function _callee107$(_context107) {\n          while (1) {\n            switch (_context107.prev = _context107.next) {\n              case 0:\n                _context107.next = 2;\n                return this.get(this.baseURL + \"/polls/\".concat(encodeURIComponent(pollId), \"/options/\").concat(encodeURIComponent(optionId)), userId ? {\n                  user_id: userId\n                } : {});\n              case 2:\n                return _context107.abrupt(\"return\", _context107.sent);\n              case 3:\n              case \"end\":\n                return _context107.stop();\n            }\n          }\n        }, _callee107, this);\n      }));\n      function getPollOption(_x156, _x157, _x158) {\n        return _getPollOption.apply(this, arguments);\n      }\n      return getPollOption;\n    }()\n    /**\n     * Updates a poll option\n     * @param pollId string The poll id\n     * @param option PollOptionData The poll option that will be updated\n     * @param userId string The user id (only serverside)\n     * @returns\n     */\n  }, {\n    key: \"updatePollOption\",\n    value: function () {\n      var _updatePollOption = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee108(pollId, option, userId) {\n        return _regeneratorRuntime.wrap(function _callee108$(_context108) {\n          while (1) {\n            switch (_context108.prev = _context108.next) {\n              case 0:\n                _context108.next = 2;\n                return this.put(this.baseURL + \"/polls/\".concat(encodeURIComponent(pollId), \"/options\"), _objectSpread$1(_objectSpread$1({}, option), userId ? {\n                  user_id: userId\n                } : {}));\n              case 2:\n                return _context108.abrupt(\"return\", _context108.sent);\n              case 3:\n              case \"end\":\n                return _context108.stop();\n            }\n          }\n        }, _callee108, this);\n      }));\n      function updatePollOption(_x159, _x160, _x161) {\n        return _updatePollOption.apply(this, arguments);\n      }\n      return updatePollOption;\n    }()\n    /**\n     * Delete a poll option\n     * @param pollId string The poll id\n     * @param optionId string The poll option id\n     * @param userId string The user id (only serverside)\n     * @returns {APIResponse} The poll option\n     */\n  }, {\n    key: \"deletePollOption\",\n    value: function () {\n      var _deletePollOption = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee109(pollId, optionId, userId) {\n        return _regeneratorRuntime.wrap(function _callee109$(_context109) {\n          while (1) {\n            switch (_context109.prev = _context109.next) {\n              case 0:\n                _context109.next = 2;\n                return this.delete(this.baseURL + \"/polls/\".concat(encodeURIComponent(pollId), \"/options/\").concat(encodeURIComponent(optionId)), userId ? {\n                  user_id: userId\n                } : {});\n              case 2:\n                return _context109.abrupt(\"return\", _context109.sent);\n              case 3:\n              case \"end\":\n                return _context109.stop();\n            }\n          }\n        }, _callee109, this);\n      }));\n      function deletePollOption(_x162, _x163, _x164) {\n        return _deletePollOption.apply(this, arguments);\n      }\n      return deletePollOption;\n    }()\n    /**\n     * Cast vote on a poll\n     * @param messageId string The message id\n     * @param pollId string The poll id\n     * @param vote PollVoteData The vote that will be casted\n     * @param userId string The user id (only serverside)\n     * @returns {APIResponse & CastVoteAPIResponse} The poll vote\n     */\n  }, {\n    key: \"castPollVote\",\n    value: function () {\n      var _castPollVote = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee110(messageId, pollId, vote, userId) {\n        return _regeneratorRuntime.wrap(function _callee110$(_context110) {\n          while (1) {\n            switch (_context110.prev = _context110.next) {\n              case 0:\n                _context110.next = 2;\n                return this.post(this.baseURL + \"/messages/\".concat(encodeURIComponent(messageId), \"/polls/\").concat(encodeURIComponent(pollId), \"/vote\"), _objectSpread$1({\n                  vote: vote\n                }, userId ? {\n                  user_id: userId\n                } : {}));\n              case 2:\n                return _context110.abrupt(\"return\", _context110.sent);\n              case 3:\n              case \"end\":\n                return _context110.stop();\n            }\n          }\n        }, _callee110, this);\n      }));\n      function castPollVote(_x165, _x166, _x167, _x168) {\n        return _castPollVote.apply(this, arguments);\n      }\n      return castPollVote;\n    }()\n    /**\n     * Add a poll answer\n     * @param messageId string The message id\n     * @param pollId string The poll id\n     * @param answerText string The answer text\n     * @param userId string The user id (only serverside)\n     */\n  }, {\n    key: \"addPollAnswer\",\n    value: function () {\n      var _addPollAnswer = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee111(messageId, pollId, answerText, userId) {\n        return _regeneratorRuntime.wrap(function _callee111$(_context111) {\n          while (1) {\n            switch (_context111.prev = _context111.next) {\n              case 0:\n                return _context111.abrupt(\"return\", this.castPollVote(messageId, pollId, {\n                  answer_text: answerText\n                }, userId));\n              case 1:\n              case \"end\":\n                return _context111.stop();\n            }\n          }\n        }, _callee111, this);\n      }));\n      function addPollAnswer(_x169, _x170, _x171, _x172) {\n        return _addPollAnswer.apply(this, arguments);\n      }\n      return addPollAnswer;\n    }()\n  }, {\n    key: \"removePollVote\",\n    value: function () {\n      var _removePollVote = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee112(messageId, pollId, voteId, userId) {\n        return _regeneratorRuntime.wrap(function _callee112$(_context112) {\n          while (1) {\n            switch (_context112.prev = _context112.next) {\n              case 0:\n                _context112.next = 2;\n                return this.delete(this.baseURL + \"/messages/\".concat(encodeURIComponent(messageId), \"/polls/\").concat(encodeURIComponent(pollId), \"/vote/\").concat(encodeURIComponent(voteId)), _objectSpread$1({}, userId ? {\n                  user_id: userId\n                } : {}));\n              case 2:\n                return _context112.abrupt(\"return\", _context112.sent);\n              case 3:\n              case \"end\":\n                return _context112.stop();\n            }\n          }\n        }, _callee112, this);\n      }));\n      function removePollVote(_x173, _x174, _x175, _x176) {\n        return _removePollVote.apply(this, arguments);\n      }\n      return removePollVote;\n    }()\n    /**\n     * Queries polls\n     * @param filter\n     * @param sort\n     * @param options Option object, {limit: 10, offset:0}\n     * @param userId string The user id (only serverside)\n     * @returns {APIResponse & QueryPollsResponse} The polls\n     */\n  }, {\n    key: \"queryPolls\",\n    value: function () {\n      var _queryPolls = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee113() {\n        var filter,\n          sort,\n          options,\n          userId,\n          q,\n          _args113 = arguments;\n        return _regeneratorRuntime.wrap(function _callee113$(_context113) {\n          while (1) {\n            switch (_context113.prev = _context113.next) {\n              case 0:\n                filter = _args113.length > 0 && _args113[0] !== undefined ? _args113[0] : {};\n                sort = _args113.length > 1 && _args113[1] !== undefined ? _args113[1] : [];\n                options = _args113.length > 2 && _args113[2] !== undefined ? _args113[2] : {};\n                userId = _args113.length > 3 ? _args113[3] : undefined;\n                q = userId ? \"?user_id=\".concat(userId) : '';\n                _context113.next = 7;\n                return this.post(this.baseURL + \"/polls/query\".concat(q), _objectSpread$1({\n                  filter: filter,\n                  sort: normalizeQuerySort(sort)\n                }, options));\n              case 7:\n                return _context113.abrupt(\"return\", _context113.sent);\n              case 8:\n              case \"end\":\n                return _context113.stop();\n            }\n          }\n        }, _callee113, this);\n      }));\n      function queryPolls() {\n        return _queryPolls.apply(this, arguments);\n      }\n      return queryPolls;\n    }()\n    /**\n     * Queries poll votes\n     * @param pollId\n     * @param filter\n     * @param sort\n     * @param options Option object, {limit: 10, offset:0}\n     * @param userId string The user id (only serverside)\n     * @returns {APIResponse & PollVotesAPIResponse} The poll votes\n     */\n  }, {\n    key: \"queryPollVotes\",\n    value: function () {\n      var _queryPollVotes = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee114(pollId) {\n        var filter,\n          sort,\n          options,\n          userId,\n          q,\n          _args114 = arguments;\n        return _regeneratorRuntime.wrap(function _callee114$(_context114) {\n          while (1) {\n            switch (_context114.prev = _context114.next) {\n              case 0:\n                filter = _args114.length > 1 && _args114[1] !== undefined ? _args114[1] : {};\n                sort = _args114.length > 2 && _args114[2] !== undefined ? _args114[2] : [];\n                options = _args114.length > 3 && _args114[3] !== undefined ? _args114[3] : {};\n                userId = _args114.length > 4 ? _args114[4] : undefined;\n                q = userId ? \"?user_id=\".concat(userId) : '';\n                _context114.next = 7;\n                return this.post(this.baseURL + \"/polls/\".concat(encodeURIComponent(pollId), \"/votes\").concat(q), _objectSpread$1({\n                  filter: filter,\n                  sort: normalizeQuerySort(sort)\n                }, options));\n              case 7:\n                return _context114.abrupt(\"return\", _context114.sent);\n              case 8:\n              case \"end\":\n                return _context114.stop();\n            }\n          }\n        }, _callee114, this);\n      }));\n      function queryPollVotes(_x177) {\n        return _queryPollVotes.apply(this, arguments);\n      }\n      return queryPollVotes;\n    }()\n    /**\n     * Queries poll answers\n     * @param pollId\n     * @param filter\n     * @param sort\n     * @param options Option object, {limit: 10, offset:0}\n     * @param userId string The user id (only serverside)\n     * @returns {APIResponse & PollAnswersAPIResponse} The poll votes\n     */\n  }, {\n    key: \"queryPollAnswers\",\n    value: function () {\n      var _queryPollAnswers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee115(pollId) {\n        var filter,\n          sort,\n          options,\n          userId,\n          q,\n          _args115 = arguments;\n        return _regeneratorRuntime.wrap(function _callee115$(_context115) {\n          while (1) {\n            switch (_context115.prev = _context115.next) {\n              case 0:\n                filter = _args115.length > 1 && _args115[1] !== undefined ? _args115[1] : {};\n                sort = _args115.length > 2 && _args115[2] !== undefined ? _args115[2] : [];\n                options = _args115.length > 3 && _args115[3] !== undefined ? _args115[3] : {};\n                userId = _args115.length > 4 ? _args115[4] : undefined;\n                q = userId ? \"?user_id=\".concat(userId) : '';\n                _context115.next = 7;\n                return this.post(this.baseURL + \"/polls/\".concat(encodeURIComponent(pollId), \"/votes\").concat(q), _objectSpread$1({\n                  filter: _objectSpread$1(_objectSpread$1({}, filter), {}, {\n                    is_answer: true\n                  }),\n                  sort: normalizeQuerySort(sort)\n                }, options));\n              case 7:\n                return _context115.abrupt(\"return\", _context115.sent);\n              case 8:\n              case \"end\":\n                return _context115.stop();\n            }\n          }\n        }, _callee115, this);\n      }));\n      function queryPollAnswers(_x178) {\n        return _queryPollAnswers.apply(this, arguments);\n      }\n      return queryPollAnswers;\n    }()\n    /**\n     * Query message history\n     * @param filter\n     * @param sort\n     * @param options Option object, {limit: 10}\n     * @returns {APIResponse & QueryMessageHistoryResponse} The message histories\n     */\n  }, {\n    key: \"queryMessageHistory\",\n    value: function () {\n      var _queryMessageHistory = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee116() {\n        var filter,\n          sort,\n          options,\n          _args116 = arguments;\n        return _regeneratorRuntime.wrap(function _callee116$(_context116) {\n          while (1) {\n            switch (_context116.prev = _context116.next) {\n              case 0:\n                filter = _args116.length > 0 && _args116[0] !== undefined ? _args116[0] : {};\n                sort = _args116.length > 1 && _args116[1] !== undefined ? _args116[1] : [];\n                options = _args116.length > 2 && _args116[2] !== undefined ? _args116[2] : {};\n                _context116.next = 5;\n                return this.post(this.baseURL + '/messages/history', _objectSpread$1({\n                  filter: filter,\n                  sort: normalizeQuerySort(sort)\n                }, options));\n              case 5:\n                return _context116.abrupt(\"return\", _context116.sent);\n              case 6:\n              case \"end\":\n                return _context116.stop();\n            }\n          }\n        }, _callee116, this);\n      }));\n      function queryMessageHistory() {\n        return _queryMessageHistory.apply(this, arguments);\n      }\n      return queryMessageHistory;\n    }()\n    /**\n     * updateFlags - reviews/unflags flagged message\n     *\n     * @param {string[]} message_ids list of message IDs\n     * @param {string} options Option object in case user ID is set to review all the flagged messages by the user\n     * @param {string} reviewed_by user ID who reviewed the flagged message\n     * @returns {APIResponse}\n     */\n  }, {\n    key: \"updateFlags\",\n    value: function () {\n      var _updateFlags = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee117(message_ids, reviewed_by) {\n        var options,\n          _args117 = arguments;\n        return _regeneratorRuntime.wrap(function _callee117$(_context117) {\n          while (1) {\n            switch (_context117.prev = _context117.next) {\n              case 0:\n                options = _args117.length > 2 && _args117[2] !== undefined ? _args117[2] : {};\n                _context117.next = 3;\n                return this.post(this.baseURL + '/automod/v1/moderation/update_flags', _objectSpread$1({\n                  message_ids: message_ids,\n                  reviewed_by: reviewed_by\n                }, options));\n              case 3:\n                return _context117.abrupt(\"return\", _context117.sent);\n              case 4:\n              case \"end\":\n                return _context117.stop();\n            }\n          }\n        }, _callee117, this);\n      }));\n      function updateFlags(_x179, _x180) {\n        return _updateFlags.apply(this, arguments);\n      }\n      return updateFlags;\n    }()\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance(key, secretOrOptions, options) {\n      if (!StreamChat._instance) {\n        if (typeof secretOrOptions === 'string') {\n          StreamChat._instance = new StreamChat(key, secretOrOptions, options);\n        } else {\n          StreamChat._instance = new StreamChat(key, secretOrOptions);\n        }\n      }\n      return StreamChat._instance;\n    }\n  }]);\n  return StreamChat;\n}();\n_defineProperty(StreamChat, \"_instance\", void 0);\nvar EVENT_MAP = {\n  'channel.created': true,\n  'channel.deleted': true,\n  'channel.hidden': true,\n  'channel.kicked': true,\n  'channel.muted': true,\n  'channel.truncated': true,\n  'channel.unmuted': true,\n  'channel.updated': true,\n  'channel.visible': true,\n  'health.check': true,\n  'member.added': true,\n  'member.removed': true,\n  'member.updated': true,\n  'message.deleted': true,\n  'message.new': true,\n  'message.read': true,\n  'message.updated': true,\n  'message.undeleted': true,\n  'notification.added_to_channel': true,\n  'notification.channel_deleted': true,\n  'notification.channel_mutes_updated': true,\n  'notification.channel_truncated': true,\n  'notification.invite_accepted': true,\n  'notification.invite_rejected': true,\n  'notification.invited': true,\n  'notification.mark_read': true,\n  'notification.mark_unread': true,\n  'notification.message_new': true,\n  'notification.mutes_updated': true,\n  'notification.removed_from_channel': true,\n  'notification.thread_message_new': true,\n  'poll.closed': true,\n  'poll.updated': true,\n  'poll.vote_casted': true,\n  'poll.vote_changed': true,\n  'poll.vote_removed': true,\n  'reaction.deleted': true,\n  'reaction.new': true,\n  'reaction.updated': true,\n  'thread.updated': true,\n  'typing.start': true,\n  'typing.stop': true,\n  'user.banned': true,\n  'user.deleted': true,\n  'user.presence.changed': true,\n  'user.unbanned': true,\n  'user.unread_message_reminder': true,\n  'user.updated': true,\n  'user.watching.start': true,\n  'user.watching.stop': true,\n  // AI events\n  'ai_indicator.update': true,\n  'ai_indicator.stop': true,\n  'ai_indicator.clear': true,\n  // local events\n  'channels.queried': true,\n  'connection.changed': true,\n  'connection.recovered': true,\n  'transport.changed': true,\n  'capabilities.changed': true\n};\nvar Allow = 'Allow';\nvar Deny = 'Deny';\nvar AnyResource = ['*'];\nvar AnyRole = ['*'];\nvar MaxPriority = 999;\nvar MinPriority = 1; // deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\n\nvar Permission = function Permission(name, priority) {\n  var resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AnyResource;\n  var roles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : AnyRole;\n  var owner = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var action = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Allow;\n  _classCallCheck(this, Permission);\n  _defineProperty(this, \"name\", void 0);\n  _defineProperty(this, \"action\", void 0);\n  _defineProperty(this, \"owner\", void 0);\n  _defineProperty(this, \"priority\", void 0);\n  _defineProperty(this, \"resources\", void 0);\n  _defineProperty(this, \"roles\", void 0);\n  this.name = name;\n  this.action = action;\n  this.owner = owner;\n  this.priority = priority;\n  this.resources = resources;\n  this.roles = roles;\n}; // deprecated\n\nvar AllowAll = new Permission('Allow all', MaxPriority, AnyResource, AnyRole, false, Allow); // deprecated\n\nvar DenyAll = new Permission('Deny all', MinPriority, AnyResource, AnyRole, false, Deny);\nvar BuiltinRoles = {\n  Admin: 'admin',\n  Anonymous: 'anonymous',\n  ChannelMember: 'channel_member',\n  ChannelModerator: 'channel_moderator',\n  Guest: 'guest',\n  User: 'user'\n};\nvar BuiltinPermissions = {\n  AddLinks: 'Add Links',\n  BanUser: 'Ban User',\n  CreateChannel: 'Create Channel',\n  CreateMessage: 'Create Message',\n  CreateReaction: 'Create Reaction',\n  DeleteAnyAttachment: 'Delete Any Attachment',\n  DeleteAnyChannel: 'Delete Any Channel',\n  DeleteAnyMessage: 'Delete Any Message',\n  DeleteAnyReaction: 'Delete Any Reaction',\n  DeleteOwnAttachment: 'Delete Own Attachment',\n  DeleteOwnChannel: 'Delete Own Channel',\n  DeleteOwnMessage: 'Delete Own Message',\n  DeleteOwnReaction: 'Delete Own Reaction',\n  ReadAnyChannel: 'Read Any Channel',\n  ReadOwnChannel: 'Read Own Channel',\n  RunMessageAction: 'Run Message Action',\n  UpdateAnyChannel: 'Update Any Channel',\n  UpdateAnyMessage: 'Update Any Message',\n  UpdateMembersAnyChannel: 'Update Members Any Channel',\n  UpdateMembersOwnChannel: 'Update Members Own Channel',\n  UpdateOwnChannel: 'Update Own Channel',\n  UpdateOwnMessage: 'Update Own Message',\n  UploadAttachment: 'Upload Attachment',\n  UseFrozenChannel: 'Send messages and reactions to frozen channels'\n};\nvar _excluded = [\"lastQueryError\"];\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar DEFAULT_SEARCH_SOURCE_OPTIONS = {\n  debounceMs: 300,\n  pageSize: 10\n};\nvar BaseSearchSource = /*#__PURE__*/function () {\n  function BaseSearchSource(options) {\n    var _this = this;\n    _classCallCheck(this, BaseSearchSource);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"pageSize\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"searchDebounced\", void 0);\n    _defineProperty(this, \"setDebounceOptions\", function (_ref) {\n      var debounceMs = _ref.debounceMs;\n      _this.searchDebounced = debounce(_this.executeQuery.bind(_this), debounceMs);\n    });\n    _defineProperty(this, \"activate\", function () {\n      if (_this.isActive) return;\n      _this.state.partialNext({\n        isActive: true\n      });\n    });\n    _defineProperty(this, \"deactivate\", function () {\n      if (!_this.isActive) return;\n      _this.state.partialNext({\n        isActive: false\n      });\n    });\n    _defineProperty(this, \"search\", function (searchQuery) {\n      _this.searchDebounced(searchQuery);\n    });\n    var _DEFAULT_SEARCH_SOURC = _objectSpread(_objectSpread({}, DEFAULT_SEARCH_SOURCE_OPTIONS), options),\n      _debounceMs = _DEFAULT_SEARCH_SOURC.debounceMs,\n      pageSize = _DEFAULT_SEARCH_SOURC.pageSize;\n    this.pageSize = pageSize;\n    this.state = new StateStore(this.initialState);\n    this.setDebounceOptions({\n      debounceMs: _debounceMs\n    });\n  }\n  _createClass(BaseSearchSource, [{\n    key: \"lastQueryError\",\n    get: function get() {\n      return this.state.getLatestValue().lastQueryError;\n    }\n  }, {\n    key: \"hasNext\",\n    get: function get() {\n      return this.state.getLatestValue().hasNext;\n    }\n  }, {\n    key: \"hasResults\",\n    get: function get() {\n      return Array.isArray(this.state.getLatestValue().items);\n    }\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return this.state.getLatestValue().isActive;\n    }\n  }, {\n    key: \"isLoading\",\n    get: function get() {\n      return this.state.getLatestValue().isLoading;\n    }\n  }, {\n    key: \"initialState\",\n    get: function get() {\n      return {\n        hasNext: true,\n        isActive: false,\n        isLoading: false,\n        items: undefined,\n        lastQueryError: undefined,\n        next: undefined,\n        offset: 0,\n        searchQuery: ''\n      };\n    }\n  }, {\n    key: \"items\",\n    get: function get() {\n      return this.state.getLatestValue().items;\n    }\n  }, {\n    key: \"next\",\n    get: function get() {\n      return this.state.getLatestValue().next;\n    }\n  }, {\n    key: \"offset\",\n    get: function get() {\n      return this.state.getLatestValue().offset;\n    }\n  }, {\n    key: \"searchQuery\",\n    get: function get() {\n      return this.state.getLatestValue().searchQuery;\n    }\n  }, {\n    key: \"executeQuery\",\n    value: function () {\n      var _executeQuery = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(newSearchString) {\n        var hasNewSearchQuery, searchString, stateUpdate, results, _items, next, _this$offset;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                hasNewSearchQuery = typeof newSearchString !== 'undefined';\n                searchString = newSearchString !== null && newSearchString !== void 0 ? newSearchString : this.searchQuery;\n                if (!(!this.isActive || this.isLoading || !this.hasNext && !hasNewSearchQuery || !searchString)) {\n                  _context.next = 4;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 4:\n                if (hasNewSearchQuery) {\n                  this.state.next(_objectSpread(_objectSpread({}, this.initialState), {}, {\n                    isActive: this.isActive,\n                    isLoading: true,\n                    searchQuery: newSearchString !== null && newSearchString !== void 0 ? newSearchString : ''\n                  }));\n                } else {\n                  this.state.partialNext({\n                    isLoading: true\n                  });\n                }\n                stateUpdate = {};\n                _context.prev = 6;\n                _context.next = 9;\n                return this.query(searchString);\n              case 9:\n                results = _context.sent;\n                if (results) {\n                  _context.next = 12;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 12:\n                _items = results.items, next = results.next;\n                if (next) {\n                  stateUpdate.next = next;\n                  stateUpdate.hasNext = !!next;\n                } else {\n                  stateUpdate.offset = ((_this$offset = this.offset) !== null && _this$offset !== void 0 ? _this$offset : 0) + _items.length;\n                  stateUpdate.hasNext = _items.length === this.pageSize;\n                }\n                _context.next = 16;\n                return this.filterQueryResults(_items);\n              case 16:\n                stateUpdate.items = _context.sent;\n                _context.next = 22;\n                break;\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](6);\n                stateUpdate.lastQueryError = _context.t0;\n              case 22:\n                _context.prev = 22;\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                this.state.next(function (_ref2) {\n                  var _current$items;\n                  _ref2.lastQueryError;\n                  var current = _objectWithoutProperties(_ref2, _excluded);\n                  return _objectSpread(_objectSpread(_objectSpread({}, current), stateUpdate), {}, {\n                    isLoading: false,\n                    items: [].concat(_toConsumableArray((_current$items = current.items) !== null && _current$items !== void 0 ? _current$items : []), _toConsumableArray(stateUpdate.items || []))\n                  });\n                });\n                return _context.finish(22);\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[6, 19, 22, 25]]);\n      }));\n      function executeQuery(_x) {\n        return _executeQuery.apply(this, arguments);\n      }\n      return executeQuery;\n    }()\n  }, {\n    key: \"resetState\",\n    value: function resetState() {\n      this.state.next(this.initialState);\n    }\n  }]);\n  return BaseSearchSource;\n}();\nvar UserSearchSource = /*#__PURE__*/function (_BaseSearchSource) {\n  _inherits(UserSearchSource, _BaseSearchSource);\n  var _super = _createSuper(UserSearchSource);\n  function UserSearchSource(client, options) {\n    var _this2;\n    _classCallCheck(this, UserSearchSource);\n    _this2 = _super.call(this, options);\n    _defineProperty(_assertThisInitialized(_this2), \"type\", 'users');\n    _defineProperty(_assertThisInitialized(_this2), \"client\", void 0);\n    _defineProperty(_assertThisInitialized(_this2), \"filters\", void 0);\n    _defineProperty(_assertThisInitialized(_this2), \"sort\", void 0);\n    _defineProperty(_assertThisInitialized(_this2), \"searchOptions\", void 0);\n    _this2.client = client;\n    return _this2;\n  }\n  _createClass(UserSearchSource, [{\n    key: \"query\",\n    value: function () {\n      var _query = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(searchQuery) {\n        var filters, sort, options, _yield$this$client$qu, users;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                filters = _objectSpread({\n                  $or: [{\n                    id: {\n                      $autocomplete: searchQuery\n                    }\n                  }, {\n                    name: {\n                      $autocomplete: searchQuery\n                    }\n                  }]\n                }, this.filters);\n                sort = _objectSpread({\n                  id: 1\n                }, this.sort);\n                options = _objectSpread(_objectSpread({}, this.searchOptions), {}, {\n                  limit: this.pageSize,\n                  offset: this.offset\n                });\n                _context2.next = 5;\n                return this.client.queryUsers(filters, sort, options);\n              case 5:\n                _yield$this$client$qu = _context2.sent;\n                users = _yield$this$client$qu.users;\n                return _context2.abrupt(\"return\", {\n                  items: users\n                });\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function query(_x2) {\n        return _query.apply(this, arguments);\n      }\n      return query;\n    }()\n  }, {\n    key: \"filterQueryResults\",\n    value: function filterQueryResults(items) {\n      var _this3 = this;\n      return items.filter(function (u) {\n        var _this3$client$user;\n        return u.id !== ((_this3$client$user = _this3.client.user) === null || _this3$client$user === void 0 ? void 0 : _this3$client$user.id);\n      });\n    }\n  }]);\n  return UserSearchSource;\n}(BaseSearchSource);\nvar ChannelSearchSource = /*#__PURE__*/function (_BaseSearchSource2) {\n  _inherits(ChannelSearchSource, _BaseSearchSource2);\n  var _super2 = _createSuper(ChannelSearchSource);\n  function ChannelSearchSource(client, options) {\n    var _this4;\n    _classCallCheck(this, ChannelSearchSource);\n    _this4 = _super2.call(this, options);\n    _defineProperty(_assertThisInitialized(_this4), \"type\", 'channels');\n    _defineProperty(_assertThisInitialized(_this4), \"client\", void 0);\n    _defineProperty(_assertThisInitialized(_this4), \"filters\", void 0);\n    _defineProperty(_assertThisInitialized(_this4), \"sort\", void 0);\n    _defineProperty(_assertThisInitialized(_this4), \"searchOptions\", void 0);\n    _this4.client = client;\n    return _this4;\n  }\n  _createClass(ChannelSearchSource, [{\n    key: \"query\",\n    value: function () {\n      var _query2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(searchQuery) {\n        var _this$sort;\n        var filters, sort, options, items;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                filters = _objectSpread({\n                  members: {\n                    $in: [this.client.userID]\n                  },\n                  name: {\n                    $autocomplete: searchQuery\n                  }\n                }, this.filters);\n                sort = (_this$sort = this.sort) !== null && _this$sort !== void 0 ? _this$sort : {};\n                options = _objectSpread(_objectSpread({}, this.searchOptions), {}, {\n                  limit: this.pageSize,\n                  offset: this.offset\n                });\n                _context3.next = 5;\n                return this.client.queryChannels(filters, sort, options);\n              case 5:\n                items = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  items: items\n                });\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function query(_x3) {\n        return _query2.apply(this, arguments);\n      }\n      return query;\n    }()\n  }, {\n    key: \"filterQueryResults\",\n    value: function filterQueryResults(items) {\n      return items;\n    }\n  }]);\n  return ChannelSearchSource;\n}(BaseSearchSource);\nvar MessageSearchSource = /*#__PURE__*/function (_BaseSearchSource3) {\n  _inherits(MessageSearchSource, _BaseSearchSource3);\n  var _super3 = _createSuper(MessageSearchSource);\n  function MessageSearchSource(client, options) {\n    var _this5;\n    _classCallCheck(this, MessageSearchSource);\n    _this5 = _super3.call(this, options);\n    _defineProperty(_assertThisInitialized(_this5), \"type\", 'messages');\n    _defineProperty(_assertThisInitialized(_this5), \"client\", void 0);\n    _defineProperty(_assertThisInitialized(_this5), \"messageSearchChannelFilters\", void 0);\n    _defineProperty(_assertThisInitialized(_this5), \"messageSearchFilters\", void 0);\n    _defineProperty(_assertThisInitialized(_this5), \"messageSearchSort\", void 0);\n    _defineProperty(_assertThisInitialized(_this5), \"channelQueryFilters\", void 0);\n    _defineProperty(_assertThisInitialized(_this5), \"channelQuerySort\", void 0);\n    _defineProperty(_assertThisInitialized(_this5), \"channelQueryOptions\", void 0);\n    _this5.client = client;\n    return _this5;\n  }\n  _createClass(MessageSearchSource, [{\n    key: \"query\",\n    value: function () {\n      var _query3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(searchQuery) {\n        var _this6 = this;\n        var channelFilters, messageFilters, sort, options, _yield$this$client$se, next, results, items, cids, allChannelsLoadedLocally;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.client.userID) {\n                  _context4.next = 2;\n                  break;\n                }\n                return _context4.abrupt(\"return\", {\n                  items: []\n                });\n              case 2:\n                channelFilters = _objectSpread({\n                  members: {\n                    $in: [this.client.userID]\n                  }\n                }, this.messageSearchChannelFilters);\n                messageFilters = _objectSpread({\n                  text: searchQuery,\n                  type: 'regular'\n                }, this.messageSearchFilters);\n                sort = _objectSpread({\n                  created_at: -1\n                }, this.messageSearchSort);\n                options = {\n                  limit: this.pageSize,\n                  next: this.next,\n                  sort: sort\n                };\n                _context4.next = 8;\n                return this.client.search(channelFilters, messageFilters, options);\n              case 8:\n                _yield$this$client$se = _context4.sent;\n                next = _yield$this$client$se.next;\n                results = _yield$this$client$se.results;\n                items = results.map(function (_ref3) {\n                  var message = _ref3.message;\n                  return message;\n                });\n                cids = Array.from(items.reduce(function (acc, message) {\n                  if (message.cid && !_this6.client.activeChannels[message.cid]) acc.add(message.cid);\n                  return acc;\n                }, new Set()) // keep the cids unique\n                );\n                allChannelsLoadedLocally = cids.length === 0;\n                if (allChannelsLoadedLocally) {\n                  _context4.next = 17;\n                  break;\n                }\n                _context4.next = 17;\n                return this.client.queryChannels(_objectSpread({\n                  cid: {\n                    $in: cids\n                  }\n                }, this.channelQueryFilters), _objectSpread({\n                  last_message_at: -1\n                }, this.channelQuerySort), this.channelQueryOptions);\n              case 17:\n                return _context4.abrupt(\"return\", {\n                  items: items,\n                  next: next\n                });\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function query(_x4) {\n        return _query3.apply(this, arguments);\n      }\n      return query;\n    }()\n  }, {\n    key: \"filterQueryResults\",\n    value: function filterQueryResults(items) {\n      return items;\n    }\n  }]);\n  return MessageSearchSource;\n}(BaseSearchSource);\nvar SearchController = /*#__PURE__*/function () {\n  /**\n   * Not intended for direct use by integrators, might be removed without notice resulting in\n   * broken integrations.\n   */\n  function SearchController() {\n    var _this7 = this;\n    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      config = _ref4.config,\n      sources = _ref4.sources;\n    _classCallCheck(this, SearchController);\n    _defineProperty(this, \"_internalState\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"config\", void 0);\n    _defineProperty(this, \"addSource\", function (source) {\n      _this7.state.partialNext({\n        sources: [].concat(_toConsumableArray(_this7.sources), [source])\n      });\n    });\n    _defineProperty(this, \"getSource\", function (sourceType) {\n      return _this7.sources.find(function (s) {\n        return s.type === sourceType;\n      });\n    });\n    _defineProperty(this, \"removeSource\", function (sourceType) {\n      var newSources = _this7.sources.filter(function (s) {\n        return s.type !== sourceType;\n      });\n      if (newSources.length === _this7.sources.length) return;\n      _this7.state.partialNext({\n        sources: newSources\n      });\n    });\n    _defineProperty(this, \"activateSource\", function (sourceType) {\n      var source = _this7.getSource(sourceType);\n      if (!source || source.isActive) return;\n      if (_this7.config.keepSingleActiveSource) {\n        _this7.sources.forEach(function (s) {\n          if (s.type !== sourceType) {\n            s.deactivate();\n          }\n        });\n      }\n      source.activate();\n      _this7.state.partialNext({\n        sources: _toConsumableArray(_this7.sources)\n      });\n    });\n    _defineProperty(this, \"deactivateSource\", function (sourceType) {\n      var source = _this7.getSource(sourceType);\n      if (!(source !== null && source !== void 0 && source.isActive)) return;\n      if (_this7.activeSources.length === 1) return;\n      source.deactivate();\n      _this7.state.partialNext({\n        sources: _toConsumableArray(_this7.sources)\n      });\n    });\n    _defineProperty(this, \"activate\", function () {\n      if (!_this7.activeSources.length) {\n        var sourcesToActivate = _this7.config.keepSingleActiveSource ? _this7.sources.slice(0, 1) : _this7.sources;\n        sourcesToActivate.forEach(function (s) {\n          return s.activate();\n        });\n      }\n      if (_this7.isActive) return;\n      _this7.state.partialNext({\n        isActive: true\n      });\n    });\n    _defineProperty(this, \"search\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(searchQuery) {\n        var searchedSources;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                searchedSources = _this7.activeSources;\n                _this7.state.partialNext({\n                  searchQuery: searchQuery\n                });\n                _context5.next = 4;\n                return Promise.all(searchedSources.map(function (source) {\n                  return source.search(searchQuery);\n                }));\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"cancelSearchQueries\", function () {\n      _this7.activeSources.forEach(function (s) {\n        return s.searchDebounced.cancel();\n      });\n    });\n    _defineProperty(this, \"clear\", function () {\n      _this7.cancelSearchQueries();\n      _this7.sources.forEach(function (source) {\n        return source.state.next(_objectSpread(_objectSpread({}, source.initialState), {}, {\n          isActive: source.isActive\n        }));\n      });\n      _this7.state.next(function (current) {\n        return _objectSpread(_objectSpread({}, current), {}, {\n          isActive: true,\n          queriesInProgress: [],\n          searchQuery: ''\n        });\n      });\n    });\n    _defineProperty(this, \"exit\", function () {\n      _this7.cancelSearchQueries();\n      _this7.sources.forEach(function (source) {\n        return source.state.next(_objectSpread(_objectSpread({}, source.initialState), {}, {\n          isActive: source.isActive\n        }));\n      });\n      _this7.state.next(function (current) {\n        return _objectSpread(_objectSpread({}, current), {}, {\n          isActive: false,\n          queriesInProgress: [],\n          searchQuery: ''\n        });\n      });\n    });\n    this.state = new StateStore({\n      isActive: false,\n      searchQuery: '',\n      sources: sources !== null && sources !== void 0 ? sources : []\n    });\n    this._internalState = new StateStore({});\n    this.config = _objectSpread({\n      keepSingleActiveSource: true\n    }, config);\n  }\n  _createClass(SearchController, [{\n    key: \"hasNext\",\n    get: function get() {\n      return this.sources.some(function (source) {\n        return source.hasNext;\n      });\n    }\n  }, {\n    key: \"sources\",\n    get: function get() {\n      return this.state.getLatestValue().sources;\n    }\n  }, {\n    key: \"activeSources\",\n    get: function get() {\n      return this.state.getLatestValue().sources.filter(function (s) {\n        return s.isActive;\n      });\n    }\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return this.state.getLatestValue().isActive;\n    }\n  }, {\n    key: \"searchQuery\",\n    get: function get() {\n      return this.state.getLatestValue().searchQuery;\n    }\n  }, {\n    key: \"searchSourceTypes\",\n    get: function get() {\n      return this.sources.map(function (s) {\n        return s.type;\n      });\n    }\n  }]);\n  return SearchController;\n}();\nexport { Allow, AllowAll, AnyResource, AnyRole, BaseSearchSource, BuiltinPermissions, BuiltinRoles, Campaign, Channel, ChannelManager, ChannelSearchSource, ChannelState, CheckSignature, ClientState, DEFAULT_CHANNEL_MANAGER_OPTIONS, DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS, Deny, DenyAll, DevToken, EVENT_MAP, ErrorFromResponse, InsightMetrics, JWTServerToken, JWTUserToken, MODERATION_ENTITY_TYPES, MaxPriority, MessageSearchSource, MinPriority, Moderation, Permission, Poll, PollManager, SearchController, Segment, StableWSConnection, StateStore, StreamChat, THREAD_MANAGER_INITIAL_STATE, Thread, ThreadManager, TokenManager, UserFromToken, UserSearchSource, VotingVisibility, buildWsFatalInsight, buildWsSuccessAfterFailureInsight, channelManagerEventToHandlerMapping, chatCodes, decodeBase64, encodeBase64, extractPollData, extractPollEnrichedData, formatMessage, isOwnUser, isPatch, isVoteAnswer, logChatPromiseExecution, postInsights, promoteChannel };","map":{"version":3,"names":["isString$1","isString","arrayOrString","isMapStringCallback","callback","map","res","k","len","length","charAt","kValue","mappedValue","_k","_len","_kValue","_mappedValue","encodeBase64","data","fromByteArray","Uint8Array","char","charCodeAt","decodeBase64","s","e","w","String","fromCharCode","L","i","b","c","x","l","a","r","A","Campaign","client","id","_classCallCheck","_defineProperty","_createClass","key","value","_create","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$data","_this$data2","_this$data3","_this$data4","_this$data5","_this$data6","_this$data7","_this$data8","_this$data9","body","result","wrap","_callee$","_context","prev","next","message_template","segment_ids","sender_id","sender_mode","channel_template","create_channels","description","name","user_ids","createCampaign","sent","campaign","abrupt","stop","create","apply","arguments","verifyCampaignId","Error","_start","_callee2","options","_callee2$","_context2","startCampaign","start","_x","_update","_callee3","_callee3$","_context3","updateCampaign","update","_x2","_delete2","_callee4","_callee4$","_context4","deleteCampaign","_delete","_stop","_callee5","_callee5$","_context5","stopCampaign","_get","_callee6","_callee6$","_context6","getCampaign","get","_x3","https","logChatPromiseExecution","promise","then","catch","error","console","warn","concat","sleep","m","Promise","setTimeout","isFunction","Object","prototype","toString","call","Function","chatCodes","TOKEN_EXPIRED","WS_CLOSED_SUCCESS","isReadableStream","obj","_typeof","readable","_read","isBuffer","constructor","isFileWebAPI","uri","window","File","isOwnUser","user","total_unread_count","undefined","isBlobWebAPI","Blob","isOwnUserBaseProperty","property","ownUserBaseProperties","channel_mutes","devices","mutes","unread_channels","unread_count","unread_threads","invisible","privacy_settings","roles","push_preferences","addFileToFormData","contentType","FormData","append","split","reverse","type","normalizeQuerySort","sort","sortFields","sortArr","Array","isArray","_iterator","_createForOfIteratorHelper$5","_step","n","done","_item","entries","_i","_entries","_entries$_i","_slicedToArray","field","direction","push","err","f","retryInterval","numberOfFailures","max","Math","min","floor","random","randomId","generateUUIDv4","hex","bytes","padStart","getRandomBytes","subarray","getRandomValuesWithMathRandom","pow","byteLength","getRandomValues","_crypto","crypto","bind","msCrypto","convertErrorToJson","jsonObj","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","_","isOnline","nav","navigator","onLine","addConnectionEventListeners","cb","addEventListener","removeConnectionEventListeners","removeEventListener","axiosParamsSerializer","params","newParams","encodeURIComponent","JSON","stringify","join","formatMessage","message","_objectSpread$e","__html","html","pinned_at","Date","created_at","updated_at","deleted_at","status","reaction_groups","maybeGetReactionGroupsFallback","reaction_counts","reaction_scores","findIndexInSortedArray","_ref","needle","sortedArray","selectKey","_ref$selectValueToCom","selectValueToCompare","_ref$sortDirection","sortDirection","left","right","middle","recalculateMiddle","round","comparableNeedle","comparableMiddle","needleKey","step","addToMessageList","messages","newMessage","timestampChanged","sortBy","addIfDoesNotExist","addMessageToList","newMessages","_toConsumableArray","filter","messageTime","getTime","messageIsNewest","at","insertionIndex","splice","groups","counts","scores","fallback","_i2","_Object$keys","keys","count","sum_scores","debounce","fn","timeout","_ref2","_ref2$leading","leading","_ref2$trailing","trailing","runningTimeout","argsForTrailingExecution","lastResult","debouncedFn","args","_key","clearTimeout","timeoutHandler","cancel","flush","throttle","_ref3","_ref3$leading","_ref3$trailing","storedArgs","_len2","_key2","path","reduce","acc","uniqBy","array","iteratee","seen","Set","item","has","add","binarySearchByDateEqualOrNearestGreater","targetDate","mid","midCreatedAt","midDate","messagePaginationCreatedAtAround","_ref4","parentSet","requestedPageSize","returnedPage","messagePaginationOptions","newPagination","pagination","created_at_around","hasPrev","hasNext","updateHasPrev","updateHasNext","createdAtAroundDate","_ref5","slice","firstPageMsg","lastPageMsg","wholePageHasNewerMessages","wholePageHasOlderMessages","requestedPageSizeNotMet","noMoreMessages","_parentSet$messages$","_parentSet$messages$s","firstPageMsgIsFirstInSet","lastPageMsgIsLastInSet","midPointByCount","midPointByCreationDate","messagePaginationIdAround","_ref6","_parentSet$messages$2","_parentSet$messages$s2","_ref7","id_around","_ref8","midPoint","targetMsg","halves","find","messagePaginationLinear","_ref9","_parentSet$messages$3","_parentSet$messages$s3","_ref10","queriedNextMessages","created_at_after_or_equal","created_at_after","id_gt","id_gte","queriedPrevMessages","created_at_before_or_equal","created_at_before","id_lt","id_lte","offset","containsUnrecognizedOptionsOnly","hasMore","returnedPageIsEmpty","messageSetPagination","_params$messagePagina","_params$messagePagina2","_params$logger","logger","WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL","getAndWatchChannel","_ref12","_ref11","channel","members","channelToWatch","originalCid","queryPromise","cid","generateChannelTempCid","watch","finish","channelType","membersStr","isChannelPinned","member","state","membership","isChannelArchived","archived_at","shouldConsiderArchivedChannels","filters","archived","extractSortValue","_ref13","_option$targetKey","_option","atIndex","targetKey","option","_sort$atIndex","index","_key3","shouldConsiderPinnedChannels","findPinnedAtSortOrder","abs","_ref14","findLastPinnedChannelIndex","_ref15","channels","lastPinnedChannelIndex","_iterator2","_step2","promoteChannel","_ref16","channelToMove","channelToMoveIndexWithinChannels","targetChannelIndex","findIndex","targetChannelExistsWithinList","targetChannelAlreadyAtTheTop","considerPinnedChannels","isTargetChannelPinned","newChannels","DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE","DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE","DEFAULT_MESSAGE_SET_PAGINATION","ChannelState","_this","_channel$state","isUpToDate","msgArray","msg","removed","_updateUserMessages","_m$user","_objectSpread$d","messageSets","set","parentId","threads","pinnedMessages","hardDelete","_deleteUserMessages","_m$user2","latest_reactions","mentioned_users","own_reactions","parent_id","reply_count","thread_participants","_channel","watcher_count","typing","read","initMessages","pending_messages","mutedUsers","watchers","unreadCount","last_message_at","_this$messageSets$fin","isCurrent","_this$messageSets$fin2","isLatest","_this$messageSets$fin3","addMessageSorted","messageSetToAddToIfDoesNotExist","addMessagesSorted","initializing","_this$findTargetMessa","findTargetMessageSet","messagesToAdd","targetMessageSetIndex","isFromShadowBannedUser","shadowed","isMessageFormatted","_this$_channel","getClient","updateUserReference","parentID","show_in_channel","_addToMessageList","thread","messageSet","addPinnedMessages","addPinnedMessage","pinnedMessage","removePinnedMessage","_this$removeMessageFr","removeMessageFromArray","addReaction","reaction","enforce_unique","_this2","messageWithReaction","_updateMessage","_addOwnReactionToMessage","ownReactions","_removeOwnReactionFromMessage","userID","user_id","removeReaction","_this3","_updateQuotedMessageReferences","_this4","remove","parseMessage","_m$pinned_at","_m$updated_at","toISOString","updatedMessages","quoted_message_id","quoted_message","attachments","removeQuotedMessageReferences","updateFunc","pinned","msgIndex","messageSetIndex","findMessageSetIndex","_msgIndex","_msgIndex2","removeMessage","messageToRemove","isRemoved","_this$removeMessageFr2","threadMessages","_messageToRemove$mess","_this$removeMessageFr3","_removed","filterErrorMessages","filteredMessages","latestMessages","clean","now","_Object$entries","_Object$entries$_i","lastEvent","receivedAt","received_at","dispatchEvent","clearMessages","_loadMessageIntoState","messageId","parentMessageId","_this$threads$parentM","limit","switchedToMessageSet","loadedMessageThread","messageIdToFind","_args","switchToMessageSet","query","getReplies","loadMessageIntoState","findMessage","currentMessages","areMessageSetsOverlap","messages1","messages2","some","m1","m2","_this5","overlappingMessageSetIndices","mergeTargetMessageSetIndex","mergeSourceMessageSetIndices","target","sources","indexOf","overlappingMessageSetIndex","Channel","defaultOptions","_objectSpread$c","presence","event","listeners","all","_listeners","listener","baseURL","validTypeRe","validIDRe","test","_client","_data","initialized","offlineMode","lastTypingEvent","isTyping","disconnected","getConfig","configs","_sendMessage","post","_channelURL","sendMessage","sendFile","sendImage","deleteFile","url","delete","deleteImage","_sendEvent","_checkInitialized","sendEvent","_x4","_search","payload","_args4","filter_conditions","message_filter_conditions","wsPromise","search","_x5","_queryMembers","filterConditions","_args5","queryMembers","_x6","_partialUpdateMember","updates","patch","partialUpdateMember","_x7","_x8","_sendReaction","_callee7","messageID","_callee7$","_context7","sendReaction","_x9","_x10","_x11","deleteReaction","reactionType","_update2","_callee8","channelData","updateMessage","reserved","_args8","_callee8$","_context8","_updatePartial","_callee9","areCapabilitiesChanged","_callee9$","_context9","own_capabilities","updatePartial","_x12","_enableSlowMode","_callee10","coolDownInterval","_callee10$","_context10","cooldown","enableSlowMode","_x13","_disableSlowMode","_callee11","_callee11$","_context11","disableSlowMode","_callee12","_args12","_callee12$","_context12","_truncate","_callee13","_args13","_callee13$","_context13","truncate","_acceptInvite","_callee14","_args14","_callee14$","_context14","accept_invite","acceptInvite","_rejectInvite","_callee15","_args15","_callee15$","_context15","reject_invite","rejectInvite","_addMembers","_callee16","_args16","_callee16$","_context16","add_members","addMembers","_x14","_x15","_addModerators","_callee17","_args17","_callee17$","_context17","add_moderators","addModerators","_x16","_x17","_assignRoles","_callee18","_args18","_callee18$","_context18","assign_roles","assignRoles","_x18","_x19","_inviteMembers","_callee19","_args19","_callee19$","_context19","invites","inviteMembers","_x20","_x21","_removeMembers","_callee20","_args20","_callee20$","_context20","remove_members","removeMembers","_x22","_x23","_demoteModerators","_callee21","_args21","_callee21$","_context21","demote_moderators","demoteModerators","_x24","_x25","_update3","_callee22","_callee22$","_context22","_x26","_mute","_callee23","opts","_args23","_callee23$","_context23","channel_cid","mute","_unmute","_callee24","_args24","_callee24$","_context24","unmute","_archive","_callee25","cli","uid","resp","_args25","_callee25$","_context25","channel_member","archive","_unarchive","_callee26","_args26","_callee26$","_context26","unarchive","_pin","_callee27","_args27","_callee27$","_context27","pin","_unpin","_callee28","_args28","_callee28$","_context28","unpin","muteStatus","_muteStatus","sendAction","formData","message_id","form_data","_keystroke","_callee29","diff","_callee29$","_context29","_isTypingIndicatorsEnabled","lastKeyStroke","keystroke","_x27","_x28","_updateAIState","_callee30","_args30","_callee30$","_context30","ai_state","updateAIState","_x29","_x30","_clearAIIndicator","_callee31","_callee31$","_context31","clearAIIndicator","_stopAIResponse","_callee32","_callee32$","_context32","stopAIResponse","_stopTyping","_callee33","_callee33$","_context33","stopTyping","_x31","_x32","_this$getConfig","_this$getClient$user$","_this$getClient$user","_this$getClient$user$2","_this$getClient$user$3","typing_events","typing_indicators","enabled","lastMessage","messageSlice","_markRead","_callee34","_this$getConfig2","_args34","_callee34$","_context34","read_events","_isUsingServerAuth","resolve","markRead","_markUnread","_callee35","_this$getConfig3","_callee35$","_context35","markUnread","_x33","_watch","_callee36","combined","_callee36$","_context36","_hasConnectionID","tags","_x34","_stopWatching","_callee37","response","_callee37$","_context37","stopWatching","_getReplies","_callee38","normalizedSort","_callee38$","_context38","_x35","_x36","_x37","_getPinnedMessages","_callee39","_args39","_callee39$","_context39","getPinnedMessages","_x38","getReactions","getMessagesById","messageIds","ids","lastRead","_this$getClient","last_read","_countMessageAsUnread","_message$user","_message$user2","silent","userMuteStatus","includes","muted","countUnread","countUnreadMentions","_message$mentioned_us","_query","_callee40","_options$messages$lim","_options$messages","queryURL","tempChannelCid","_this$_initializeStat","_args40","_callee40$","_context40","_member$user","activeChannels","_cacheEnabled","_addChannelConfig","_initializeState","polls","hydratePollCache","queriedChannels","isLatestMessageSet","_x39","_banUser","_callee41","targetUserID","_callee41$","_context41","banUser","_x40","_x41","_hide","_callee42","userId","clearHistory","_args42","_callee42$","_context42","clear_history","hide","_show","_callee43","_args43","_callee43$","_context43","show","_unbanUser","_callee44","_callee44$","_context44","unbanUser","_x42","_shadowBan","_callee45","_callee45$","_context45","shadowBan","_x43","_x44","_removeShadowBan","_callee46","_callee46$","_context46","removeShadowBan","_x45","_createCall","_callee47","_callee47$","_context47","createCall","_x46","_vote2","_callee48","pollId","_vote","_callee48$","_context48","castPollVote","vote","_x47","_x48","_x49","_removeVote","_callee49","voteId","_callee49$","_context49","removePollVote","removeVote","_x50","_x51","_x52","on","callbackOrString","callbackOrNothing","unsubscribe","el","off","_handleChannelEvent","_event$user","_event$user2","_event$user3","_event$user5","_event$user6","_event$channel","_event$member","_channelState$members","_event$member2","_event$member2$user","_event$user9","_event$user11","_channelState$members2","_event$user12","_channelState$members3","channelState","_event$user4","_this$getClient$user2","last_read_message_id","unread_messages","_extendEventWithOwnReactions","hard_delete","_event$user7","_this$getClient$user3","_event$user8","ownMessage","isThreadMessage","preventUnreadCountUpdate","truncated_at","truncatedAt","createdAt","newMembers","_event$user10","_this$getClient$user4","_event$unread_message","_ownMessage","first_unread_message_id","last_read_at","_event$channel2","_channel$data","_event$channel$hidden","_event$channel3","_channel$data2","_event$channel$own_ca","_event$channel4","_channel$data3","isFrozenChanged","frozen","hidden","shadow_banned","shadow","banned","_this$getClient2","clientState","_hydrateMembers","_createForOfIteratorHelper$4","_this$state$addMessag","pinned_messages","watcher","_iterator3","_step3","_read$unread_messages","_ref4$overrideCurrent","overrideCurrentState","newMembersById","membersById","_disconnect","setIsUpToDate","ClientState","users","userChannelReferences","updateUsers","_createForOfIteratorHelper$3","updateUser","channelID","deleteAllChannelReference","InsightMetrics","connectionStartTimestamp","wsTotalFailures","wsConsecutiveFailures","instanceClientId","postInsights","insightType","insights","maxAttempts","axios","t0","buildWsFatalInsight","connection","_objectSpread$b","buildWsBaseInsight","_connection$ws","_navigator","_navigator2","ready_state","ws","readyState","_buildUrl","api_key","start_ts","insightMetrics","end_ts","auth_type","getAuthType","token","tokenManager","user_details","_user","device","client_id","connectionID","ws_details","ws_consecutive_failures","ws_total_failures","request_id","requestID","online","user_agent","userAgent","instance_client_id","buildWsSuccessAfterFailureInsight","isCloseEvent","code","isErrorEvent","StableWSConnection","qs","_buildWSPayload","getToken","wsBaseURL","getUserAgent","_log","_setHealth","isHealthy","_reconnect","interval","wsID","parse","isResolved","_this$resolvePromise","_this$rejectPromise","rejectPromise","_errorFromWSEvent","resolvePromise","scheduleNextPing","handleEvent","scheduleConnectionCheck","_this$rejectPromise2","reason","wasClean","_this$rejectPromise3","consecutiveFailures","totalFailures","isConnecting","_this$rejectPromise4","healthy","isWSFailure","statusCode","StatusCode","connectionOpen","reject","healthCheckTimeoutRef","clientID","_this$ws","send","pingInterval","connectionCheckTimeoutRef","connectionCheckTimeout","isDisconnected","onlineStatusChanged","extra","level","_objectSpread$a","setClient","_connect2","healthCheck","_connect","isStatic","refreshToken","_waitForHealthy","connect","_waitForHealthy2","race","disconnect","clearInterval","removeAllListeners","isClosedPromise","close","OPEN","onclose","_connect3","isTokenReady","wsURL","enableWSFallback","tokenReady","loadToken","_setupConnectionPromise","WebSocket","onopen","onerror","onmessage","connection_id","enableInsights","t1","_reconnect2","_args6","_destroyCurrentWSConnection","recoverState","_this$ws2","_this$ws3","jwt","crypto$1","JWTUserToken","apiSecret","extraData","jwtOptions","TypeError","_objectSpread$9","_extends","algorithm","noTimestamp","JWTServerToken","server","sign","UserFromToken","fragments","b64Payload","DevToken","CheckSignature","secret","signature","Buffer","from","hash","createHmac","digest","timingSafeEqual","_unused","TokenManager","tokenOrProvider","validateToken","tokenProvider","loadTokenPromise","anon","tokenUserId","APIErrorCodes","retryable","isAPIError","isErrorRetryable","isConnectionIDError","isErrorResponse","ConnectionState","WSConnectionFallback","_this$cancelToken","_setState","Closed","cancelToken","config","retry","_this$cancelToken2","CancelToken","source","doAxiosRequest","replace","_objectSpread$8","_req","_data$events","Connected","events","isCancel","Disconnected","reconnect","_yield$_this$_req","_args3","Connecting","json","_poll","_this$cancelToken3","_onlineStatusChanged","Init","Segment","all_sender_channels","all_users","createSegment","verifySegmentId","getSegment","updateSegment","_addTargets","targets","addSegmentTargets","addTargets","_removeTargets","removeSegmentTargets","removeTargets","deleteSegment","_targetExists","targetId","segmentTargetExists","targetExists","_queryTargets","querySegmentTargets","queryTargets","ErrorFromResponse","_Error","_inherits","_super","_createSuper$1","_assertThisInitialized","_wrapNativeSuper","VotingVisibility","isPatch","StateStore","newValueOrPatch","newValue","oldValue","handlerSet","handler","partial","current","_objectSpread$7","selector","selectedValues","wrappedHandler","nextValue","newlySelectedValues","hasUpdatedValues","logCount","oldSelectedValues","subscribe","DEFAULT_PAGE_LIMIT","DEFAULT_SORT","MARK_AS_READ_THROTTLE_TIMEOUT","THREAD_RESPONSE_RESERVED_KEYS","created_by_user_id","parent_message_id","title","latest_replies","active_participant_count","participant_count","created_by","parent_message","constructCustomDataObject","threadData","custom","customKey","Thread","_threadData$channel$m","_threadData$reply_cou","_threadData","Map","partialNext","active","getLatestValue","isLoading","getThread","hydrateState","_thread$state$getLate","replyCount","replies","parentMessage","participants","deletedAt","updatedAt","pendingReplies","failedRepliesMap","values","isStateStale","unsubscribeFunctions","size","subscribeThreadUpdated","subscribeMarkActiveThreadRead","subscribeReloadActiveStaleThread","subscribeMarkThreadStale","subscribeNewReplies","subscribeRepliesRead","subscribeMessageDeleted","subscribeMessageUpdated","subscribeWithSelector","unreadMessageCount","ownUnreadCountSelector","throttledMarkAsRead","reload","_this$state$getLatest","_event$message","_event$message$user","isOwnMessage","_this$state$getLatest2","upsertReplyLocally","nextRead","userRead","nextUserRead","_objectSpread$6","lastReadAt","lastReadMessageId","deleteReplyLocally","updateParentMessageLocally","eventTypes","eventType","updateParentMessageOrReplyLocally","cleanupFunction","clear","_replies$index","_this$state$getLatest3","reply","updatedReplies","_ref6$timestampChange","formattedMessage","_message$reply_count","_ref9$force","force","_args2","ownUnreadCount","thread_id","markAsRead","_ref10$limit","_ref10$sort","otherOptions","_objectWithoutProperties","_excluded$3","_ref11$limit","loadPage","_ref12$limit","_this$state$getLatest4","loadingKey","cursorKey","insertionMethodKey","queryOptions","_replies$at$id","_replies$at","maybeNextCursor","queryReplies","_objectSpread4","nextReplies","_nextReplies","placeholderReadResponse","repliesPaginationFromInitialThread","formatReadState","_userRead$unread_mess","_thread$latest_replie","_thread$latest_replie2","latestRepliesContainsAllReplies","nextCursor","prevCursor","isLoadingNext","isLoadingPrev","currentUserId","_state$read$currentUs","MODERATION_ENTITY_TYPES","Moderation","_flagUser","flaggedUserID","flag","flagUser","_flagMessage","flagMessage","_flag","entityType","entityId","entityCreatorID","_objectSpread$5","entity_type","entity_id","entity_creator_id","_muteUser","targetID","target_ids","muteUser","_unmuteUser","unmuteUser","_getUserModerationReport","getUserModerationReport","_queryReviewQueue","_args7","queryReviewQueue","_upsertConfig","upsertConfig","_getConfig","_deleteConfig","deleteConfig","_queryConfigs","_args11","queryConfigs","_submitAction","actionType","itemID","action_type","item_id","submitAction","_check","entityID","moderationPayload","configKey","moderation_payload","config_key","check","_addCustomFlags","flags","addCustomFlags","_addCustomMessageFlags","addCustomMessageFlags","DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION","MAX_QUERY_THREADS_LIMIT","THREAD_MANAGER_INITIAL_STATE","isThreadOrderStale","unreadThreadCount","unseenThreadIds","lastConnectionDropAt","ready","ThreadManager","subscribeUnreadThreadsCountChange","subscribeManageThreadSubscriptions","subscribeReloadOnActivation","subscribeRecoverAfterConnectionDrop","subscribeChannelDeleted","_ref2$unread_threads","_event$me","me","newThreads","nextThreads","_ref6$threads","prevThreads","removedThreads","threadsById","registerSubscriptions","unregisterSubscriptions","unsubscribeConnectionDropped","_objectSpread$4","throttledHandleConnectionRecovered","unsubscribeConnectionRecovered","currentThreads","incomingThread","existingThread","queryThreads","_createForOfIteratorHelper$2","hasStaleState","_response$next","participant_limit","reply_limit","_this$state$getLatest5","_response$next2","threadsByIdGetterCache","_this$state$getLatest6","newThreadsById","isPollUpdatedEvent","isPollClosedEventEvent","isPollVoteCastedEvent","isPollVoteChangedEvent","isPollVoteRemovedEvent","isVoteAnswer","answer_text","Poll","poll","_own_votes$reduce","own_votes","pollResponseForState","_excluded$2","voteOrAnswer","ownAnswer","ownVotes","_objectSpread$3","lastActivityAt","maxVotedOptionIds","getMaxVotedOptionIds","vote_counts_by_option","ownVotesByOptionId","getOwnVotesByOptionId","getInitialStateFromPollResponse","_event$poll","_extractPollData","extractPollData","pollData","_excluded2$1","_event$poll2","is_closed","_event$poll3","currentState","isOwnVote","poll_vote","latestAnswers","latest_answers","option_id","pollEnrichData","extractPollEnrichedData","_event$poll4","answer","_ownAnswer","enforce_unique_votes","optionId","_event$poll5","_yield$_this$client$g","getPoll","updatePoll","partialPollObject","partialUpdatePoll","closePoll","deletePoll","createPollOption","updatePollOption","deletePollOption","max_votes_allowed","reachedVoteLimit","_oldestVote2","oldestVote","_oldestVote","answerText","addPollAnswer","answerId","_ref17","queryPollAnswers","_ref18","queryPollVotes","voteCountsByOption","maxVotes","winningOptions","pollResponse","allow_answers","allow_user_suggested_options","enforce_unique_vote","voting_visibility","answers_count","latest_votes_by_option","vote_count","PollManager","pollCache","subscribeMessageNew","subscribePollUpdated","subscribePollClosed","subscribeVoteCasted","subscribeVoteChanged","subscribeVoteRemoved","_yield$_this$client$c","createdPoll","createPoll","cachedPoll","fromState","setOrOverwriteInCache","_yield$_this$client$q","pollInstances","queryPolls","overwriteState","_createForOfIteratorHelper$1","pollFromCache","reinitializeState","_this$fromState","handlePollUpdated","_this$fromState2","handlePollClosed","_this$fromState3","handleVoteCasted","_this$fromState4","handleVoteChanged","_this$fromState5","handleVoteRemoved","channelManagerEventToHandlerMapping","DEFAULT_CHANNEL_MANAGER_OPTIONS","abortInFlightQuery","allowNotLoadedChannelPromotionForEvent","lockChannelOrder","DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS","ChannelManager","_ref$eventHandlerOver","eventHandlerOverrides","_eventHandlerOverrides","_ref$options","_options","valueOrFactory","currentChannels","_objectSpread$2","truthyEventHandlerOverrides","stateOptions","_DEFAULT_CHANNEL_MANA","_channels$length","_channels$length2","newOffset","newOptions","queryChannels","_nextChannels$length","_nextChannels$length2","_DEFAULT_CHANNEL_MANA2","nextChannels","_this$options$allowNo","setChannels","channelIndex","channelDeletedHandler","_this$options$allowNo2","_this$state$getLatest7","channel_type","channelId","channel_id","targetChannel","isTargetChannelArchived","considerArchivedChannels","_this$options$allowNo3","_this$state$getLatest8","_this$options$allowNo4","_this$state$getLatest9","_this$state$getLatest10","pinnedAtSort","newTargetChannelIndex","handlerName","defaultEventHandler","eventHandlers","eventHandlerOverride","subscriptionOrOverride","setEventHandlerOverrides","setOptions","channelHiddenHandler","channelVisibleHandler","memberUpdatedHandler","newMessageHandler","notificationAddedToChannelHandler","notificationNewMessageHandler","notificationRemovedFromChannelHandler","StreamChat","secretOrOptions","_this$options","_this$wsConnection","_this$wsFallback","wsConnection","wsFallback","Boolean","_getConnectionID","userTokenOrProvider","setTokenPromise","setUserPromise","node","allowServerSideConnect","anonymous","_setToken","_setUser","openConnection","persistUserOnConnectionFailure","closeConnection","disconnectUser","connectUser","setTokenOrProvider","_this$wsConnection2","_this$wsFallback2","cleaningIntervalRef","_ref3$eventHandlerOve","_ref3$options","_this$wsConnection3","_this$wsConnection4","_this$wsFallback3","_startCleaning","before","closePromise","_Object$values","resetState","reset","anonymousUser","_setupConnection","connectAnonymousUser","requestConfig","_requestConfig$header","_enrichAxiosOptions","_logApiRequest","axiosInstance","postForm","put","_logApiResponse","handleResponse","client_request_id","headers","_logApiError","postListenerCallbacks","_handleClientEvent","_callClientListeners","_callChannelListeners","messageEvent","jsonString","refMap","_channelID","_channel2","_updateMemberWatcherReferences","_channelID2","_channel3","updateUserMessages","_channelID3","_channel4","deleteUserMessages","_objectSpread$1","_updateUserMessageReferences","mark_messages_deleted","_deleteUserMessageReference","cids","recoverStateOnReconnect","$in","_custom$members","memberIds","_member$user_id","tempCid","_key4","_channel5","membersStrInExistingChannel","_channel6","upsertUsers","upsertUser","unblockMessage","markChannelsRead","disableCache","mutedChannels","moderation","inputOptions","browser","withCredentials","warmUp","httpsAgent","Agent","keepAlive","keepAliveMsecs","setBaseURL","process","env","STREAM_LOCAL_TEST_RUN","STREAM_LOCAL_TEST_HOST","defaultWSTimeoutWithFallback","defaultWSTimeout","defaults","paramsSerializer","devToken","_updateAppSettings","apn_config","p12_cert","updateAppSettings","_revokeTokens","revoke_tokens_issued_before","_normalizeDate","revokeTokens","_revokeUserToken","revokeUsersToken","revokeUserToken","_revokeUsersToken","userIDs","_createForOfIteratorHelper","partialUpdateUsers","_getAppSettings","getAppSettings","_testPushSettings","apnTemplate","apn_template","firebaseTemplate","firebase_template","firebaseDataTemplate","firebase_data_template","skipDevices","skip_devices","pushProviderName","push_provider_name","pushProviderType","push_provider_type","testPushSettings","_testSQSSettings","testSQSSettings","_testSNSSettings","testSNSSettings","_setGuestUser","_response$user","guestUser","last_active","_excluded$1","access_token","setGuestUser","createToken","exp","iat","getHeaders","maxContentLength","Infinity","maxBodyLength","errorFromResponse","_event$me2","_handleUserEvent","activeChannelKeys","activeChannelKey","_this$activeChannels$","_mute$channel","expires","expiresAt","_sayHi","mode","_queryUsers","queryUsers","_queryBannedUsers","queryBannedUsers","_queryMessageFlags","queryMessageFlags","_queryChannels","hydrateActiveChannels","_queryReactions","queryReactions","channelsFromApi","queryChannelsOptions","skipInitialization","_stateOptions$offline","updatedMessagesSet","_c$_initializeState","_c$_initializeState2","_messageSet","message_limit","_args22","setLocalDevice","_this$wsConnection5","_this$wsConnection6","_this$wsFallback4","_addDevice","push_provider","addDevice","_getDevices","getDevices","_getUnreadCount","getUnreadCount","_getUnreadCountBatch","getUnreadCountBatch","_setPushPreferences","preferences","setPushPreferences","_removeDevice","removeDevice","_getRateLimits","serverSide","web","android","ios","endpoints","server_side","getRateLimits","channelIDOrCustom","_custom$members2","getChannelByMembers","getChannelById","_partialUpdateUser","partialUserObject","partialUpdateUser","_upsertUsers","userMap","userObject","_partialUpdateUsers","_iterator4","_step4","_deleteUser","deleteUser","_restoreUsers","restoreUsers","_reactivateUser","reactivateUser","_reactivateUsers","reactivateUsers","_deactivateUser","deactivateUser","_deactivateUsers","deactivateUsers","_exportUser","exportUser","target_user_id","_x53","_x54","_x55","_x56","_blockUser","blockedUserID","blocked_user_id","blockUser","_x57","_x58","_getBlockedUsers","getBlockedUsers","_x59","_unBlockUser","unBlockUser","_x60","_x61","_args47","target_id","_x62","_x63","currentUserID","_x64","_x65","targetMessageID","_args49","target_message_id","_x66","_callee50","_args50","_callee50$","_context50","_x67","_unflagMessage","_callee51","_args51","_callee51$","_context51","unflagMessage","_x68","_unflagUser","_callee52","_args52","_callee52$","_context52","unflagUser","_x69","_getCallToken","_callee53","callID","_args53","_callee53$","_context53","getCallToken","_x70","_queryFlags2","_callee54","_args54","_callee54$","_context54","_queryFlags","_queryFlagReports2","_callee55","_args55","_callee55$","_context55","_queryFlagReports","_reviewFlagReport2","_callee56","reviewResult","_args56","_callee56$","_context56","review_result","_reviewFlagReport","_x71","_x72","_unblockMessage","_callee57","_args57","_callee57$","_context57","_x73","_markChannelsRead","_callee58","_args58","_callee58$","_context58","createCommand","getCommand","updateCommand","deleteCommand","listCommands","createChannelType","commands","getChannelType","updateChannelType","deleteChannelType","listChannelTypes","_translateMessage","_callee59","language","_callee59$","_context59","translateMessage","_x74","_x75","_translate","_callee60","text","destination_language","source_language","_callee60$","_context60","translate","_x76","_x77","_x78","_normalizeExpiration","timeoutOrExpirationDate","pinExpires","setSeconds","getSeconds","_validateAndGetMessageId","messageOrMessageId","errorText","pinMessage","pinnedBy","pinnedAt","partialUpdateMessage","pin_expires","unpinMessage","_callee61","clonedMessage","reservedMessageFields","_callee61$","_context61","mu","_x79","_x80","_x81","_partialUpdateMessage","_callee62","partialMessageObject","_callee62$","_context62","_x82","_x83","_x84","_x85","_deleteMessage","_callee63","_callee63$","_context63","hard","deleteMessage","_x86","_x87","_undeleteMessage","_callee64","_callee64$","_context64","undeleted_by","undeleteMessage","_x88","_x89","_getMessage","_callee65","_callee65$","_context65","getMessage","_x90","_x91","_queryThreads","_callee66","optionsWithDefaults","_args66","_callee66$","_context66","_getThread","_callee67","_args67","_callee67$","_context67","_x92","_partialUpdateThread","_callee68","partialThreadObject","reservedThreadFields","_key5","_callee68$","_context68","unset","partialUpdateThread","_x93","_x94","_this$deviceIdentifie","version","clientBundle","userAgentString","sdkIdentifier","deviceIdentifier","os","model","withArguments","setUserAgent","_options$headers","_getToken","authorization","Authorization","signal","nextRequestAbortController","axiosRequestConfig","axiosRequestConfigParams","axiosRequestConfigHeaders","axiosRequestConfigRest","_excluded2","that","setInterval","_i3","_Object$values2","_channel7","verifyWebhook","requestBody","xSignature","getPermission","createPermission","permissionData","updatePermission","deletePermission","listPermissions","createRole","listRoles","deleteRole","sync","channel_cids","last_sync_at","_sendUserCustomEvent","_callee69","_callee69$","_context69","sendUserCustomEvent","_x95","_x96","createBlockList","blockList","listBlockLists","getBlockList","updateBlockList","deleteBlockList","exportChannels","request","exportUsers","exportChannel","getExportChannelStatus","idOrData","segment","validateServerSideAuth","_createSegment","_callee70","_callee70$","_context70","_x97","_x98","_x99","_createUserSegment","_callee71","_callee71$","_context71","createUserSegment","_x100","_x101","_createChannelSegment","_callee72","_callee72$","_context72","createChannelSegment","_x102","_x103","_getSegment","_callee73","_callee73$","_context73","_x104","_updateSegment","_callee74","_callee74$","_context74","_x105","_x106","_addSegmentTargets","_callee75","_callee75$","_context75","_x107","_x108","_querySegmentTargets","_callee76","_args76","_callee76$","_context76","_x109","_removeSegmentTargets","_callee77","_callee77$","_context77","_x110","_x111","_querySegments","_callee78","_args78","_callee78$","_context78","querySegments","_x112","_x113","_deleteSegment","_callee79","_callee79$","_context79","_x114","_segmentTargetExists","_callee80","segmentId","_callee80$","_context80","_x115","_x116","_createCampaign","_callee81","_callee81$","_context81","_x117","_getCampaign","_callee82","_callee82$","_context82","_x118","_x119","_startCampaign","_callee83","_callee83$","_context83","scheduled_for","scheduledFor","stop_at","stopAt","_x120","_x121","_queryCampaigns","_callee84","_callee84$","_context84","queryCampaigns","_x122","_x123","_x124","_updateCampaign","_callee85","_callee85$","_context85","_x125","_x126","_deleteCampaign","_callee86","_callee86$","_context86","_x127","_stopCampaign","_callee87","_callee87$","_context87","_x128","_enrichURL","_callee88","_callee88$","_context88","enrichURL","_x129","_getTask","_callee89","_callee89$","_context89","getTask","_x130","_deleteChannels","_callee90","_args90","_callee90$","_context90","deleteChannels","_x131","_deleteUsers","_callee91","_args91","_callee91$","_context91","conversations","deleteUsers","_x132","_createImportURL2","_callee92","filename","_callee92$","_context92","_createImportURL","_x133","_createImport2","_callee93","_args93","_callee93$","_context93","_createImport","_x134","_getImport2","_callee94","_callee94$","_context94","_getImport","_x135","_listImports2","_callee95","_callee95$","_context95","_listImports","_x136","_upsertPushProvider","_callee96","pushProvider","_callee96$","_context96","upsertPushProvider","_x137","_deletePushProvider","_callee97","_callee97$","_context97","deletePushProvider","_x138","_listPushProviders","_callee98","_callee98$","_context98","listPushProviders","createAbortControllerForNextRequest","AbortController","_commitMessage","_callee99","_callee99$","_context99","commitMessage","_x139","_createPoll","_callee100","_callee100$","_context100","_x140","_x141","_getPoll","_callee101","_callee101$","_context101","_x142","_x143","_updatePoll","_callee102","_callee102$","_context102","_x144","_x145","_partialUpdatePoll","_callee103","_callee103$","_context103","_x146","_x147","_x148","_deletePoll","_callee104","_callee104$","_context104","_x149","_x150","_closePoll","_callee105","_callee105$","_context105","_x151","_x152","_createPollOption","_callee106","_callee106$","_context106","_x153","_x154","_x155","_getPollOption","_callee107","_callee107$","_context107","getPollOption","_x156","_x157","_x158","_updatePollOption","_callee108","_callee108$","_context108","_x159","_x160","_x161","_deletePollOption","_callee109","_callee109$","_context109","_x162","_x163","_x164","_castPollVote","_callee110","_callee110$","_context110","_x165","_x166","_x167","_x168","_addPollAnswer","_callee111","_callee111$","_context111","_x169","_x170","_x171","_x172","_removePollVote","_callee112","_callee112$","_context112","_x173","_x174","_x175","_x176","_queryPolls","_callee113","q","_args113","_callee113$","_context113","_queryPollVotes","_callee114","_args114","_callee114$","_context114","_x177","_queryPollAnswers","_callee115","_args115","_callee115$","_context115","is_answer","_x178","_queryMessageHistory","_callee116","_args116","_callee116$","_context116","queryMessageHistory","_updateFlags","_callee117","message_ids","reviewed_by","_args117","_callee117$","_context117","updateFlags","_x179","_x180","getInstance","_instance","EVENT_MAP","Allow","Deny","AnyResource","AnyRole","MaxPriority","MinPriority","Permission","priority","resources","owner","action","AllowAll","DenyAll","BuiltinRoles","Admin","Anonymous","ChannelMember","ChannelModerator","Guest","User","BuiltinPermissions","AddLinks","BanUser","CreateChannel","CreateMessage","CreateReaction","DeleteAnyAttachment","DeleteAnyChannel","DeleteAnyMessage","DeleteAnyReaction","DeleteOwnAttachment","DeleteOwnChannel","DeleteOwnMessage","DeleteOwnReaction","ReadAnyChannel","ReadOwnChannel","RunMessageAction","UpdateAnyChannel","UpdateAnyMessage","UpdateMembersAnyChannel","UpdateMembersOwnChannel","UpdateOwnChannel","UpdateOwnMessage","UploadAttachment","UseFrozenChannel","DEFAULT_SEARCH_SOURCE_OPTIONS","debounceMs","pageSize","BaseSearchSource","searchDebounced","executeQuery","isActive","searchQuery","_DEFAULT_SEARCH_SOURC","_objectSpread","_debounceMs","initialState","setDebounceOptions","lastQueryError","items","_executeQuery","newSearchString","hasNewSearchQuery","searchString","stateUpdate","results","_items","_this$offset","filterQueryResults","_current$items","_excluded","UserSearchSource","_BaseSearchSource","_createSuper","_yield$this$client$qu","$or","$autocomplete","searchOptions","u","_this3$client$user","ChannelSearchSource","_BaseSearchSource2","_super2","_query2","_this$sort","MessageSearchSource","_BaseSearchSource3","_super3","_query3","_this6","channelFilters","messageFilters","_yield$this$client$se","allChannelsLoadedLocally","messageSearchChannelFilters","messageSearchFilters","messageSearchSort","channelQueryFilters","channelQuerySort","channelQueryOptions","SearchController","_this7","sourceType","newSources","getSource","keepSingleActiveSource","deactivate","activate","activeSources","sourcesToActivate","searchedSources","cancelSearchQueries","queriesInProgress","_internalState"],"sources":["C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\base64.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\campaign.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\https","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\utils.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\constants.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\channel_state.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\channel.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\client_state.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\insights.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\connection.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\jsonwebtoken","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\crypto","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\signing.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\token_manager.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\errors.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\connection_fallback.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\segment.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\types.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\store.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\thread.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\moderation.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\thread_manager.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\poll.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\poll_manager.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\channel_manager.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\client.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\events.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\permissions.ts","C:\\Users\\mamar\\Documents\\GitHub\\werewolf\\tutorial\\client\\node_modules\\stream-chat\\src\\search_controller.ts"],"sourcesContent":["import { fromByteArray } from 'base64-js';\n\nfunction isString<T>(arrayOrString: string | T[]): arrayOrString is string {\n  return typeof (arrayOrString as string) === 'string';\n}\n\ntype MapGenericCallback<T, U> = (value: T, index: number, array: T[]) => U;\ntype MapStringCallback<U> = (value: string, index: number, string: string) => U;\n\nfunction isMapStringCallback<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): callback is MapStringCallback<U> {\n  return !!callback && isString(arrayOrString);\n}\n\n// source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nfunction map<T, U>(array: T[], callback: MapGenericCallback<T, U>): U[];\nfunction map<U>(string: string, callback: MapStringCallback<U>): U[];\nfunction map<T, U>(arrayOrString: string | T[], callback: MapGenericCallback<T, U> | MapStringCallback<U>): U[] {\n  const res = [];\n\n  if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        const kValue = arrayOrString.charAt(k);\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (k in arrayOrString) {\n        const kValue = arrayOrString[k];\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  }\n\n  return res;\n}\n\nexport const encodeBase64 = (data: string): string =>\n  fromByteArray(new Uint8Array(map(data, (char) => char.charCodeAt(0))));\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nexport const decodeBase64 = (s: string): string => {\n  const e = {} as { [key: string]: number },\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      ((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\n","import { StreamChat } from './client';\nimport { CampaignData, DefaultGenerics, ExtendableGenerics, GetCampaignOptions } from './types';\n\nexport class Campaign<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  id: string | null;\n  data?: CampaignData;\n  client: StreamChat<StreamChatGenerics>;\n\n  constructor(client: StreamChat<StreamChatGenerics>, id: string | null, data?: CampaignData) {\n    this.client = client;\n    this.id = id;\n    this.data = data;\n  }\n\n  async create() {\n    const body = {\n      id: this.id,\n      message_template: this.data?.message_template,\n      segment_ids: this.data?.segment_ids,\n      sender_id: this.data?.sender_id,\n      sender_mode: this.data?.sender_mode,\n      channel_template: this.data?.channel_template,\n      create_channels: this.data?.create_channels,\n      description: this.data?.description,\n      name: this.data?.name,\n      user_ids: this.data?.user_ids,\n    };\n\n    const result = await this.client.createCampaign(body);\n\n    this.id = result.campaign.id;\n    this.data = result.campaign;\n    return result;\n  }\n\n  verifyCampaignId() {\n    if (!this.id) {\n      throw new Error(\n        'Campaign id is missing. Either create the campaign using campaign.create() or set the id during instantiation - const campaign = client.campaign(id)',\n      );\n    }\n  }\n\n  async start(options?: { scheduledFor?: string; stopAt?: string }) {\n    this.verifyCampaignId();\n\n    return await this.client.startCampaign(this.id as string, options);\n  }\n\n  async update(data: Partial<CampaignData>) {\n    this.verifyCampaignId();\n\n    return this.client.updateCampaign(this.id as string, data);\n  }\n\n  async delete() {\n    this.verifyCampaignId();\n\n    return await this.client.deleteCampaign(this.id as string);\n  }\n\n  async stop() {\n    this.verifyCampaignId();\n\n    return this.client.stopCampaign(this.id as string);\n  }\n\n  async get(options?: GetCampaignOptions) {\n    this.verifyCampaignId();\n\n    return this.client.getCampaign(this.id as string, options);\n  }\n}\n","export default null;","import FormData from 'form-data';\nimport {\n  AscDesc,\n  ExtendableGenerics,\n  DefaultGenerics,\n  Logger,\n  OwnUserBase,\n  OwnUserResponse,\n  UserResponse,\n  MessageResponse,\n  FormatMessageResponse,\n  ReactionGroupResponse,\n  MessageSet,\n  MessagePaginationOptions,\n  ChannelQueryOptions,\n  QueryChannelAPIResponse,\n  ChannelSort,\n  ChannelFilters,\n  ChannelSortBase,\n  PromoteChannelParams,\n} from './types';\nimport { StreamChat } from './client';\nimport { Channel } from './channel';\nimport { AxiosRequestConfig } from 'axios';\n\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */\nexport function logChatPromiseExecution<T>(promise: Promise<T>, name: string) {\n  promise.then().catch((error) => {\n    console.warn(`failed to do ${name}, ran into error: `, error);\n  });\n}\n\nexport const sleep = (m: number): Promise<void> => new Promise((r) => setTimeout(r, m));\n\nexport function isFunction<T>(value: Function | T): value is Function {\n  return (\n    value &&\n    (Object.prototype.toString.call(value) === '[object Function]' ||\n      'function' === typeof value ||\n      value instanceof Function)\n  );\n}\n\nexport const chatCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000,\n};\n\nfunction isReadableStream(obj: unknown): obj is NodeJS.ReadStream {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    ((obj as NodeJS.ReadStream).readable || typeof (obj as NodeJS.ReadStream)._read === 'function')\n  );\n}\n\nfunction isBuffer(obj: unknown): obj is Buffer {\n  return (\n    obj != null &&\n    (obj as Buffer).constructor != null &&\n    // @ts-expect-error\n    typeof obj.constructor.isBuffer === 'function' &&\n    // @ts-expect-error\n    obj.constructor.isBuffer(obj)\n  );\n}\n\nfunction isFileWebAPI(uri: unknown): uri is File {\n  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;\n}\n\nexport function isOwnUser<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  user?: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>,\n): user is OwnUserResponse<StreamChatGenerics> {\n  return (user as OwnUserResponse<StreamChatGenerics>)?.total_unread_count !== undefined;\n}\n\nfunction isBlobWebAPI(uri: unknown): uri is Blob {\n  return typeof window !== 'undefined' && 'Blob' in window && uri instanceof Blob;\n}\n\nexport function isOwnUserBaseProperty(property: string) {\n  const ownUserBaseProperties: {\n    [Property in keyof Required<OwnUserBase>]: boolean;\n  } = {\n    channel_mutes: true,\n    devices: true,\n    mutes: true,\n    total_unread_count: true,\n    unread_channels: true,\n    unread_count: true,\n    unread_threads: true,\n    invisible: true,\n    privacy_settings: true,\n    roles: true,\n    push_preferences: true,\n  };\n\n  return ownUserBaseProperties[property as keyof OwnUserBase];\n}\n\nexport function addFileToFormData(\n  uri: string | NodeJS.ReadableStream | Buffer | File,\n  name?: string,\n  contentType?: string,\n) {\n  const data = new FormData();\n\n  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {\n    if (name) data.append('file', uri, name);\n    else data.append('file', uri);\n  } else {\n    data.append('file', {\n      uri,\n      name: name || (uri as string).split('/').reverse()[0],\n      contentType: contentType || undefined,\n      type: contentType || undefined,\n    });\n  }\n\n  return data;\n}\nexport function normalizeQuerySort<T extends Record<string, AscDesc | undefined>>(sort: T | T[]) {\n  const sortFields: Array<{ direction: AscDesc; field: keyof T }> = [];\n  const sortArr = Array.isArray(sort) ? sort : [sort];\n  for (const item of sortArr) {\n    const entries = Object.entries(item) as [keyof T, AscDesc][];\n    if (entries.length > 1) {\n      console.warn(\n        \"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\",\n      );\n    }\n    for (const [field, direction] of entries) {\n      sortFields.push({ field, direction });\n    }\n  }\n  return sortFields;\n}\n\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\nexport function retryInterval(numberOfFailures: number) {\n  // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)\n  const max = Math.min(500 + numberOfFailures * 2000, 25000);\n  const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function randomId() {\n  return generateUUIDv4();\n}\n\nfunction hex(bytes: Uint8Array): string {\n  let s = '';\n  for (let i = 0; i < bytes.length; i++) {\n    s += bytes[i].toString(16).padStart(2, '0');\n  }\n  return s;\n}\n\n// https://tools.ietf.org/html/rfc4122\nexport function generateUUIDv4() {\n  const bytes = getRandomBytes(16);\n  bytes[6] = (bytes[6] & 0x0f) | 0x40; // version\n  bytes[8] = (bytes[8] & 0xbf) | 0x80; // variant\n\n  return (\n    hex(bytes.subarray(0, 4)) +\n    '-' +\n    hex(bytes.subarray(4, 6)) +\n    '-' +\n    hex(bytes.subarray(6, 8)) +\n    '-' +\n    hex(bytes.subarray(8, 10)) +\n    '-' +\n    hex(bytes.subarray(10, 16))\n  );\n}\n\nfunction getRandomValuesWithMathRandom(bytes: Uint8Array): void {\n  const max = Math.pow(2, (8 * bytes.byteLength) / bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = Math.random() * max;\n  }\n}\ndeclare const msCrypto: Crypto;\n\nconst getRandomValues = (() => {\n  if (typeof crypto !== 'undefined' && typeof crypto?.getRandomValues !== 'undefined') {\n    return crypto.getRandomValues.bind(crypto);\n  } else if (typeof msCrypto !== 'undefined') {\n    return msCrypto.getRandomValues.bind(msCrypto);\n  } else {\n    return getRandomValuesWithMathRandom;\n  }\n})();\n\nfunction getRandomBytes(length: number): Uint8Array {\n  const bytes = new Uint8Array(length);\n  getRandomValues(bytes);\n  return bytes;\n}\n\nexport function convertErrorToJson(err: Error) {\n  const jsonObj = {} as Record<string, unknown>;\n\n  if (!err) return jsonObj;\n\n  try {\n    Object.getOwnPropertyNames(err).forEach((key) => {\n      jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n    });\n  } catch (_) {\n    return {\n      error: 'failed to serialize the error',\n    };\n  }\n\n  return jsonObj;\n}\n\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */\nexport function isOnline() {\n  const nav =\n    typeof navigator !== 'undefined'\n      ? navigator\n      : typeof window !== 'undefined' && window.navigator\n      ? window.navigator\n      : undefined;\n\n  if (!nav) {\n    console.warn('isOnline failed to access window.navigator and assume browser is online');\n    return true;\n  }\n\n  // RN navigator has undefined for onLine\n  if (typeof nav.onLine !== 'boolean') {\n    return true;\n  }\n\n  return nav.onLine;\n}\n\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */\nexport function addConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('offline', cb);\n    window.addEventListener('online', cb);\n  }\n}\n\nexport function removeConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.removeEventListener) {\n    window.removeEventListener('offline', cb);\n    window.removeEventListener('online', cb);\n  }\n}\n\nexport const axiosParamsSerializer: AxiosRequestConfig['paramsSerializer'] = (params) => {\n  const newParams = [];\n  for (const k in params) {\n    // Stream backend doesn't treat \"undefined\" value same as value not being present.\n    // So, we need to skip the undefined values.\n    if (params[k] === undefined) continue;\n\n    if (Array.isArray(params[k]) || typeof params[k] === 'object') {\n      newParams.push(`${k}=${encodeURIComponent(JSON.stringify(params[k]))}`);\n    } else {\n      newParams.push(`${k}=${encodeURIComponent(params[k])}`);\n    }\n  }\n\n  return newParams.join('&');\n};\n\n/**\n * Takes the message object, parses the dates, sets `__html`\n * and sets the status to `received` if missing; returns a new message object.\n *\n * @param {MessageResponse<StreamChatGenerics>} message `MessageResponse` object\n */\nexport function formatMessage<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  message: MessageResponse<StreamChatGenerics> | FormatMessageResponse<StreamChatGenerics>,\n): FormatMessageResponse<StreamChatGenerics> {\n  return {\n    ...message,\n    /**\n     * @deprecated please use `html`\n     */\n    __html: message.html,\n    // parse the dates\n    pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n    created_at: message.created_at ? new Date(message.created_at) : new Date(),\n    updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n    deleted_at: message.deleted_at ? new Date(message.deleted_at) : null,\n    status: message.status || 'received',\n    reaction_groups: maybeGetReactionGroupsFallback(\n      message.reaction_groups,\n      message.reaction_counts,\n      message.reaction_scores,\n    ),\n  };\n}\n\nexport const findIndexInSortedArray = <T, L>({\n  needle,\n  sortedArray,\n  selectKey,\n  selectValueToCompare = (e) => e,\n  sortDirection = 'ascending',\n}: {\n  needle: T;\n  sortedArray: readonly T[];\n  /**\n   * In an array of objects (like messages), pick a unique property identifying\n   * an element. It will be used to find a direct match for the needle element\n   * in case compare values are not unique.\n   *\n   * @example\n   * ```ts\n   * selectKey: (message) => message.id\n   * ```\n   */\n  selectKey?: (arrayElement: T) => string;\n  /**\n   * In an array of objects (like messages), pick a specific\n   * property to compare the needle value to.\n   *\n   * @example\n   * ```ts\n   * selectValueToCompare: (message) => message.created_at.getTime()\n   * ```\n   */\n  selectValueToCompare?: (arrayElement: T) => L | T;\n  /**\n   * @default ascending\n   * @description\n   * ```md\n   * ascending  - [1,2,3,4,5...]\n   * descending - [...5,4,3,2,1]\n   * ```\n   */\n  sortDirection?: 'ascending' | 'descending';\n}) => {\n  if (!sortedArray.length) return 0;\n\n  let left = 0;\n  let right = sortedArray.length - 1;\n  let middle = 0;\n\n  const recalculateMiddle = () => {\n    middle = Math.round((left + right) / 2);\n  };\n\n  const comparableNeedle = selectValueToCompare(needle);\n\n  while (left <= right) {\n    recalculateMiddle();\n\n    const comparableMiddle = selectValueToCompare(sortedArray[middle]);\n\n    if (\n      (sortDirection === 'ascending' && comparableNeedle < comparableMiddle) ||\n      (sortDirection === 'descending' && comparableNeedle >= comparableMiddle)\n    ) {\n      right = middle - 1;\n    } else {\n      left = middle + 1;\n    }\n  }\n\n  // In case there are several array elements with the same comparable value, search around the insertion\n  // point to possibly find an element with the same key. If found, prefer it.\n  // This, for example, prevents duplication of messages with the same creation date.\n  if (selectKey) {\n    const needleKey = selectKey(needle);\n    const step = sortDirection === 'ascending' ? -1 : +1;\n    for (\n      let i = left + step;\n      0 <= i && i < sortedArray.length && selectValueToCompare(sortedArray[i]) === comparableNeedle;\n      i += step\n    ) {\n      if (selectKey(sortedArray[i]) === needleKey) {\n        return i;\n      }\n    }\n  }\n\n  return left;\n};\n\nexport function addToMessageList<T extends FormatMessageResponse>(\n  messages: readonly T[],\n  newMessage: T,\n  timestampChanged = false,\n  sortBy: 'pinned_at' | 'created_at' = 'created_at',\n  addIfDoesNotExist = true,\n) {\n  const addMessageToList = addIfDoesNotExist || timestampChanged;\n  let newMessages = [...messages];\n\n  // if created_at has changed, message should be filtered and re-inserted in correct order\n  // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n  if (timestampChanged) {\n    newMessages = newMessages.filter((message) => !(message.id && newMessage.id === message.id));\n  }\n\n  // for empty list just concat and return unless it's an update or deletion\n  if (newMessages.length === 0 && addMessageToList) {\n    return newMessages.concat(newMessage);\n  } else if (newMessages.length === 0) {\n    return newMessages;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const messageTime = newMessage[sortBy]!.getTime();\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const messageIsNewest = newMessages.at(-1)![sortBy]!.getTime() < messageTime;\n\n  // if message is newer than last item in the list concat and return unless it's an update or deletion\n  if (messageIsNewest && addMessageToList) {\n    return newMessages.concat(newMessage);\n  } else if (messageIsNewest) {\n    return newMessages;\n  }\n\n  // find the closest index to push the new message\n  const insertionIndex = findIndexInSortedArray({\n    needle: newMessage,\n    sortedArray: newMessages,\n    sortDirection: 'ascending',\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    selectValueToCompare: (m) => m[sortBy]!.getTime(),\n    selectKey: (m) => m.id,\n  });\n\n  // message already exists and not filtered with timestampChanged, update and return\n  if (\n    !timestampChanged &&\n    newMessage.id &&\n    newMessages[insertionIndex] &&\n    newMessage.id === newMessages[insertionIndex].id\n  ) {\n    newMessages[insertionIndex] = newMessage;\n    return newMessages;\n  }\n\n  // do not add updated or deleted messages to the list if they already exist or come with a timestamp change\n  if (addMessageToList) {\n    newMessages.splice(insertionIndex, 0, newMessage);\n  }\n\n  return newMessages;\n}\n\nfunction maybeGetReactionGroupsFallback(\n  groups: { [key: string]: ReactionGroupResponse } | null | undefined,\n  counts: { [key: string]: number } | null | undefined,\n  scores: { [key: string]: number } | null | undefined,\n): { [key: string]: ReactionGroupResponse } | null {\n  if (groups) {\n    return groups;\n  }\n\n  if (counts && scores) {\n    const fallback: { [key: string]: ReactionGroupResponse } = {};\n\n    for (const type of Object.keys(counts)) {\n      fallback[type] = {\n        count: counts[type],\n        sum_scores: scores[type],\n      };\n    }\n\n    return fallback;\n  }\n\n  return null;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface DebouncedFunc<T extends (...args: any[]) => any> {\n  /**\n   * Call the original function, but applying the debounce rules.\n   *\n   * If the debounced function can be run immediately, this calls it and returns its return\n   * value.\n   *\n   * Otherwise, it returns the return value of the last invocation, or undefined if the debounced\n   * function was not invoked yet.\n   */\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n\n  /**\n   * Throw away any pending invocation of the debounced function.\n   */\n  cancel(): void;\n\n  /**\n   * If there is a pending invocation of the debounced function, invoke it immediately and return\n   * its return value.\n   *\n   * Otherwise, return the value from the last invocation, or undefined if the debounced function\n   * was never invoked.\n   */\n  flush(): ReturnType<T> | undefined;\n}\n\n// works exactly the same as lodash.debounce\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const debounce = <T extends (...args: any[]) => any>(\n  fn: T,\n  timeout = 0,\n  { leading = false, trailing = true }: { leading?: boolean; trailing?: boolean } = {},\n): DebouncedFunc<T> => {\n  let runningTimeout: null | NodeJS.Timeout = null;\n  let argsForTrailingExecution: Parameters<T> | null = null;\n  let lastResult: ReturnType<T> | undefined;\n\n  const debouncedFn = (...args: Parameters<T>) => {\n    if (runningTimeout) {\n      clearTimeout(runningTimeout);\n    } else if (leading) {\n      lastResult = fn(...args);\n    }\n    if (trailing) argsForTrailingExecution = args;\n\n    const timeoutHandler = () => {\n      if (argsForTrailingExecution) {\n        lastResult = fn(...argsForTrailingExecution);\n        argsForTrailingExecution = null;\n      }\n      runningTimeout = null;\n    };\n\n    runningTimeout = setTimeout(timeoutHandler, timeout);\n    return lastResult;\n  };\n\n  debouncedFn.cancel = () => {\n    if (runningTimeout) clearTimeout(runningTimeout);\n  };\n\n  debouncedFn.flush = () => {\n    if (runningTimeout) {\n      clearTimeout(runningTimeout);\n      runningTimeout = null;\n      if (argsForTrailingExecution) {\n        lastResult = fn(...argsForTrailingExecution);\n      }\n    }\n    return lastResult;\n  };\n  return debouncedFn;\n};\n\n// works exactly the same as lodash.throttle\nexport const throttle = <T extends (...args: unknown[]) => unknown>(\n  fn: T,\n  timeout = 200,\n  { leading = true, trailing = false }: { leading?: boolean; trailing?: boolean } = {},\n) => {\n  let runningTimeout: null | NodeJS.Timeout = null;\n  let storedArgs: Parameters<T> | null = null;\n\n  return (...args: Parameters<T>) => {\n    if (runningTimeout) {\n      if (trailing) storedArgs = args;\n      return;\n    }\n\n    if (leading) fn(...args);\n\n    const timeoutHandler = () => {\n      if (storedArgs) {\n        fn(...storedArgs);\n        storedArgs = null;\n        runningTimeout = setTimeout(timeoutHandler, timeout);\n\n        return;\n      }\n\n      runningTimeout = null;\n    };\n\n    runningTimeout = setTimeout(timeoutHandler, timeout);\n  };\n};\n\nconst get = <T>(obj: T, path: string): unknown =>\n  path.split('.').reduce<unknown>((acc, key) => {\n    if (acc && typeof acc === 'object' && key in acc) {\n      return (acc as Record<string, unknown>)[key];\n    }\n    return undefined;\n  }, obj);\n\n// works exactly the same as lodash.uniqBy\nexport const uniqBy = <T>(array: T[] | unknown, iteratee: ((item: T) => unknown) | keyof T): T[] => {\n  if (!Array.isArray(array)) return [];\n\n  const seen = new Set<unknown>();\n  return array.filter((item) => {\n    const key = typeof iteratee === 'function' ? iteratee(item) : get(item, iteratee as string);\n    if (seen.has(key)) return false;\n    seen.add(key);\n    return true;\n  });\n};\n\ntype MessagePaginationUpdatedParams<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  parentSet: MessageSet;\n  requestedPageSize: number;\n  returnedPage: MessageResponse<StreamChatGenerics>[];\n  logger?: Logger;\n  messagePaginationOptions?: MessagePaginationOptions;\n};\n\nexport function binarySearchByDateEqualOrNearestGreater(\n  array: {\n    created_at?: string;\n  }[],\n  targetDate: Date,\n): number {\n  let left = 0;\n  let right = array.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    const midCreatedAt = array[mid].created_at;\n    if (!midCreatedAt) {\n      left += 1;\n      continue;\n    }\n    const midDate = new Date(midCreatedAt);\n\n    if (midDate.getTime() === targetDate.getTime()) {\n      return mid;\n    } else if (midDate.getTime() < targetDate.getTime()) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  return left;\n}\n\nconst messagePaginationCreatedAtAround = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions,\n}: MessagePaginationUpdatedParams<StreamChatGenerics>) => {\n  const newPagination = { ...parentSet.pagination };\n  if (!messagePaginationOptions?.created_at_around) return newPagination;\n  let hasPrev;\n  let hasNext;\n  let updateHasPrev;\n  let updateHasNext;\n  const createdAtAroundDate = new Date(messagePaginationOptions.created_at_around);\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n\n  // expect ASC order (from oldest to newest)\n  const wholePageHasNewerMessages =\n    !!firstPageMsg?.created_at && new Date(firstPageMsg.created_at) > createdAtAroundDate;\n  const wholePageHasOlderMessages = !!lastPageMsg?.created_at && new Date(lastPageMsg.created_at) < createdAtAroundDate;\n\n  const requestedPageSizeNotMet =\n    requestedPageSize > parentSet.messages.length && requestedPageSize > returnedPage.length;\n  const noMoreMessages =\n    (requestedPageSize > parentSet.messages.length || parentSet.messages.length >= returnedPage.length) &&\n    requestedPageSize > returnedPage.length;\n\n  if (wholePageHasNewerMessages) {\n    hasPrev = false;\n    updateHasPrev = true;\n    if (requestedPageSizeNotMet) {\n      hasNext = false;\n      updateHasNext = true;\n    }\n  } else if (wholePageHasOlderMessages) {\n    hasNext = false;\n    updateHasNext = true;\n    if (requestedPageSizeNotMet) {\n      hasPrev = false;\n      updateHasPrev = true;\n    }\n  } else if (noMoreMessages) {\n    hasNext = hasPrev = false;\n    updateHasPrev = updateHasNext = true;\n  } else {\n    const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [\n      firstPageMsg?.id && firstPageMsg.id === parentSet.messages[0]?.id,\n      lastPageMsg?.id && lastPageMsg.id === parentSet.messages.slice(-1)[0]?.id,\n    ];\n    updateHasPrev = firstPageMsgIsFirstInSet;\n    updateHasNext = lastPageMsgIsLastInSet;\n    const midPointByCount = Math.floor(returnedPage.length / 2);\n    const midPointByCreationDate = binarySearchByDateEqualOrNearestGreater(returnedPage, createdAtAroundDate);\n\n    if (midPointByCreationDate !== -1) {\n      hasPrev = midPointByCount <= midPointByCreationDate;\n      hasNext = midPointByCount >= midPointByCreationDate;\n    }\n  }\n\n  if (updateHasPrev && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;\n  if (updateHasNext && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;\n\n  return newPagination;\n};\n\nconst messagePaginationIdAround = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions,\n}: MessagePaginationUpdatedParams<StreamChatGenerics>) => {\n  const newPagination = { ...parentSet.pagination };\n  const { id_around } = messagePaginationOptions || {};\n  if (!id_around) return newPagination;\n  let hasPrev;\n  let hasNext;\n\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n  const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [\n    firstPageMsg?.id === parentSet.messages[0]?.id,\n    lastPageMsg?.id === parentSet.messages.slice(-1)[0]?.id,\n  ];\n  let updateHasPrev = firstPageMsgIsFirstInSet;\n  let updateHasNext = lastPageMsgIsLastInSet;\n\n  const midPoint = Math.floor(returnedPage.length / 2);\n  const noMoreMessages =\n    (requestedPageSize > parentSet.messages.length || parentSet.messages.length >= returnedPage.length) &&\n    requestedPageSize > returnedPage.length;\n\n  if (noMoreMessages) {\n    hasNext = hasPrev = false;\n    updateHasPrev = updateHasNext = true;\n  } else if (!returnedPage[midPoint]) {\n    return newPagination;\n  } else if (returnedPage[midPoint].id === id_around) {\n    hasPrev = hasNext = true;\n  } else {\n    let targetMsg;\n    const halves = [returnedPage.slice(0, midPoint), returnedPage.slice(midPoint)];\n    hasPrev = hasNext = true;\n    for (let i = 0; i < halves.length; i++) {\n      targetMsg = halves[i].find((message) => message.id === id_around);\n      if (targetMsg && i === 0) {\n        hasPrev = false;\n      }\n      if (targetMsg && i === 1) {\n        hasNext = false;\n      }\n    }\n  }\n\n  if (updateHasPrev && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;\n  if (updateHasNext && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;\n\n  return newPagination;\n};\n\nconst messagePaginationLinear = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions,\n}: MessagePaginationUpdatedParams<StreamChatGenerics>) => {\n  const newPagination = { ...parentSet.pagination };\n\n  let hasPrev;\n  let hasNext;\n\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n  const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [\n    firstPageMsg?.id && firstPageMsg.id === parentSet.messages[0]?.id,\n    lastPageMsg?.id && lastPageMsg.id === parentSet.messages.slice(-1)[0]?.id,\n  ];\n\n  const queriedNextMessages =\n    messagePaginationOptions &&\n    (messagePaginationOptions.created_at_after_or_equal ||\n      messagePaginationOptions.created_at_after ||\n      messagePaginationOptions.id_gt ||\n      messagePaginationOptions.id_gte);\n\n  const queriedPrevMessages =\n    typeof messagePaginationOptions === 'undefined'\n      ? true\n      : messagePaginationOptions.created_at_before_or_equal ||\n        messagePaginationOptions.created_at_before ||\n        messagePaginationOptions.id_lt ||\n        messagePaginationOptions.id_lte ||\n        messagePaginationOptions.offset;\n\n  const containsUnrecognizedOptionsOnly =\n    !queriedNextMessages &&\n    !queriedPrevMessages &&\n    !messagePaginationOptions?.id_around &&\n    !messagePaginationOptions?.created_at_around;\n\n  const hasMore = returnedPage.length >= requestedPageSize;\n\n  if (typeof queriedPrevMessages !== 'undefined' || containsUnrecognizedOptionsOnly) {\n    hasPrev = hasMore;\n  }\n  if (typeof queriedNextMessages !== 'undefined') {\n    hasNext = hasMore;\n  }\n  const returnedPageIsEmpty = returnedPage.length === 0;\n\n  if ((firstPageMsgIsFirstInSet || returnedPageIsEmpty) && typeof hasPrev !== 'undefined')\n    newPagination.hasPrev = hasPrev;\n  if ((lastPageMsgIsLastInSet || returnedPageIsEmpty) && typeof hasNext !== 'undefined')\n    newPagination.hasNext = hasNext;\n\n  return newPagination;\n};\n\nexport const messageSetPagination = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  params: MessagePaginationUpdatedParams<StreamChatGenerics>,\n) => {\n  if (params.parentSet.messages.length < params.returnedPage.length) {\n    params.logger?.('error', 'Corrupted message set state: parent set size < returned page size');\n    return params.parentSet.pagination;\n  }\n\n  if (params.messagePaginationOptions?.created_at_around) {\n    return messagePaginationCreatedAtAround(params);\n  } else if (params.messagePaginationOptions?.id_around) {\n    return messagePaginationIdAround(params);\n  } else {\n    return messagePaginationLinear(params);\n  }\n};\n\n/**\n * A utility object used to prevent duplicate invocation of channel.watch() to be triggered when\n * 'notification.message_new' and 'notification.added_to_channel' events arrive at the same time.\n */\nconst WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL: Record<string, Promise<QueryChannelAPIResponse> | undefined> = {};\n\ntype GetChannelParams<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client: StreamChat<StreamChatGenerics>;\n  channel?: Channel<StreamChatGenerics>;\n  id?: string;\n  members?: string[];\n  options?: ChannelQueryOptions<StreamChatGenerics>;\n  type?: string;\n};\n/**\n * Calls channel.watch() if it was not already recently called. Waits for watch promise to resolve even if it was invoked previously.\n * If the channel is not passed as a property, it will get it either by its channel.cid or by its members list and do the same.\n * @param client\n * @param members\n * @param options\n * @param type\n * @param id\n * @param channel\n */\nexport const getAndWatchChannel = async <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  channel,\n  client,\n  id,\n  members,\n  options,\n  type,\n}: GetChannelParams<StreamChatGenerics>) => {\n  if (!channel && !type) {\n    throw new Error('Channel or channel type have to be provided to query a channel.');\n  }\n\n  // unfortunately typescript is not able to infer that if (!channel && !type) === false, then channel or type has to be truthy\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const channelToWatch = channel || client.channel(type!, id, { members });\n\n  // need to keep as with call to channel.watch the id can be changed from undefined to an actual ID generated server-side\n  const originalCid = channelToWatch.id\n    ? channelToWatch.cid\n    : members && members.length\n    ? generateChannelTempCid(channelToWatch.type, members)\n    : undefined;\n\n  if (!originalCid) {\n    throw new Error('Channel ID or channel members array have to be provided to query a channel.');\n  }\n\n  const queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n\n  if (queryPromise) {\n    await queryPromise;\n  } else {\n    try {\n      WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = channelToWatch.watch(options);\n      await WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n    } finally {\n      delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n    }\n  }\n\n  return channelToWatch;\n};\n\n/**\n * Generates a temporary channel.cid for channels created without ID, as they need to be referenced\n * by an identifier until the back-end generates the final ID. The cid is generated by its member IDs\n * which are sorted and can be recreated the same every time given the same arguments.\n * @param channelType\n * @param members\n */\nexport const generateChannelTempCid = (channelType: string, members: string[]) => {\n  if (!members) return;\n  const membersStr = [...members].sort().join(',');\n  if (!membersStr) return;\n  return `${channelType}:!members-${membersStr}`;\n};\n\n/**\n * Checks if a channel is pinned or not. Will return true only if channel.state.membership.pinned_at exists.\n * @param channel\n */\nexport const isChannelPinned = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  channel: Channel<StreamChatGenerics>,\n) => {\n  if (!channel) return false;\n\n  const member = channel.state.membership;\n\n  return !!member?.pinned_at;\n};\n\n/**\n * Checks if a channel is archived or not. Will return true only if channel.state.membership.archived_at exists.\n * @param channel\n */\nexport const isChannelArchived = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  channel: Channel<StreamChatGenerics>,\n) => {\n  if (!channel) return false;\n\n  const member = channel.state.membership;\n\n  return !!member?.archived_at;\n};\n\n/**\n * A utility that tells us whether we should consider archived channels or not based\n * on filters. Will return true only if filters.archived exists and is a boolean value.\n * @param filters\n */\nexport const shouldConsiderArchivedChannels = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  filters: ChannelFilters<StreamChatGenerics>,\n) => {\n  if (!filters) return false;\n\n  return typeof filters.archived === 'boolean';\n};\n\n/**\n * Extracts the value of the sort parameter at a given index, for a targeted key. Can\n * handle both array and object versions of sort. Will return null if the index/key\n * combination does not exist.\n * @param atIndex - the index at which we'll examine the sort value, if it's an array one\n * @param sort - the sort value - both array and object notations are accepted\n * @param targetKey - the target key which needs to exist for the sort at a certain index\n */\nexport const extractSortValue = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  atIndex,\n  sort,\n  targetKey,\n}: {\n  atIndex: number;\n  targetKey: keyof ChannelSortBase<StreamChatGenerics>;\n  sort?: ChannelSort<StreamChatGenerics>;\n}) => {\n  if (!sort) return null;\n  let option: null | ChannelSortBase<StreamChatGenerics> = null;\n\n  if (Array.isArray(sort)) {\n    option = sort[atIndex] ?? null;\n  } else {\n    let index = 0;\n    for (const key in sort) {\n      if (index !== atIndex) {\n        index++;\n        continue;\n      }\n\n      if (key !== targetKey) {\n        return null;\n      }\n\n      option = sort;\n\n      break;\n    }\n  }\n\n  return option?.[targetKey] ?? null;\n};\n\n/**\n * Returns true only if `{ pinned_at: -1 }` or `{ pinned_at: 1 }` option is first within the `sort` array.\n */\nexport const shouldConsiderPinnedChannels = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  sort: ChannelSort<StreamChatGenerics>,\n) => {\n  const value = findPinnedAtSortOrder({ sort });\n\n  if (typeof value !== 'number') return false;\n\n  return Math.abs(value) === 1;\n};\n\n/**\n * Checks whether the sort value of type object contains a pinned_at value or if\n * an array sort value type has the first value be an object containing pinned_at.\n * @param sort\n */\nexport const findPinnedAtSortOrder = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  sort,\n}: {\n  sort: ChannelSort<StreamChatGenerics>;\n}) =>\n  extractSortValue({\n    atIndex: 0,\n    sort,\n    targetKey: 'pinned_at',\n  });\n\n/**\n * Finds the index of the last consecutively pinned channel, starting from the start of the\n * array. Will not consider any pinned channels after the contiguous subsequence at the\n * start of the array.\n * @param channels\n */\nexport const findLastPinnedChannelIndex = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  channels,\n}: {\n  channels: Channel<StreamChatGenerics>[];\n}) => {\n  let lastPinnedChannelIndex: number | null = null;\n\n  for (const channel of channels) {\n    if (!isChannelPinned(channel)) break;\n\n    if (typeof lastPinnedChannelIndex === 'number') {\n      lastPinnedChannelIndex++;\n    } else {\n      lastPinnedChannelIndex = 0;\n    }\n  }\n\n  return lastPinnedChannelIndex;\n};\n\n/**\n * A utility used to move a channel towards the beginning of a list of channels (promote it to a higher position). It\n * considers pinned channels in the process if needed and makes sure to only update the list reference if the list\n * should actually change. It will try to move the channel as high as it can within the list.\n * @param channels - the list of channels we want to modify\n * @param channelToMove - the channel we want to promote\n * @param channelToMoveIndexWithinChannels - optionally, the index of the channel we want to move if we know it (will skip a manual check)\n * @param sort - the sort value used to check for pinned channels\n */\nexport const promoteChannel = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  channels,\n  channelToMove,\n  channelToMoveIndexWithinChannels,\n  sort,\n}: PromoteChannelParams<StreamChatGenerics>) => {\n  // get index of channel to move up\n  const targetChannelIndex =\n    channelToMoveIndexWithinChannels ?? channels.findIndex((channel) => channel.cid === channelToMove.cid);\n\n  const targetChannelExistsWithinList = targetChannelIndex >= 0;\n  const targetChannelAlreadyAtTheTop = targetChannelIndex === 0;\n\n  // pinned channels should not move within the list based on recent activity, channels which\n  // receive messages and are not pinned should move upwards but only under the last pinned channel\n  // in the list\n  const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n  const isTargetChannelPinned = isChannelPinned<StreamChatGenerics>(channelToMove);\n\n  if (targetChannelAlreadyAtTheTop || (considerPinnedChannels && isTargetChannelPinned)) {\n    return channels;\n  }\n\n  const newChannels = [...channels];\n\n  // target channel index is known, remove it from the list\n  if (targetChannelExistsWithinList) {\n    newChannels.splice(targetChannelIndex, 1);\n  }\n\n  // as position of pinned channels has to stay unchanged, we need to\n  // find last pinned channel in the list to move the target channel after\n  let lastPinnedChannelIndex: number | null = null;\n  if (considerPinnedChannels) {\n    lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });\n  }\n\n  // re-insert it at the new place (to specific index if pinned channels are considered)\n  newChannels.splice(typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0, 0, channelToMove);\n\n  return newChannels;\n};\n","export const DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE = 25;\nexport const DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE = 100;\n\nexport const DEFAULT_MESSAGE_SET_PAGINATION = { hasNext: false, hasPrev: false };\n","import { Channel } from './channel';\nimport {\n  ChannelMemberResponse,\n  DefaultGenerics,\n  Event,\n  ExtendableGenerics,\n  FormatMessageResponse,\n  MessageResponse,\n  MessageSet,\n  MessageSetType,\n  PendingMessageResponse,\n  ReactionResponse,\n  UserResponse,\n} from './types';\nimport { addToMessageList, formatMessage } from './utils';\nimport { DEFAULT_MESSAGE_SET_PAGINATION } from './constants';\n\ntype ChannelReadStatus<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Record<\n  string,\n  {\n    last_read: Date;\n    unread_messages: number;\n    user: UserResponse<StreamChatGenerics>;\n    first_unread_message_id?: string;\n    last_read_message_id?: string;\n  }\n>;\n\n/**\n * ChannelState - A container class for the channel state.\n */\nexport class ChannelState<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  _channel: Channel<StreamChatGenerics>;\n  watcher_count: number;\n  typing: Record<string, Event<StreamChatGenerics>>;\n  read: ChannelReadStatus<StreamChatGenerics>;\n  pinnedMessages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>;\n  pending_messages: Array<PendingMessageResponse<StreamChatGenerics>>;\n  threads: Record<string, Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>>;\n  mutedUsers: Array<UserResponse<StreamChatGenerics>>;\n  watchers: Record<string, UserResponse<StreamChatGenerics>>;\n  members: Record<string, ChannelMemberResponse<StreamChatGenerics>>;\n  unreadCount: number;\n  membership: ChannelMemberResponse<StreamChatGenerics>;\n  last_message_at: Date | null;\n  /**\n   * Flag which indicates if channel state contain latest/recent messages or no.\n   * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   * When false, any new message (received by websocket event - message.new) will not\n   * be pushed on to message list.\n   */\n  isUpToDate: boolean;\n  /**\n   * Disjoint lists of messages\n   * Users can jump in the message list (with searching) and this can result in disjoint lists of messages\n   * The state manages these lists and merges them when lists overlap\n   * The messages array contains the currently active set\n   */\n  messageSets: MessageSet[] = [];\n\n  constructor(channel: Channel<StreamChatGenerics>) {\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = {};\n    this.read = {};\n    this.initMessages();\n    this.pinnedMessages = [];\n    this.pending_messages = [];\n    this.threads = {};\n    // a list of users to hide messages from\n    this.mutedUsers = [];\n    this.watchers = {};\n    this.members = {};\n    this.membership = {};\n    this.unreadCount = 0;\n    /**\n     * Flag which indicates if channel state contain latest/recent messages or no.\n     * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     * When false, any new message (received by websocket event - message.new) will not\n     * be pushed on to message list.\n     */\n    this.isUpToDate = true;\n    this.last_message_at = channel?.state?.last_message_at != null ? new Date(channel.state.last_message_at) : null;\n  }\n\n  get messages() {\n    return this.messageSets.find((s) => s.isCurrent)?.messages || [];\n  }\n\n  set messages(messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>) {\n    const index = this.messageSets.findIndex((s) => s.isCurrent);\n    this.messageSets[index].messages = messages;\n  }\n\n  /**\n   * The list of latest messages\n   * The messages array not always contains the latest messages (for example if a user searched for an earlier message, that is in a different message set)\n   */\n  get latestMessages() {\n    return this.messageSets.find((s) => s.isLatest)?.messages || [];\n  }\n\n  set latestMessages(messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>) {\n    const index = this.messageSets.findIndex((s) => s.isLatest);\n    this.messageSets[index].messages = messages;\n  }\n\n  get messagePagination() {\n    return this.messageSets.find((s) => s.isCurrent)?.pagination || DEFAULT_MESSAGE_SET_PAGINATION;\n  }\n\n  /**\n   * addMessageSorted - Add a message to the state\n   *\n   * @param {MessageResponse<StreamChatGenerics>} newMessage A new message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if message is not in the list (only used if addIfDoesNotExist is true)\n   */\n  addMessageSorted(\n    newMessage: MessageResponse<StreamChatGenerics>,\n    timestampChanged = false,\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'latest',\n  ) {\n    return this.addMessagesSorted(\n      [newMessage],\n      timestampChanged,\n      false,\n      addIfDoesNotExist,\n      messageSetToAddToIfDoesNotExist,\n    );\n  }\n\n  /**\n   * Takes the message object, parses the dates, sets `__html`\n   * and sets the status to `received` if missing; returns a new message object.\n   *\n   * @param {MessageResponse<StreamChatGenerics>} message `MessageResponse` object\n   */\n  formatMessage = (message: MessageResponse<StreamChatGenerics>) => formatMessage<StreamChatGenerics>(message);\n\n  /**\n   * addMessagesSorted - Add the list of messages to state and resorts the messages\n   *\n   * @param {Array<MessageResponse<StreamChatGenerics>>} newMessages A list of messages\n   * @param {boolean} timestampChanged Whether updating messages with changed created_at value.\n   * @param {boolean} initializing Whether channel is being initialized.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if messages are not in the list (only used if addIfDoesNotExist is true)\n   *\n   */\n  addMessagesSorted(\n    newMessages: MessageResponse<StreamChatGenerics>[],\n    timestampChanged = false,\n    initializing = false,\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    const { messagesToAdd, targetMessageSetIndex } = this.findTargetMessageSet(\n      newMessages,\n      addIfDoesNotExist,\n      messageSetToAddToIfDoesNotExist,\n    );\n\n    for (let i = 0; i < messagesToAdd.length; i += 1) {\n      const isFromShadowBannedUser = messagesToAdd[i].shadowed;\n      if (isFromShadowBannedUser) {\n        continue;\n      }\n      // If message is already formatted we can skip the tasks below\n      // This will be true for messages that are already present at the state -> this happens when we perform merging of message sets\n      // This will be also true for message previews used by some SDKs\n      const isMessageFormatted = messagesToAdd[i].created_at instanceof Date;\n      let message: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>;\n      if (isMessageFormatted) {\n        message = messagesToAdd[i] as ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>;\n      } else {\n        message = this.formatMessage(messagesToAdd[i] as MessageResponse<StreamChatGenerics>);\n\n        if (message.user && this._channel?.cid) {\n          /**\n           * Store the reference to user for this channel, so that when we have to\n           * handle updates to user, we can use the reference map, to determine which\n           * channels need to be updated with updated user object.\n           */\n          this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);\n        }\n\n        if (initializing && message.id && this.threads[message.id]) {\n          // If we are initializing the state of channel (e.g., in case of connection recovery),\n          // then in that case we remove thread related to this message from threads object.\n          // This way we can ensure that we don't have any stale data in thread object\n          // and consumer can refetch the replies.\n          delete this.threads[message.id];\n        }\n\n        if (!this.last_message_at) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n\n        if (message.created_at.getTime() > this.last_message_at.getTime()) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n      }\n\n      // update or append the messages...\n      const parentID = message.parent_id;\n\n      // add to the given message set\n      if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {\n        this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(\n          this.messageSets[targetMessageSetIndex].messages,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n      }\n\n      /**\n       * Add message to thread if applicable and the message\n       * was added when querying for replies, or the thread already exits.\n       * This is to prevent the thread state from getting out of sync if\n       * a thread message is shown in channel but older than the newest thread\n       * message. This situation can result in a thread state where a random\n       * message is \"oldest\" message, and newer messages are therefore not loaded.\n       * This can also occur if an old thread message is updated.\n       */\n      if (parentID && !initializing) {\n        const thread = this.threads[parentID] || [];\n        this.threads[parentID] = this._addToMessageList(\n          thread,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n      }\n    }\n\n    return {\n      messageSet: this.messageSets[targetMessageSetIndex],\n    };\n  }\n\n  /**\n   * addPinnedMessages - adds messages in pinnedMessages property\n   *\n   * @param {Array<MessageResponse<StreamChatGenerics>>} pinnedMessages A list of pinned messages\n   *\n   */\n  addPinnedMessages(pinnedMessages: MessageResponse<StreamChatGenerics>[]) {\n    for (let i = 0; i < pinnedMessages.length; i += 1) {\n      this.addPinnedMessage(pinnedMessages[i]);\n    }\n  }\n\n  /**\n   * addPinnedMessage - adds message in pinnedMessages\n   *\n   * @param {MessageResponse<StreamChatGenerics>} pinnedMessage message to update\n   *\n   */\n  addPinnedMessage(pinnedMessage: MessageResponse<StreamChatGenerics>) {\n    this.pinnedMessages = this._addToMessageList(\n      this.pinnedMessages,\n      this.formatMessage(pinnedMessage),\n      false,\n      'pinned_at',\n    );\n  }\n\n  /**\n   * removePinnedMessage - removes pinned message from pinnedMessages\n   *\n   * @param {MessageResponse<StreamChatGenerics>} message message to remove\n   *\n   */\n  removePinnedMessage(message: MessageResponse<StreamChatGenerics>) {\n    const { result } = this.removeMessageFromArray(this.pinnedMessages, message);\n    this.pinnedMessages = result;\n  }\n\n  addReaction(\n    reaction: ReactionResponse<StreamChatGenerics>,\n    message?: MessageResponse<StreamChatGenerics>,\n    enforce_unique?: boolean,\n  ) {\n    if (!message) return;\n    const messageWithReaction = message;\n    this._updateMessage(message, (msg) => {\n      messageWithReaction.own_reactions = this._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);\n      return this.formatMessage(messageWithReaction);\n    });\n    return messageWithReaction;\n  }\n\n  _addOwnReactionToMessage(\n    ownReactions: ReactionResponse<StreamChatGenerics>[] | null | undefined,\n    reaction: ReactionResponse<StreamChatGenerics>,\n    enforce_unique?: boolean,\n  ) {\n    if (enforce_unique) {\n      ownReactions = [];\n    } else {\n      ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n    }\n\n    ownReactions = ownReactions || [];\n    if (this._channel.getClient().userID === reaction.user_id) {\n      ownReactions.push(reaction);\n    }\n\n    return ownReactions;\n  }\n\n  _removeOwnReactionFromMessage(\n    ownReactions: ReactionResponse<StreamChatGenerics>[] | null | undefined,\n    reaction: ReactionResponse<StreamChatGenerics>,\n  ) {\n    if (ownReactions) {\n      return ownReactions.filter((item) => item.user_id !== reaction.user_id || item.type !== reaction.type);\n    }\n    return ownReactions;\n  }\n\n  removeReaction(reaction: ReactionResponse<StreamChatGenerics>, message?: MessageResponse<StreamChatGenerics>) {\n    if (!message) return;\n    const messageWithReaction = message;\n    this._updateMessage(message, (msg) => {\n      messageWithReaction.own_reactions = this._removeOwnReactionFromMessage(msg.own_reactions, reaction);\n      return this.formatMessage(messageWithReaction);\n    });\n    return messageWithReaction;\n  }\n\n  _updateQuotedMessageReferences({\n    message,\n    remove,\n  }: {\n    message: MessageResponse<StreamChatGenerics>;\n    remove?: boolean;\n  }) {\n    const parseMessage = (m: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>) =>\n      (({\n        ...m,\n        created_at: m.created_at.toISOString(),\n        pinned_at: m.pinned_at?.toISOString(),\n        updated_at: m.updated_at?.toISOString(),\n      } as unknown) as MessageResponse<StreamChatGenerics>);\n\n    const update = (messages: FormatMessageResponse<StreamChatGenerics>[]) => {\n      const updatedMessages = messages.reduce<MessageResponse<StreamChatGenerics>[]>((acc, msg) => {\n        if (msg.quoted_message_id === message.id) {\n          acc.push({ ...parseMessage(msg), quoted_message: remove ? { ...message, attachments: [] } : message });\n        }\n        return acc;\n      }, []);\n      this.addMessagesSorted(updatedMessages, true);\n    };\n\n    if (!message.parent_id) {\n      this.messageSets.forEach((set) => update(set.messages));\n    } else if (message.parent_id && this.threads[message.parent_id]) {\n      // prevent going through all the threads even though it is possible to quote a message from another thread\n      update(this.threads[message.parent_id]);\n    }\n  }\n\n  removeQuotedMessageReferences(message: MessageResponse<StreamChatGenerics>) {\n    this._updateQuotedMessageReferences({ message, remove: true });\n  }\n\n  /**\n   * Updates all instances of given message in channel state\n   * @param message\n   * @param updateFunc\n   */\n  _updateMessage(\n    message: {\n      id?: string;\n      parent_id?: string;\n      pinned?: boolean;\n      show_in_channel?: boolean;\n    },\n    updateFunc: (\n      msg: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>,\n    ) => ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>,\n  ) {\n    const { parent_id, show_in_channel, pinned } = message;\n\n    if (parent_id && this.threads[parent_id]) {\n      const thread = this.threads[parent_id];\n      const msgIndex = thread.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        thread[msgIndex] = updateFunc(thread[msgIndex]);\n        this.threads[parent_id] = thread;\n      }\n    }\n\n    if ((!show_in_channel && !parent_id) || show_in_channel) {\n      const messageSetIndex = this.findMessageSetIndex(message);\n      if (messageSetIndex !== -1) {\n        const msgIndex = this.messageSets[messageSetIndex].messages.findIndex((msg) => msg.id === message.id);\n        if (msgIndex !== -1) {\n          this.messageSets[messageSetIndex].messages[msgIndex] = updateFunc(\n            this.messageSets[messageSetIndex].messages[msgIndex],\n          );\n        }\n      }\n    }\n\n    if (pinned) {\n      const msgIndex = this.pinnedMessages.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        this.pinnedMessages[msgIndex] = updateFunc(this.pinnedMessages[msgIndex]);\n      }\n    }\n  }\n\n  /**\n   * Setter for isUpToDate.\n   *\n   * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.\n   *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   *                    When false, any new message (received by websocket event - message.new) will not\n   *                    be pushed on to message list.\n   */\n  setIsUpToDate = (isUpToDate: boolean) => {\n    this.isUpToDate = isUpToDate;\n  };\n\n  /**\n   * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n   *\n   * @param {Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>} messages A list of messages\n   * @param message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {string} sortBy field name to use to sort the messages by\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   */\n  _addToMessageList(\n    messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n    message: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>,\n    timestampChanged = false,\n    sortBy: 'pinned_at' | 'created_at' = 'created_at',\n    addIfDoesNotExist = true,\n  ) {\n    return addToMessageList(messages, message, timestampChanged, sortBy, addIfDoesNotExist);\n  }\n\n  /**\n   * removeMessage - Description\n   *\n   * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.\n   *\n   * @return {boolean} Returns if the message was removed\n   */\n  removeMessage(messageToRemove: { id: string; messageSetIndex?: number; parent_id?: string }) {\n    let isRemoved = false;\n    if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n      const { removed, result: threadMessages } = this.removeMessageFromArray(\n        this.threads[messageToRemove.parent_id],\n        messageToRemove,\n      );\n\n      this.threads[messageToRemove.parent_id] = threadMessages;\n      isRemoved = removed;\n    } else {\n      const messageSetIndex = messageToRemove.messageSetIndex ?? this.findMessageSetIndex(messageToRemove);\n      if (messageSetIndex !== -1) {\n        const { removed, result: messages } = this.removeMessageFromArray(\n          this.messageSets[messageSetIndex].messages,\n          messageToRemove,\n        );\n        this.messageSets[messageSetIndex].messages = messages;\n        isRemoved = removed;\n      }\n    }\n\n    return isRemoved;\n  }\n\n  removeMessageFromArray = (\n    msgArray: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n    msg: { id: string; parent_id?: string },\n  ) => {\n    const result = msgArray.filter((message) => !(!!message.id && !!msg.id && message.id === msg.id));\n\n    return { removed: result.length < msgArray.length, result };\n  };\n\n  /**\n   * Updates the message.user property with updated user object, for messages.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  updateUserMessages = (user: UserResponse<StreamChatGenerics>) => {\n    const _updateUserMessages = (\n      messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n      user: UserResponse<StreamChatGenerics>,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id === user.id) {\n          messages[i] = { ...m, user };\n        }\n      }\n    };\n\n    this.messageSets.forEach((set) => _updateUserMessages(set.messages, user));\n\n    for (const parentId in this.threads) {\n      _updateUserMessages(this.threads[parentId], user);\n    }\n\n    _updateUserMessages(this.pinnedMessages, user);\n  };\n\n  /**\n   * Marks the messages as deleted, from deleted user.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   * @param {boolean} hardDelete\n   */\n  deleteUserMessages = (user: UserResponse<StreamChatGenerics>, hardDelete = false) => {\n    const _deleteUserMessages = (\n      messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n      user: UserResponse<StreamChatGenerics>,\n      hardDelete = false,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id !== user.id) {\n          continue;\n        }\n\n        if (hardDelete) {\n          /**\n           * In case of hard delete, we need to strip down all text, html,\n           * attachments and all the custom properties on message\n           */\n          messages[i] = ({\n            cid: m.cid,\n            created_at: m.created_at,\n            deleted_at: user.deleted_at,\n            id: m.id,\n            latest_reactions: [],\n            mentioned_users: [],\n            own_reactions: [],\n            parent_id: m.parent_id,\n            reply_count: m.reply_count,\n            status: m.status,\n            thread_participants: m.thread_participants,\n            type: 'deleted',\n            updated_at: m.updated_at,\n            user: m.user,\n          } as unknown) as ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>;\n        } else {\n          messages[i] = {\n            ...m,\n            type: 'deleted',\n            deleted_at: user.deleted_at ? new Date(user.deleted_at) : null,\n          };\n        }\n      }\n    };\n\n    this.messageSets.forEach((set) => _deleteUserMessages(set.messages, user, hardDelete));\n\n    for (const parentId in this.threads) {\n      _deleteUserMessages(this.threads[parentId], user, hardDelete);\n    }\n\n    _deleteUserMessages(this.pinnedMessages, user, hardDelete);\n  };\n\n  /**\n   * filterErrorMessages - Removes error messages from the channel state.\n   *\n   */\n  filterErrorMessages() {\n    const filteredMessages = this.latestMessages.filter((message) => message.type !== 'error');\n\n    this.latestMessages = filteredMessages;\n  }\n\n  /**\n   * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n   */\n  clean() {\n    const now = new Date();\n    // prevent old users from showing up as typing\n    for (const [userID, lastEvent] of Object.entries(this.typing)) {\n      const receivedAt =\n        typeof lastEvent.received_at === 'string'\n          ? new Date(lastEvent.received_at)\n          : lastEvent.received_at || new Date();\n      if (now.getTime() - receivedAt.getTime() > 7000) {\n        delete this.typing[userID];\n        this._channel.getClient().dispatchEvent({\n          cid: this._channel.cid,\n          type: 'typing.stop',\n          user: { id: userID },\n        } as Event<StreamChatGenerics>);\n      }\n    }\n  }\n\n  clearMessages() {\n    this.initMessages();\n    this.pinnedMessages = [];\n  }\n\n  initMessages() {\n    this.messageSets = [{ messages: [], isLatest: true, isCurrent: true, pagination: DEFAULT_MESSAGE_SET_PAGINATION }];\n  }\n\n  /**\n   * loadMessageIntoState - Loads a given message (and messages around it) into the state\n   *\n   * @param {string} messageId The id of the message, or 'latest' to indicate switching to the latest messages\n   * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n   * @param {number} limit The page size if the message has to be queried from the server\n   */\n  async loadMessageIntoState(messageId: string | 'latest', parentMessageId?: string, limit = 25) {\n    let messageSetIndex: number;\n    let switchedToMessageSet = false;\n    let loadedMessageThread = false;\n    const messageIdToFind = parentMessageId || messageId;\n    if (messageId === 'latest') {\n      if (this.messages === this.latestMessages) {\n        return;\n      }\n      messageSetIndex = this.messageSets.findIndex((s) => s.isLatest);\n    } else {\n      messageSetIndex = this.findMessageSetIndex({ id: messageIdToFind });\n    }\n    if (messageSetIndex !== -1) {\n      this.switchToMessageSet(messageSetIndex);\n      switchedToMessageSet = true;\n    }\n    loadedMessageThread = !parentMessageId || !!this.threads[parentMessageId]?.find((m) => m.id === messageId);\n    if (switchedToMessageSet && loadedMessageThread) {\n      return;\n    }\n    if (!switchedToMessageSet) {\n      await this._channel.query({ messages: { id_around: messageIdToFind, limit } }, 'new');\n    }\n    if (!loadedMessageThread && parentMessageId) {\n      await this._channel.getReplies(parentMessageId, { id_around: messageId, limit });\n    }\n    messageSetIndex = this.findMessageSetIndex({ id: messageIdToFind });\n    if (messageSetIndex !== -1) {\n      this.switchToMessageSet(messageSetIndex);\n    }\n  }\n\n  /**\n   * findMessage - Finds a message inside the state\n   *\n   * @param {string} messageId The id of the message\n   * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n   *\n   * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>} Returns the message, or undefined if the message wasn't found\n   */\n  findMessage(messageId: string, parentMessageId?: string) {\n    if (parentMessageId) {\n      const messages = this.threads[parentMessageId];\n      if (!messages) {\n        return undefined;\n      }\n      return messages.find((m) => m.id === messageId);\n    }\n\n    const messageSetIndex = this.findMessageSetIndex({ id: messageId });\n    if (messageSetIndex === -1) {\n      return undefined;\n    }\n    return this.messageSets[messageSetIndex].messages.find((m) => m.id === messageId);\n  }\n\n  private switchToMessageSet(index: number) {\n    const currentMessages = this.messageSets.find((s) => s.isCurrent);\n    if (!currentMessages) {\n      return;\n    }\n    currentMessages.isCurrent = false;\n    this.messageSets[index].isCurrent = true;\n  }\n\n  private areMessageSetsOverlap(messages1: Array<{ id: string }>, messages2: Array<{ id: string }>) {\n    return messages1.some((m1) => messages2.find((m2) => m1.id === m2.id));\n  }\n\n  private findMessageSetIndex(message: { id?: string }) {\n    return this.messageSets.findIndex((set) => !!set.messages.find((m) => m.id === message.id));\n  }\n\n  private findTargetMessageSet(\n    newMessages: MessageResponse<StreamChatGenerics>[],\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    let messagesToAdd: (\n      | MessageResponse<StreamChatGenerics>\n      | ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>\n    )[] = newMessages;\n    let targetMessageSetIndex!: number;\n    if (addIfDoesNotExist) {\n      const overlappingMessageSetIndices = this.messageSets\n        .map((_, i) => i)\n        .filter((i) => this.areMessageSetsOverlap(this.messageSets[i].messages, newMessages));\n      switch (messageSetToAddToIfDoesNotExist) {\n        case 'new':\n          if (overlappingMessageSetIndices.length > 0) {\n            targetMessageSetIndex = overlappingMessageSetIndices[0];\n            // No new message set is created if newMessages only contains thread replies\n          } else if (newMessages.some((m) => !m.parent_id)) {\n            this.messageSets.push({\n              messages: [],\n              isCurrent: false,\n              isLatest: false,\n              pagination: DEFAULT_MESSAGE_SET_PAGINATION,\n            });\n            targetMessageSetIndex = this.messageSets.length - 1;\n          }\n          break;\n        case 'current':\n          targetMessageSetIndex = this.messageSets.findIndex((s) => s.isCurrent);\n          break;\n        case 'latest':\n          targetMessageSetIndex = this.messageSets.findIndex((s) => s.isLatest);\n          break;\n        default:\n          targetMessageSetIndex = -1;\n      }\n      // when merging the target set will be the first one from the overlapping message sets\n      const mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];\n      const mergeSourceMessageSetIndices = [...overlappingMessageSetIndices];\n      if (mergeTargetMessageSetIndex !== undefined && mergeTargetMessageSetIndex !== targetMessageSetIndex) {\n        mergeSourceMessageSetIndices.push(targetMessageSetIndex);\n      }\n      // merge message sets\n      if (mergeSourceMessageSetIndices.length > 0) {\n        const target = this.messageSets[mergeTargetMessageSetIndex];\n        const sources = this.messageSets.filter((_, i) => mergeSourceMessageSetIndices.indexOf(i) !== -1);\n        sources.forEach((messageSet) => {\n          target.isLatest = target.isLatest || messageSet.isLatest;\n          target.isCurrent = target.isCurrent || messageSet.isCurrent;\n          target.pagination.hasPrev =\n            messageSet.messages[0].created_at < target.messages[0].created_at\n              ? messageSet.pagination.hasPrev\n              : target.pagination.hasPrev;\n          target.pagination.hasNext =\n            target.messages.slice(-1)[0].created_at < messageSet.messages.slice(-1)[0].created_at\n              ? messageSet.pagination.hasNext\n              : target.pagination.hasNext;\n          messagesToAdd = [...messagesToAdd, ...messageSet.messages];\n        });\n        sources.forEach((s) => this.messageSets.splice(this.messageSets.indexOf(s), 1));\n        const overlappingMessageSetIndex = this.messageSets.findIndex((s) =>\n          this.areMessageSetsOverlap(s.messages, newMessages),\n        );\n        targetMessageSetIndex = overlappingMessageSetIndex;\n      }\n    } else {\n      // assumes that all new messages belong to the same set\n      targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);\n    }\n\n    return { targetMessageSetIndex, messagesToAdd };\n  }\n}\n","import { ChannelState } from './channel_state';\nimport { generateChannelTempCid, logChatPromiseExecution, messageSetPagination, normalizeQuerySort } from './utils';\nimport { StreamChat } from './client';\nimport {\n  APIResponse,\n  BanUserOptions,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMemberAPIResponse,\n  ChannelMemberResponse,\n  ChannelQueryOptions,\n  ChannelResponse,\n  ChannelUpdateOptions,\n  CreateCallOptions,\n  CreateCallResponse,\n  DefaultGenerics,\n  DeleteChannelAPIResponse,\n  Event,\n  EventAPIResponse,\n  EventHandler,\n  EventTypes,\n  ExtendableGenerics,\n  FormatMessageResponse,\n  GetMultipleMessagesAPIResponse,\n  GetReactionsAPIResponse,\n  GetRepliesAPIResponse,\n  InviteOptions,\n  MarkReadOptions,\n  MarkUnreadOptions,\n  MemberFilters,\n  MemberSort,\n  Message,\n  MessageFilters,\n  MessagePaginationOptions,\n  MessageResponse,\n  MessageSetType,\n  MuteChannelAPIResponse,\n  NewMemberPayload,\n  PartialUpdateChannel,\n  PartialUpdateChannelAPIResponse,\n  PartialUpdateMember,\n  PinnedMessagePaginationOptions,\n  PinnedMessagesSort,\n  QueryMembersOptions,\n  Reaction,\n  ReactionAPIResponse,\n  SearchAPIResponse,\n  SearchMessageSortBase,\n  SearchOptions,\n  SearchPayload,\n  SendMessageAPIResponse,\n  TruncateChannelAPIResponse,\n  TruncateOptions,\n  UpdateChannelAPIResponse,\n  UserResponse,\n  QueryChannelAPIResponse,\n  PollVoteData,\n  SendMessageOptions,\n  AscDesc,\n  PartialUpdateMemberAPIResponse,\n  AIState,\n  MessageOptions,\n  PushPreference,\n} from './types';\nimport { Role } from './permissions';\nimport { DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE } from './constants';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  _client: StreamChat<StreamChatGenerics>;\n  type: string;\n  id: string | undefined;\n  data: ChannelData<StreamChatGenerics> | ChannelResponse<StreamChatGenerics> | undefined;\n  _data: ChannelData<StreamChatGenerics> | ChannelResponse<StreamChatGenerics>;\n  cid: string;\n  /**  */\n  listeners: { [key: string]: (string | EventHandler<StreamChatGenerics>)[] };\n  state: ChannelState<StreamChatGenerics>;\n  /**\n   * This boolean is a vague indication of weather the channel exists on chat backend.\n   *\n   * If the value is true, then that means the channel has been initialized by either calling\n   * channel.create() or channel.query() or channel.watch().\n   *\n   * If the value is false, then channel may or may not exist on the backend. The only way to ensure\n   * is by calling channel.create() or channel.query() or channel.watch().\n   */\n  initialized: boolean;\n  /**\n   * Indicates weather channel has been initialized by manually populating the state with some messages, members etc.\n   * Static state indicates that channel exists on backend, but is not being watched yet.\n   */\n  offlineMode: boolean;\n  lastKeyStroke?: Date;\n  lastTypingEvent: Date | null;\n  isTyping: boolean;\n  disconnected: boolean;\n  push_preferences?: PushPreference;\n\n  /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat<StreamChatGenerics>} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData<StreamChatGenerics>} data any additional custom params\n   *\n   * @return {Channel<StreamChatGenerics>} Returns a new uninitialized channel\n   */\n  constructor(\n    client: StreamChat<StreamChatGenerics>,\n    type: string,\n    id: string | undefined,\n    data: ChannelData<StreamChatGenerics>,\n  ) {\n    const validTypeRe = /^[\\w_-]+$/;\n    const validIDRe = /^[\\w!_-]+$/;\n\n    if (!validTypeRe.test(type)) {\n      throw new Error(`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`);\n    }\n    if (typeof id === 'string' && !validIDRe.test(id)) {\n      throw new Error(`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`);\n    }\n\n    this._client = client;\n    this.type = type;\n    this.id = id;\n    // used by the frontend, gets updated:\n    this.data = data;\n    // this._data is used for the requests...\n    this._data = { ...data };\n    this.cid = `${type}:${id}`;\n    this.listeners = {};\n    // perhaps the state variable should be private\n    this.state = new ChannelState<StreamChatGenerics>(this);\n    this.initialized = false;\n    this.offlineMode = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n  }\n\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat<StreamChatGenerics>}\n   */\n  getClient(): StreamChat<StreamChatGenerics> {\n    if (this.disconnected === true) {\n      throw Error(`You can't use a channel after client.disconnect() was called`);\n    }\n    return this._client;\n  }\n\n  /**\n   * getConfig - Get the config for this channel id (cid)\n   *\n   * @return {Record<string, unknown>}\n   */\n  getConfig() {\n    const client = this.getClient();\n    return client.configs[this.cid];\n  }\n\n  /**\n   * sendMessage - Send a message to this channel\n   *\n   * @param {Message<StreamChatGenerics>} message The Message object\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   * @param {boolean} [options.skip_push] Skip sending push notifications\n   * @param {boolean} [options.is_pending_message] DEPRECATED, please use `pending` instead.\n   * @param {boolean} [options.pending] Make this message pending\n   * @param {Record<string,string>} [options.pending_message_metadata] Metadata for the pending message\n   * @param {boolean} [options.force_moderation] Apply force moderation for server-side requests\n   *\n   * @return {Promise<SendMessageAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  async sendMessage(message: Message<StreamChatGenerics>, options?: SendMessageOptions) {\n    return await this.getClient().post<SendMessageAPIResponse<StreamChatGenerics>>(this._channelURL() + '/message', {\n      message,\n      ...options,\n    });\n  }\n\n  sendFile(\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<StreamChatGenerics>,\n  ) {\n    return this.getClient().sendFile(`${this._channelURL()}/file`, uri, name, contentType, user);\n  }\n\n  sendImage(\n    uri: string | NodeJS.ReadableStream | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<StreamChatGenerics>,\n  ) {\n    return this.getClient().sendFile(`${this._channelURL()}/image`, uri, name, contentType, user);\n  }\n\n  deleteFile(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/file`, { url });\n  }\n\n  deleteImage(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/image`, { url });\n  }\n\n  /**\n   * sendEvent - Send an event on this channel\n   *\n   * @param {Event<StreamChatGenerics>} event for example {type: 'message.read'}\n   *\n   * @return {Promise<EventAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  async sendEvent(event: Event<StreamChatGenerics>) {\n    this._checkInitialized();\n    return await this.getClient().post<EventAPIResponse<StreamChatGenerics>>(this._channelURL() + '/event', {\n      event,\n    });\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {MessageFilters<StreamChatGenerics> | string}  query search query or object MongoDB style filters\n   * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters<StreamChatGenerics>}} options Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response\n   */\n  async search(\n    query: MessageFilters<StreamChatGenerics> | string,\n    options: SearchOptions<StreamChatGenerics> & {\n      client_id?: string;\n      connection_id?: string;\n      message_filter_conditions?: MessageFilters<StreamChatGenerics>;\n      message_options?: MessageOptions;\n      query?: string;\n    } = {},\n  ) {\n    if (options.offset && options.next) {\n      throw Error(`Cannot specify offset with next`);\n    }\n    // Return a list of channels\n    const payload: SearchPayload<StreamChatGenerics> = {\n      filter_conditions: { cid: this.cid } as ChannelFilters<StreamChatGenerics>,\n      ...options,\n      sort: options.sort ? normalizeQuerySort<SearchMessageSortBase<StreamChatGenerics>>(options.sort) : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    return await this.getClient().get<SearchAPIResponse<StreamChatGenerics>>(this.getClient().baseURL + '/search', {\n      payload,\n    });\n  }\n\n  /**\n   * queryMembers - Query Members\n   *\n   * @param {MemberFilters<StreamChatGenerics>}  filterConditions object MongoDB style filters\n   * @param {MemberSort<StreamChatGenerics>} [sort] Sort options, for instance [{created_at: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{name: -1}, {created_at: 1}]\n   * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}\n   *\n   * @return {Promise<ChannelMemberAPIResponse<StreamChatGenerics>>} Query Members response\n   */\n  async queryMembers(\n    filterConditions: MemberFilters<StreamChatGenerics>,\n    sort: MemberSort<StreamChatGenerics> = [],\n    options: QueryMembersOptions = {},\n  ) {\n    let id: string | undefined;\n    const type = this.type;\n    let members: string[] | ChannelMemberResponse<StreamChatGenerics>[] | undefined;\n    if (this.id) {\n      id = this.id;\n    } else if (this.data?.members && Array.isArray(this.data.members)) {\n      members = this.data.members;\n    }\n    // Return a list of members\n    return await this.getClient().get<ChannelMemberAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + '/members',\n      {\n        payload: {\n          type,\n          id,\n          members,\n          sort: normalizeQuerySort(sort),\n          filter_conditions: filterConditions,\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * partialUpdateMember - Partial update a member\n   *\n   * @param {string} user_id member user id\n   * @param {PartialUpdateMember<StreamChatGenerics>}  updates\n   *\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} Updated member\n   */\n  async partialUpdateMember(user_id: string, updates: PartialUpdateMember<StreamChatGenerics>) {\n    if (!user_id) {\n      throw Error('Please specify the user id');\n    }\n\n    return await this.getClient().patch<PartialUpdateMemberAPIResponse<StreamChatGenerics>>(\n      this._channelURL() + `/member/${encodeURIComponent(user_id)}`,\n      updates,\n    );\n  }\n\n  /**\n   * sendReaction - Send a reaction about a message\n   *\n   * @param {string} messageID the message id\n   * @param {Reaction<StreamChatGenerics>} reaction the reaction object for instance {type: 'love'}\n   * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n   *\n   * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  async sendReaction(\n    messageID: string,\n    reaction: Reaction<StreamChatGenerics>,\n    options?: { enforce_unique?: boolean; skip_push?: boolean },\n  ) {\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    if (!reaction || Object.keys(reaction).length === 0) {\n      throw Error(`Reaction object is missing`);\n    }\n    return await this.getClient().post<ReactionAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(messageID)}/reaction`,\n      {\n        reaction,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * deleteReaction - Delete a reaction by user and type\n   *\n   * @param {string} messageID the id of the message from which te remove the reaction\n   * @param {string} reactionType the type of reaction that should be removed\n   * @param {string} [user_id] the id of the user (used only for server side request) default null\n   *\n   * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  deleteReaction(messageID: string, reactionType: string, user_id?: string) {\n    this._checkInitialized();\n    if (!reactionType || !messageID) {\n      throw Error('Deleting a reaction requires specifying both the message and reaction type');\n    }\n\n    const url =\n      this.getClient().baseURL +\n      `/messages/${encodeURIComponent(messageID)}/reaction/${encodeURIComponent(reactionType)}`;\n    //provided when server side request\n    if (user_id) {\n      return this.getClient().delete<ReactionAPIResponse<StreamChatGenerics>>(url, { user_id });\n    }\n\n    return this.getClient().delete<ReactionAPIResponse<StreamChatGenerics>>(url, {});\n  }\n\n  /**\n   * update - Edit the channel's custom properties\n   *\n   * @param {ChannelData<StreamChatGenerics>} channelData The object to update the custom properties of this channel with\n   * @param {Message<StreamChatGenerics>} [updateMessage] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async update(\n    channelData: Partial<ChannelData<StreamChatGenerics>> | Partial<ChannelResponse<StreamChatGenerics>> = {},\n    updateMessage?: Message<StreamChatGenerics>,\n    options?: ChannelUpdateOptions,\n  ) {\n    // Strip out reserved names that will result in API errors.\n    const reserved = [\n      'config',\n      'cid',\n      'created_by',\n      'id',\n      'member_count',\n      'type',\n      'created_at',\n      'updated_at',\n      'last_message_at',\n      'own_capabilities',\n    ];\n    reserved.forEach((key) => {\n      delete channelData[key];\n    });\n\n    return await this._update({\n      message: updateMessage,\n      data: channelData,\n      ...options,\n    });\n  }\n\n  /**\n   * updatePartial - partial update channel properties\n   *\n   * @param {PartialUpdateChannel<StreamChatGenerics>} partial update request\n   *\n   * @return {Promise<PartialUpdateChannelAPIResponse<StreamChatGenerics>>}\n   */\n  async updatePartial(update: PartialUpdateChannel<StreamChatGenerics>) {\n    const data = await this.getClient().patch<PartialUpdateChannelAPIResponse<StreamChatGenerics>>(\n      this._channelURL(),\n      update,\n    );\n\n    const areCapabilitiesChanged =\n      [...(data.channel.own_capabilities || [])].sort().join() !==\n      [...(Array.isArray(this.data?.own_capabilities) ? (this.data?.own_capabilities as string[]) : [])].sort().join();\n    this.data = data.channel;\n    // If the capabiltities are changed, we trigger the `capabilities.changed` event.\n    if (areCapabilitiesChanged) {\n      this.getClient().dispatchEvent({\n        type: 'capabilities.changed',\n        cid: this.cid,\n        own_capabilities: data.channel.own_capabilities,\n      });\n    }\n    return data;\n  }\n\n  /**\n   * enableSlowMode - enable slow mode\n   *\n   * @param {number} coolDownInterval the cooldown interval in seconds\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async enableSlowMode(coolDownInterval: number) {\n    const data = await this.getClient().post<UpdateChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), {\n      cooldown: coolDownInterval,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * disableSlowMode - disable slow mode\n   *\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async disableSlowMode() {\n    const data = await this.getClient().post<UpdateChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), {\n      cooldown: 0,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * delete - Delete the channel. Messages are permanently removed.\n   *\n   * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n   *\n   * @return {Promise<DeleteChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async delete(options: { hard_delete?: boolean } = {}) {\n    return await this.getClient().delete<DeleteChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), {\n      ...options,\n    });\n  }\n\n  /**\n   * truncate - Removes all messages from the channel\n   * @param {TruncateOptions<StreamChatGenerics>} [options] Defines truncation options\n   * @return {Promise<TruncateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async truncate(options: TruncateOptions<StreamChatGenerics> = {}) {\n    return await this.getClient().post<TruncateChannelAPIResponse<StreamChatGenerics>>(\n      this._channelURL() + '/truncate',\n      options,\n    );\n  }\n\n  /**\n   * acceptInvite - accept invitation to the channel\n   *\n   * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async acceptInvite(options: InviteOptions<StreamChatGenerics> = {}) {\n    return await this._update({ accept_invite: true, ...options });\n  }\n\n  /**\n   * rejectInvite - reject invitation to the channel\n   *\n   * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async rejectInvite(options: InviteOptions<StreamChatGenerics> = {}) {\n    return await this._update({ reject_invite: true, ...options });\n  }\n\n  /**\n   * addMembers - add members to the channel\n   *\n   * @param {string[] | Array<NewMemberPayload<StreamChatGenerics>>} members An array of members to add to the channel\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async addMembers(\n    members: string[] | Array<NewMemberPayload<StreamChatGenerics>>,\n    message?: Message<StreamChatGenerics>,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ add_members: members, message, ...options });\n  }\n\n  /**\n   * addModerators - add moderators to the channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async addModerators(members: string[], message?: Message<StreamChatGenerics>, options: ChannelUpdateOptions = {}) {\n    return await this._update({ add_moderators: members, message, ...options });\n  }\n\n  /**\n   * assignRoles - sets member roles in a channel\n   *\n   * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async assignRoles(\n    roles: { channel_role: Role; user_id: string }[],\n    message?: Message<StreamChatGenerics>,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ assign_roles: roles, message, ...options });\n  }\n\n  /**\n   * inviteMembers - invite members to the channel\n   *\n   * @param {string[] | Array<NewMemberPayload<StreamChatGenerics>>} members An array of members to invite to the channel\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async inviteMembers(\n    members: string[] | Array<NewMemberPayload<StreamChatGenerics>>,\n    message?: Message<StreamChatGenerics>,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ invites: members, message, ...options });\n  }\n\n  /**\n   * removeMembers - remove members from channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async removeMembers(members: string[], message?: Message<StreamChatGenerics>, options: ChannelUpdateOptions = {}) {\n    return await this._update({ remove_members: members, message, ...options });\n  }\n\n  /**\n   * demoteModerators - remove moderator role from channel members\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async demoteModerators(members: string[], message?: Message<StreamChatGenerics>, options: ChannelUpdateOptions = {}) {\n    return await this._update({ demote_moderators: members, message, ...options });\n  }\n\n  /**\n   * _update - executes channel update request\n   * @param payload Object Update Channel payload\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   * TODO: introduce new type instead of Object in the next major update\n   */\n  async _update(payload: Object) {\n    const data = await this.getClient().post<UpdateChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), payload);\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * mute - mutes the current channel\n   * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id\n   * @return {Promise<MuteChannelAPIResponse<StreamChatGenerics>>} The server response\n   *\n   * example with expiration:\n   * await channel.mute({expiration: moment.duration(2, 'weeks')});\n   *\n   * example server side:\n   * await channel.mute({user_id: userId});\n   *\n   */\n  async mute(opts: { expiration?: number; user_id?: string } = {}) {\n    return await this.getClient().post<MuteChannelAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + '/moderation/mute/channel',\n      { channel_cid: this.cid, ...opts },\n    );\n  }\n\n  /**\n   * unmute - mutes the current channel\n   * @param {{ user_id?: string}} opts user_id\n   * @return {Promise<APIResponse>} The server response\n   *\n   * example server side:\n   * await channel.unmute({user_id: userId});\n   */\n  async unmute(opts: { user_id?: string } = {}) {\n    return await this.getClient().post<APIResponse>(this.getClient().baseURL + '/moderation/unmute/channel', {\n      channel_cid: this.cid,\n      ...opts,\n    });\n  }\n\n  /**\n   * archive - archives the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n   *\n   * example:\n   * await channel.archives();\n   *\n   * example server side:\n   * await channel.archive({user_id: userId});\n   *\n   */\n  async archive(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw Error('A user_id is required for archiving a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { archived: true } });\n    return resp.channel_member;\n  }\n\n  /**\n   * unarchive - unarchives the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n   *\n   * example:\n   * await channel.unarchive();\n   *\n   * example server side:\n   * await channel.unarchive({user_id: userId});\n   *\n   */\n  async unarchive(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw Error('A user_id is required for unarchiving a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { archived: false } });\n    return resp.channel_member;\n  }\n\n  /**\n   * pin - pins the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n   *\n   * example:\n   * await channel.pin();\n   *\n   * example server side:\n   * await channel.pin({user_id: userId});\n   *\n   */\n  async pin(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw new Error('A user_id is required for pinning a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { pinned: true } });\n    return resp.channel_member;\n  }\n\n  /**\n   * unpin - unpins the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n   *\n   * example:\n   * await channel.unpin();\n   *\n   * example server side:\n   * await channel.unpin({user_id: userId});\n   *\n   */\n  async unpin(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw new Error('A user_id is required for unpinning a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { pinned: false } });\n    return resp.channel_member;\n  }\n\n  /**\n   * muteStatus - returns the mute status for the current channel\n   * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n   */\n  muteStatus(): {\n    createdAt: Date | null;\n    expiresAt: Date | null;\n    muted: boolean;\n  } {\n    this._checkInitialized();\n    return this.getClient()._muteStatus(this.cid);\n  }\n\n  sendAction(messageID: string, formData: Record<string, string>) {\n    this._checkInitialized();\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    return this.getClient().post<SendMessageAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(messageID)}/action`,\n      {\n        message_id: messageID,\n        form_data: formData,\n        id: this.id,\n        type: this.type,\n      },\n    );\n  }\n\n  /**\n   * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n   * Call this on every keystroke\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async keystroke(parent_id?: string, options?: { user_id: string }) {\n    if (!this._isTypingIndicatorsEnabled()) {\n      return;\n    }\n    const now = new Date();\n    const diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n    this.lastKeyStroke = now;\n    this.isTyping = true;\n    // send a typing.start every 2 seconds\n    if (diff === null || diff > 2000) {\n      this.lastTypingEvent = new Date();\n      await this.sendEvent({\n        type: 'typing.start',\n        parent_id,\n        ...(options || {}),\n      } as Event<StreamChatGenerics>);\n    }\n  }\n\n  /**\n   * Sends an event to update the AI state for a specific message.\n   * Typically used by the server connected to the AI service to notify clients of state changes.\n   *\n   * @param messageId - The ID of the message associated with the AI state.\n   * @param state - The new state of the AI process (e.g., thinking, generating).\n   * @param options - Optional parameters, such as `ai_message`, to include additional details in the event.\n   */\n  async updateAIState(messageId: string, state: AIState, options: { ai_message?: string } = {}) {\n    await this.sendEvent({\n      ...options,\n      type: 'ai_indicator.update',\n      message_id: messageId,\n      ai_state: state,\n    } as Event<StreamChatGenerics>);\n  }\n\n  /**\n   * Sends an event to notify watchers to clear the typing/thinking UI when the AI response starts streaming.\n   * Typically used by the server connected to the AI service to inform clients that the AI response has started.\n   */\n  async clearAIIndicator() {\n    await this.sendEvent({\n      type: 'ai_indicator.clear',\n    } as Event<StreamChatGenerics>);\n  }\n\n  /**\n   * Sends an event to stop AI response generation, leaving the message in its current state.\n   * Triggered by the user to halt the AI response process.\n   */\n  async stopAIResponse() {\n    await this.sendEvent({\n      type: 'ai_indicator.stop',\n    } as Event<StreamChatGenerics>);\n  }\n\n  /**\n   * stopTyping - Sets last typing to null and sends the typing.stop event\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async stopTyping(parent_id?: string, options?: { user_id: string }) {\n    if (!this._isTypingIndicatorsEnabled()) {\n      return;\n    }\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    await this.sendEvent({\n      type: 'typing.stop',\n      parent_id,\n      ...(options || {}),\n    } as Event<StreamChatGenerics>);\n  }\n\n  _isTypingIndicatorsEnabled(): boolean {\n    if (!this.getConfig()?.typing_events) {\n      return false;\n    }\n    return this.getClient().user?.privacy_settings?.typing_indicators?.enabled ?? true;\n  }\n\n  /**\n   * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n   *\n   * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']> | undefined} Description\n   */\n  lastMessage(): FormatMessageResponse<StreamChatGenerics> | undefined {\n    // get last 5 messages, sort, return the latest\n    // get a slice of the last 5\n    let min = this.state.latestMessages.length - 5;\n    if (min < 0) {\n      min = 0;\n    }\n    const max = this.state.latestMessages.length + 1;\n    const messageSlice = this.state.latestMessages.slice(min, max);\n\n    // sort by pk desc\n    messageSlice.sort((a, b) => b.created_at.getTime() - a.created_at.getTime());\n\n    return messageSlice[0];\n  }\n\n  /**\n   * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkReadOptions<StreamChatGenerics>} data\n   * @return {Promise<EventAPIResponse<StreamChatGenerics> | null>} Description\n   */\n  async markRead(data: MarkReadOptions<StreamChatGenerics> = {}) {\n    this._checkInitialized();\n\n    if (!this.getConfig()?.read_events && !this.getClient()._isUsingServerAuth()) {\n      return Promise.resolve(null);\n    }\n\n    return await this.getClient().post<EventAPIResponse<StreamChatGenerics>>(this._channelURL() + '/read', {\n      ...data,\n    });\n  }\n\n  /**\n   * markUnread - Mark the channel as unread from messageID, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkUnreadOptions<StreamChatGenerics>} data\n   * @return {APIResponse} An API response\n   */\n  async markUnread(data: MarkUnreadOptions<StreamChatGenerics>) {\n    this._checkInitialized();\n\n    if (!this.getConfig()?.read_events && !this.getClient()._isUsingServerAuth()) {\n      return Promise.resolve(null);\n    }\n\n    return await this.getClient().post<APIResponse>(this._channelURL() + '/unread', {\n      ...data,\n    });\n  }\n\n  /**\n   * clean - Cleans the channel state and fires stop typing if needed\n   */\n  clean() {\n    if (this.lastKeyStroke) {\n      const now = new Date();\n      const diff = now.getTime() - this.lastKeyStroke.getTime();\n      if (diff > 1000 && this.isTyping) {\n        logChatPromiseExecution(this.stopTyping(), 'stop typing event');\n      }\n    }\n\n    this.state.clean();\n  }\n\n  /**\n   * watch - Loads the initial channel state and watches for changes\n   *\n   * @param {ChannelQueryOptions<StreamChatGenerics>} options additional options for the query endpoint\n   *\n   * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async watch(options?: ChannelQueryOptions<StreamChatGenerics>) {\n    const defaultOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    if (!this.getClient()._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    const combined = { ...defaultOptions, ...options };\n    const state = await this.query(combined, 'latest');\n    this.initialized = true;\n    this.data = state.channel;\n\n    this._client.logger('info', `channel:watch() - started watching channel ${this.cid}`, {\n      tags: ['channel'],\n      channel: this,\n    });\n    return state;\n  }\n\n  /**\n   * stopWatching - Stops watching the channel\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  async stopWatching() {\n    const response = await this.getClient().post<APIResponse>(this._channelURL() + '/stop-watching', {});\n\n    this._client.logger('info', `channel:watch() - stopped watching channel ${this.cid}`, {\n      tags: ['channel'],\n      channel: this,\n    });\n\n    return response;\n  }\n\n  /**\n   * getReplies - List the message replies for a parent message.\n   *\n   * The recommended way of working with threads is to use the Thread class.\n   *\n   * @param {string} parent_id The message parent id, ie the top of the thread\n   * @param {MessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   *\n   * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages\n   */\n  async getReplies(\n    parent_id: string,\n    options: MessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string },\n    sort?: { created_at: AscDesc }[],\n  ) {\n    const normalizedSort = sort ? normalizeQuerySort(sort) : undefined;\n    const data = await this.getClient().get<GetRepliesAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(parent_id)}/replies`,\n      {\n        sort: normalizedSort,\n        ...options,\n      },\n    );\n\n    // add any messages to our thread state\n    if (data.messages) {\n      this.state.addMessagesSorted(data.messages);\n    }\n\n    return data;\n  }\n\n  /**\n   * getPinnedMessages - List list pinned messages of the channel\n   *\n   * @param {PinnedMessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   * @param {PinnedMessagesSort} sort defines sorting direction of pinned messages\n   *\n   * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages\n   */\n  async getPinnedMessages(\n    options: PinnedMessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string },\n    sort: PinnedMessagesSort = [],\n  ) {\n    return await this.getClient().get<GetRepliesAPIResponse<StreamChatGenerics>>(\n      this._channelURL() + '/pinned_messages',\n      {\n        payload: {\n          ...options,\n          sort: normalizeQuerySort(sort),\n        },\n      },\n    );\n  }\n\n  /**\n   * getReactions - List the reactions, supports pagination\n   *\n   * @param {string} message_id The message id\n   * @param {{ limit?: number; offset?: number }} options The pagination options\n   *\n   * @return {Promise<GetReactionsAPIResponse<StreamChatGenerics>>} Server response\n   */\n  getReactions(message_id: string, options: { limit?: number; offset?: number }) {\n    return this.getClient().get<GetReactionsAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(message_id)}/reactions`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * getMessagesById - Retrieves a list of messages by ID\n   *\n   * @param {string[]} messageIds The ids of the messages to retrieve from this channel\n   *\n   * @return {Promise<GetMultipleMessagesAPIResponse<StreamChatGenerics>>} Server response\n   */\n  getMessagesById(messageIds: string[]) {\n    return this.getClient().get<GetMultipleMessagesAPIResponse<StreamChatGenerics>>(this._channelURL() + '/messages', {\n      ids: messageIds.join(','),\n    });\n  }\n\n  /**\n   * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n   * @return {Date | null | undefined}\n   */\n  lastRead() {\n    const { userID } = this.getClient();\n    if (userID) {\n      return this.state.read[userID] ? this.state.read[userID].last_read : null;\n    }\n  }\n\n  _countMessageAsUnread(message: FormatMessageResponse<StreamChatGenerics> | MessageResponse<StreamChatGenerics>) {\n    if (message.shadowed) return false;\n    if (message.silent) return false;\n    if (message.parent_id && !message.show_in_channel) return false;\n    if (message.user?.id === this.getClient().userID) return false;\n    if (message.user?.id && this.getClient().userMuteStatus(message.user.id)) return false;\n\n    // Return false if channel doesn't allow read events.\n    if (Array.isArray(this.data?.own_capabilities) && !this.data?.own_capabilities.includes('read-events'))\n      return false;\n\n    // FIXME: see #1265, adjust and count new messages even when the channel is muted\n    if (this.muteStatus().muted) return false;\n\n    return true;\n  }\n\n  /**\n   * countUnread - Count of unread messages\n   *\n   * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state\n   *\n   * @return {number} Unread count\n   */\n  countUnread(lastRead?: Date | null) {\n    if (!lastRead) return this.state.unreadCount;\n\n    let count = 0;\n    for (let i = 0; i < this.state.latestMessages.length; i += 1) {\n      const message = this.state.latestMessages[i];\n      if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * countUnreadMentions - Count the number of unread messages mentioning the current user\n   *\n   * @return {number} Unread mentions count\n   */\n  countUnreadMentions() {\n    const lastRead = this.lastRead();\n    const userID = this.getClient().userID;\n\n    let count = 0;\n    for (let i = 0; i < this.state.latestMessages.length; i += 1) {\n      const message = this.state.latestMessages[i];\n      if (\n        this._countMessageAsUnread(message) &&\n        (!lastRead || message.created_at > lastRead) &&\n        message.mentioned_users?.some((user) => user.id === userID)\n      ) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * create - Creates a new channel\n   *\n   * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The Server Response\n   *\n   */\n  create = async (options?: ChannelQueryOptions<StreamChatGenerics>) => {\n    const defaultOptions = {\n      ...options,\n      watch: false,\n      state: false,\n      presence: false,\n    };\n    return await this.query(defaultOptions, 'latest');\n  };\n\n  /**\n   * query - Query the API, get messages, members or other channel fields\n   *\n   * @param {ChannelQueryOptions<StreamChatGenerics>} options The query options\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings\n   *\n   * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} Returns a query response\n   */\n  async query(\n    options?: ChannelQueryOptions<StreamChatGenerics>,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    let queryURL = `${this.getClient().baseURL}/channels/${encodeURIComponent(this.type)}`;\n    if (this.id) {\n      queryURL += `/${encodeURIComponent(this.id)}`;\n    }\n\n    const state = await this.getClient().post<QueryChannelAPIResponse<StreamChatGenerics>>(queryURL + '/query', {\n      data: this._data,\n      state: true,\n      ...options,\n    });\n\n    // update the channel id if it was missing\n    if (!this.id) {\n      this.id = state.channel.id;\n      this.cid = state.channel.cid;\n      // set the channel as active...\n\n      const tempChannelCid = generateChannelTempCid(\n        this.type,\n        state.members.map((member) => member.user_id || member.user?.id || ''),\n      );\n\n      if (tempChannelCid && tempChannelCid in this.getClient().activeChannels) {\n        // This gets set in `client.channel()` function, when channel is created\n        // using members, not id.\n        delete this.getClient().activeChannels[tempChannelCid];\n      }\n\n      if (!(this.cid in this.getClient().activeChannels) && this.getClient()._cacheEnabled()) {\n        this.getClient().activeChannels[this.cid] = this;\n      }\n    }\n\n    this.getClient()._addChannelConfig(state.channel);\n\n    // add any messages to our channel state\n    const { messageSet } = this._initializeState(state, messageSetToAddToIfDoesNotExist);\n    messageSet.pagination = {\n      ...messageSet.pagination,\n      ...messageSetPagination({\n        parentSet: messageSet,\n        messagePaginationOptions: options?.messages,\n        requestedPageSize: options?.messages?.limit ?? DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE,\n        returnedPage: state.messages,\n        logger: this.getClient().logger,\n      }),\n    };\n\n    this.getClient().polls.hydratePollCache(state.messages, true);\n\n    const areCapabilitiesChanged =\n      [...(state.channel.own_capabilities || [])].sort().join() !==\n      [...(Array.isArray(this.data?.own_capabilities) ? (this.data?.own_capabilities as string[]) : [])].sort().join();\n    this.data = state.channel;\n    this.offlineMode = false;\n\n    if (areCapabilitiesChanged) {\n      this.getClient().dispatchEvent({\n        type: 'capabilities.changed',\n        cid: this.cid,\n        own_capabilities: state.channel.own_capabilities,\n      });\n    }\n\n    this.getClient().dispatchEvent({\n      type: 'channels.queried',\n      queriedChannels: {\n        channels: [state],\n        isLatestMessageSet: messageSet.isLatest,\n      },\n    });\n\n    return state;\n  }\n\n  /**\n   * banUser - Bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options: BanUserOptions<StreamChatGenerics>) {\n    this._checkInitialized();\n    return await this.getClient().banUser(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * hides the channel from queryChannels for the user until a message is added\n   * If clearHistory is set to true - all messages will be removed for the user\n   *\n   * @param {string | null} userId\n   * @param {boolean} clearHistory\n   * @returns {Promise<APIResponse>}\n   */\n  async hide(userId: string | null = null, clearHistory = false) {\n    this._checkInitialized();\n\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/hide`, {\n      user_id: userId,\n      clear_history: clearHistory,\n    });\n  }\n\n  /**\n   * removes the hidden status for a channel\n   *\n   * @param {string | null} userId\n   * @returns {Promise<APIResponse>}\n   */\n  async show(userId: string | null = null) {\n    this._checkInitialized();\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/show`, {\n      user_id: userId,\n    });\n  }\n\n  /**\n   * unbanUser - Removes the bans for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().unbanUser(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * shadowBan - Shadow bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options: BanUserOptions<StreamChatGenerics>) {\n    this._checkInitialized();\n    return await this.getClient().shadowBan(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * removeShadowBan - Removes the shadow ban for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().removeShadowBan(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * createCall - creates a call for the current channel\n   *\n   * @param {CreateCallOptions} options\n   * @returns {Promise<CreateCallResponse>}\n   */\n  async createCall(options: CreateCallOptions) {\n    return await this.getClient().post<CreateCallResponse>(this._channelURL() + '/call', options);\n  }\n\n  /**\n   * Cast or cancel one or more votes on a poll\n   * @param pollId string The poll id\n   * @param votes PollVoteData[] The votes that will be casted (or canceled in case of an empty array)\n   * @returns {APIResponse & PollVoteResponse} The poll votes\n   */\n  async vote(messageId: string, pollId: string, vote: PollVoteData) {\n    return await this.getClient().castPollVote(messageId, pollId, vote);\n  }\n\n  async removeVote(messageId: string, pollId: string, voteId: string) {\n    return await this.getClient().removePollVote(messageId, pollId, voteId);\n  }\n\n  /**\n   * on - Listen to events on this channel.\n   *\n   * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * channel.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<StreamChatGenerics> | EventTypes} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call\n   */\n  on(eventType: EventTypes, callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(\n    callbackOrString: EventHandler<StreamChatGenerics> | EventTypes,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this._client.logger('info', `Attaching listener for ${key} event on channel ${this.cid}`, {\n      tags: ['event', 'channel'],\n      channel: this,\n    });\n\n    this.listeners[key].push(callback);\n\n    return {\n      unsubscribe: () => {\n        this._client.logger('info', `Removing listener for ${key} event from channel ${this.cid}`, {\n          tags: ['event', 'channel'],\n          channel: this,\n        });\n\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(eventType: EventTypes, callback: EventHandler<StreamChatGenerics>): void;\n  off(callback: EventHandler<StreamChatGenerics>): void;\n  off(\n    callbackOrString: EventHandler<StreamChatGenerics> | EventTypes,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ): void {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this._client.logger('info', `Removing listener for ${key} event from channel ${this.cid}`, {\n      tags: ['event', 'channel'],\n      channel: this,\n    });\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _handleChannelEvent(event: Event<StreamChatGenerics>) {\n    const channel = this;\n    this._client.logger(\n      'info',\n      `channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    const channelState = channel.state;\n    switch (event.type) {\n      case 'typing.start':\n        if (event.user?.id) {\n          channelState.typing[event.user.id] = event;\n        }\n        break;\n      case 'typing.stop':\n        if (event.user?.id) {\n          delete channelState.typing[event.user.id];\n        }\n        break;\n      case 'message.read':\n        if (event.user?.id && event.created_at) {\n          channelState.read[event.user.id] = {\n            last_read: new Date(event.created_at),\n            last_read_message_id: event.last_read_message_id,\n            user: event.user,\n            unread_messages: 0,\n          };\n\n          if (event.user?.id === this.getClient().user?.id) {\n            channelState.unreadCount = 0;\n          }\n        }\n        break;\n      case 'user.watching.start':\n      case 'user.updated':\n        if (event.user?.id) {\n          channelState.watchers[event.user.id] = event.user;\n        }\n        break;\n      case 'user.watching.stop':\n        if (event.user?.id) {\n          delete channelState.watchers[event.user.id];\n        }\n        break;\n      case 'message.deleted':\n        if (event.message) {\n          this._extendEventWithOwnReactions(event);\n          if (event.hard_delete) channelState.removeMessage(event.message);\n          else channelState.addMessageSorted(event.message, false, false);\n\n          channelState.removeQuotedMessageReferences(event.message);\n\n          if (event.message.pinned) {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'message.new':\n        if (event.message) {\n          /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */\n          const ownMessage = event.user?.id === this.getClient().user?.id;\n          const isThreadMessage = event.message.parent_id && !event.message.show_in_channel;\n\n          if (this.state.isUpToDate || isThreadMessage) {\n            channelState.addMessageSorted(event.message, ownMessage);\n          }\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n\n          // do not increase the unread count - the back-end does not increase the count neither in the following cases:\n          // 1. the message is mine\n          // 2. the message is a thread reply from any user\n          const preventUnreadCountUpdate = ownMessage || isThreadMessage;\n          if (preventUnreadCountUpdate) break;\n\n          if (event.user?.id) {\n            for (const userId in channelState.read) {\n              if (userId === event.user.id) {\n                channelState.read[event.user.id] = {\n                  last_read: new Date(event.created_at as string),\n                  user: event.user,\n                  unread_messages: 0,\n                };\n              } else {\n                channelState.read[userId].unread_messages += 1;\n              }\n            }\n          }\n\n          if (this._countMessageAsUnread(event.message)) {\n            channelState.unreadCount = channelState.unreadCount + 1;\n          }\n        }\n        break;\n      case 'message.updated':\n      case 'message.undeleted':\n        if (event.message) {\n          this._extendEventWithOwnReactions(event);\n          channelState.addMessageSorted(event.message, false, false);\n          channelState._updateQuotedMessageReferences({ message: event.message });\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          } else {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'channel.truncated':\n        if (event.channel?.truncated_at) {\n          const truncatedAt = +new Date(event.channel.truncated_at);\n\n          channelState.messageSets.forEach((messageSet, messageSetIndex) => {\n            messageSet.messages.forEach(({ created_at: createdAt, id }) => {\n              if (truncatedAt > +createdAt) channelState.removeMessage({ id, messageSetIndex });\n            });\n          });\n\n          channelState.pinnedMessages.forEach(({ id, created_at: createdAt }) => {\n            if (truncatedAt > +createdAt)\n              channelState.removePinnedMessage({ id } as MessageResponse<StreamChatGenerics>);\n          });\n        } else {\n          channelState.clearMessages();\n        }\n\n        channelState.unreadCount = 0;\n        // system messages don't increment unread counts\n        if (event.message) {\n          channelState.addMessageSorted(event.message);\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'member.added':\n      case 'member.updated':\n        if (event.member?.user) {\n          channelState.members = {\n            ...channelState.members,\n            [event.member.user.id]: event.member,\n          };\n        }\n\n        if (\n          typeof channelState.membership.user?.id === 'string' &&\n          typeof event.member?.user?.id === 'string' &&\n          event.member.user.id === channelState.membership.user.id\n        ) {\n          channelState.membership = event.member;\n        }\n        break;\n      case 'member.removed':\n        if (event.user?.id) {\n          const newMembers = {\n            ...channelState.members,\n          };\n\n          delete newMembers[event.user.id];\n\n          channelState.members = newMembers;\n\n          // TODO?: unset membership\n        }\n        break;\n      case 'notification.mark_unread': {\n        const ownMessage = event.user?.id === this.getClient().user?.id;\n        if (!(ownMessage && event.user)) break;\n\n        const unreadCount = event.unread_messages ?? 0;\n\n        channelState.read[event.user.id] = {\n          first_unread_message_id: event.first_unread_message_id,\n          last_read: new Date(event.last_read_at as string),\n          last_read_message_id: event.last_read_message_id,\n          user: event.user,\n          unread_messages: unreadCount,\n        };\n\n        channelState.unreadCount = unreadCount;\n        break;\n      }\n      case 'channel.updated':\n        if (event.channel) {\n          const isFrozenChanged = event.channel?.frozen !== undefined && event.channel.frozen !== channel.data?.frozen;\n          if (isFrozenChanged) {\n            this.query({ state: false, messages: { limit: 0 }, watchers: { limit: 0 } });\n          }\n          channel.data = {\n            ...event.channel,\n            hidden: event.channel?.hidden ?? channel.data?.hidden,\n            own_capabilities: event.channel?.own_capabilities ?? channel.data?.own_capabilities,\n          };\n        }\n        break;\n      case 'reaction.new':\n        if (event.message && event.reaction) {\n          event.message = channelState.addReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.deleted':\n        if (event.reaction) {\n          event.message = channelState.removeReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.updated':\n        if (event.reaction) {\n          // assuming reaction.updated is only called if enforce_unique is true\n          event.message = channelState.addReaction(event.reaction, event.message, true);\n        }\n        break;\n      case 'channel.hidden':\n        channel.data = { ...channel.data, hidden: true };\n        if (event.clear_history) {\n          channelState.clearMessages();\n        }\n        break;\n      case 'channel.visible':\n        channel.data = { ...channel.data, hidden: false };\n        break;\n      case 'user.banned':\n        if (!event.user?.id) break;\n        channelState.members[event.user.id] = {\n          ...(channelState.members[event.user.id] || {}),\n          shadow_banned: !!event.shadow,\n          banned: !event.shadow,\n          user: { ...(channelState.members[event.user.id]?.user || {}), ...event.user },\n        };\n        break;\n      case 'user.unbanned':\n        if (!event.user?.id) break;\n        channelState.members[event.user.id] = {\n          ...(channelState.members[event.user.id] || {}),\n          shadow_banned: false,\n          banned: false,\n          user: { ...(channelState.members[event.user.id]?.user || {}), ...event.user },\n        };\n        break;\n      default:\n    }\n\n    // any event can send over the online count\n    if (event.watcher_count !== undefined) {\n      channel.state.watcher_count = event.watcher_count;\n    }\n  }\n\n  _callChannelListeners = (event: Event<StreamChatGenerics>) => {\n    const channel = this;\n    // gather and call the listeners\n    const listeners = [];\n    if (channel.listeners.all) {\n      listeners.push(...channel.listeners.all);\n    }\n    if (channel.listeners[event.type]) {\n      listeners.push(...channel.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      if (typeof listener !== 'string') {\n        listener(event);\n      }\n    }\n  };\n\n  /**\n   * _channelURL - Returns the channel url\n   *\n   * @return {string} The channel url\n   */\n  _channelURL = () => {\n    if (!this.id) {\n      throw new Error('channel id is not defined');\n    }\n    return `${this.getClient().baseURL}/channels/${encodeURIComponent(this.type)}/${encodeURIComponent(this.id)}`;\n  };\n\n  _checkInitialized() {\n    if (!this.initialized && !this.offlineMode && !this.getClient()._isUsingServerAuth()) {\n      throw Error(\n        `Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n      );\n    }\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _initializeState(\n    state: ChannelAPIResponse<StreamChatGenerics>,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'latest',\n  ) {\n    const { state: clientState, user, userID } = this.getClient();\n\n    // add the members and users\n    if (state.members) {\n      this._hydrateMembers({ members: state.members });\n\n      for (const member of state.members) {\n        if (member.user) {\n          clientState.updateUserReference(member.user, this.cid);\n        }\n      }\n    }\n\n    this.state.membership = state.membership || {};\n\n    const messages = state.messages || [];\n    if (!this.state.messages) {\n      this.state.initMessages();\n    }\n    const { messageSet } = this.state.addMessagesSorted(messages, false, true, true, messageSetToAddToIfDoesNotExist);\n\n    if (!this.state.pinnedMessages) {\n      this.state.pinnedMessages = [];\n    }\n    this.state.addPinnedMessages(state.pinned_messages || []);\n    if (state.pending_messages) {\n      this.state.pending_messages = state.pending_messages;\n    }\n    if (state.watcher_count !== undefined) {\n      this.state.watcher_count = state.watcher_count;\n    }\n    // convert the arrays into objects for easier syncing...\n    if (state.watchers) {\n      for (const watcher of state.watchers) {\n        if (watcher) {\n          clientState.updateUserReference(watcher, this.cid);\n          this.state.watchers[watcher.id] = watcher;\n        }\n      }\n    }\n\n    // initialize read state to last message or current time if the channel is empty\n    // if the user is a member, this value will be overwritten later on otherwise this ensures\n    // that everything up to this point is not marked as unread\n    if (userID != null) {\n      const last_read = this.state.last_message_at || new Date();\n      if (user) {\n        this.state.read[user.id] = {\n          user,\n          last_read,\n          unread_messages: 0,\n        };\n      }\n    }\n\n    // apply read state if part of the state\n    if (state.read) {\n      for (const read of state.read) {\n        this.state.read[read.user.id] = {\n          last_read: new Date(read.last_read),\n          last_read_message_id: read.last_read_message_id,\n          unread_messages: read.unread_messages ?? 0,\n          user: read.user,\n        };\n\n        if (read.user.id === user?.id) {\n          this.state.unreadCount = this.state.read[read.user.id].unread_messages;\n        }\n      }\n    }\n\n    return {\n      messageSet,\n    };\n  }\n\n  _extendEventWithOwnReactions(event: Event<StreamChatGenerics>) {\n    if (!event.message) {\n      return;\n    }\n    const message = this.state.findMessage(event.message.id, event.message.parent_id);\n    if (message) {\n      event.message.own_reactions = message.own_reactions;\n    }\n  }\n\n  _hydrateMembers({\n    members,\n    overrideCurrentState = true,\n  }: {\n    members: ChannelMemberResponse<StreamChatGenerics>[];\n    /**\n     * If set to `true` then `ChannelState.members` will be overriden with the newly\n     * provided `members`, setting this property to `false` will merge current `ChannelState.members`\n     * object with the newly provided `members`\n     * (new members with the same `userId` will replace the old ones).\n     */\n    overrideCurrentState?: boolean;\n  }) {\n    const newMembersById = members.reduce<ChannelState<StreamChatGenerics>['members']>((membersById, member) => {\n      if (member.user) {\n        membersById[member.user.id] = member;\n      }\n      return membersById;\n    }, {});\n\n    if (overrideCurrentState) {\n      this.state.members = newMembersById;\n    } else if (!overrideCurrentState && members.length) {\n      this.state.members = {\n        ...this.state.members,\n        ...newMembersById,\n      };\n    }\n  }\n\n  _disconnect() {\n    this._client.logger('info', `channel:disconnect() - Disconnecting the channel ${this.cid}`, {\n      tags: ['connection', 'channel'],\n      channel: this,\n    });\n\n    this.disconnected = true;\n    this.state.setIsUpToDate(false);\n  }\n}\n","import { UserResponse, ExtendableGenerics, DefaultGenerics } from './types';\nimport { StreamChat } from './client';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  private client: StreamChat<StreamChatGenerics>;\n  users: {\n    [key: string]: UserResponse<StreamChatGenerics>;\n  };\n  userChannelReferences: { [key: string]: { [key: string]: boolean } };\n  constructor({ client }: { client: StreamChat<StreamChatGenerics> }) {\n    // show the status for a certain user...\n    // ie online, offline etc\n    this.client = client;\n    this.users = {};\n    // store which channels contain references to the specified user...\n    this.userChannelReferences = {};\n  }\n\n  updateUsers(users: UserResponse<StreamChatGenerics>[]) {\n    for (const user of users) {\n      this.updateUser(user);\n    }\n  }\n\n  updateUser(user?: UserResponse<StreamChatGenerics>) {\n    if (user != null && this.client._cacheEnabled()) {\n      this.users[user.id] = user;\n    }\n  }\n\n  updateUserReference(user: UserResponse<StreamChatGenerics>, channelID: string) {\n    if (user == null || !this.client._cacheEnabled()) {\n      return;\n    }\n    this.updateUser(user);\n    if (!this.userChannelReferences[user.id]) {\n      this.userChannelReferences[user.id] = {};\n    }\n    this.userChannelReferences[user.id][channelID] = true;\n  }\n\n  deleteAllChannelReference(channelID: string) {\n    for (const userID in this.userChannelReferences) {\n      delete this.userChannelReferences[userID][channelID];\n    }\n  }\n}\n","import axios from 'axios';\nimport { StableWSConnection } from './connection';\nimport { randomId, sleep } from './utils';\n\nexport type InsightTypes = 'ws_fatal' | 'ws_success_after_failure' | 'http_hi_failed';\nexport class InsightMetrics {\n  connectionStartTimestamp: number | null;\n  wsConsecutiveFailures: number;\n  wsTotalFailures: number;\n  instanceClientId: string;\n\n  constructor() {\n    this.connectionStartTimestamp = null;\n    this.wsTotalFailures = 0;\n    this.wsConsecutiveFailures = 0;\n    this.instanceClientId = randomId();\n  }\n}\n\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */\nexport const postInsights = async (insightType: InsightTypes, insights: Record<string, unknown>) => {\n  const maxAttempts = 3;\n  for (let i = 0; i < maxAttempts; i++) {\n    try {\n      await axios.post(`https://chat-insights.getstream.io/insights/${insightType}`, insights);\n    } catch (e) {\n      await sleep((i + 1) * 3000);\n      continue;\n    }\n    break;\n  }\n};\n\nexport function buildWsFatalInsight(connection: StableWSConnection, event: Record<string, unknown>) {\n  return {\n    ...event,\n    ...buildWsBaseInsight(connection),\n  };\n}\n\nfunction buildWsBaseInsight(connection: StableWSConnection) {\n  const { client } = connection;\n  return {\n    ready_state: connection.ws?.readyState,\n    url: connection._buildUrl(),\n    api_key: client.key,\n    start_ts: client.insightMetrics.connectionStartTimestamp,\n    end_ts: new Date().getTime(),\n    auth_type: client.getAuthType(),\n    token: client.tokenManager.token,\n    user_id: client.userID,\n    user_details: client._user,\n    device: client.options.device,\n    client_id: connection.connectionID,\n    ws_details: connection.ws,\n    ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n    ws_total_failures: client.insightMetrics.wsTotalFailures,\n    request_id: connection.requestID,\n    online: typeof navigator !== 'undefined' ? navigator?.onLine : null,\n    user_agent: typeof navigator !== 'undefined' ? navigator?.userAgent : null,\n    instance_client_id: client.insightMetrics.instanceClientId,\n  };\n}\n\nexport function buildWsSuccessAfterFailureInsight(connection: StableWSConnection) {\n  return buildWsBaseInsight(connection);\n}\n","import WebSocket from 'isomorphic-ws';\nimport {\n  chatCodes,\n  convertErrorToJson,\n  sleep,\n  retryInterval,\n  randomId,\n  removeConnectionEventListeners,\n  addConnectionEventListeners,\n} from './utils';\nimport { buildWsFatalInsight, buildWsSuccessAfterFailureInsight, postInsights } from './insights';\nimport { ConnectAPIResponse, ConnectionOpen, ExtendableGenerics, DefaultGenerics, UR, LogLevel } from './types';\nimport { StreamChat } from './client';\n\n// Type guards to check WebSocket error type\nconst isCloseEvent = (res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent): res is WebSocket.CloseEvent =>\n  (res as WebSocket.CloseEvent).code !== undefined;\n\nconst isErrorEvent = (res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent): res is WebSocket.ErrorEvent =>\n  (res as WebSocket.ErrorEvent).error !== undefined;\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  // global from constructor\n  client: StreamChat<StreamChatGenerics>;\n\n  // local vars\n  connectionID?: string;\n  connectionOpen?: ConnectAPIResponse<StreamChatGenerics>;\n  consecutiveFailures: number;\n  pingInterval: number;\n  healthCheckTimeoutRef?: NodeJS.Timeout;\n  isConnecting: boolean;\n  isDisconnected: boolean;\n  isHealthy: boolean;\n  isResolved?: boolean;\n  lastEvent: Date | null;\n  connectionCheckTimeout: number;\n  connectionCheckTimeoutRef?: NodeJS.Timeout;\n  rejectPromise?: (\n    reason?: Error & { code?: string | number; isWSFailure?: boolean; StatusCode?: string | number },\n  ) => void;\n  requestID: string | undefined;\n  resolvePromise?: (value: ConnectionOpen<StreamChatGenerics>) => void;\n  totalFailures: number;\n  ws?: WebSocket;\n  wsID: number;\n\n  constructor({ client }: { client: StreamChat<StreamChatGenerics> }) {\n    /** StreamChat client */\n    this.client = client;\n    /** consecutive failures influence the duration of the timeout */\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n    this.isConnecting = false;\n    /** To avoid reconnect if client is disconnected */\n    this.isDisconnected = false;\n    /** Boolean that indicates if the connection promise is resolved */\n    this.isResolved = false;\n    /** Boolean that indicates if we have a working connection to the server */\n    this.isHealthy = false;\n    /** Incremented when a new WS connection is made */\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n\n    addConnectionEventListeners(this.onlineStatusChanged);\n  }\n\n  _log(msg: string, extra: UR = {}, level: LogLevel = 'info') {\n    this.client.logger(level, 'connection:' + msg, { tags: ['connection'], ...extra });\n  }\n\n  setClient(client: StreamChat<StreamChatGenerics>) {\n    this.client = client;\n  }\n\n  /**\n   * connect - Connect to the WS URL\n   * the default 15s timeout allows between 2~3 tries\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async connect(timeout = 15000) {\n    if (this.isConnecting) {\n      throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n    }\n\n    this.isDisconnected = false;\n\n    try {\n      const healthCheck = await this._connect();\n      this.consecutiveFailures = 0;\n\n      this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');\n        this._reconnect({ refreshToken: true });\n      } else if (!error.isWSFailure) {\n        // API rejected the connection and we should not retry\n        throw new Error(\n          JSON.stringify({\n            code: error.code,\n            StatusCode: error.StatusCode,\n            message: error.message,\n            isWSFailure: error.isWSFailure,\n          }),\n        );\n      }\n    }\n\n    return await this._waitForHealthy(timeout);\n  }\n\n  /**\n   * _waitForHealthy polls the promise connection to see if its resolved until it times out\n   * the default 15s timeout allows between 2~3 tries\n   * @param timeout duration(ms)\n   */\n  async _waitForHealthy(timeout = 15000) {\n    return Promise.race([\n      (async () => {\n        const interval = 50; // ms\n        for (let i = 0; i <= timeout; i += interval) {\n          try {\n            return await this.connectionOpen;\n          } catch (error) {\n            if (i === timeout) {\n              throw new Error(\n                JSON.stringify({\n                  code: error.code,\n                  StatusCode: error.StatusCode,\n                  message: error.message,\n                  isWSFailure: error.isWSFailure,\n                }),\n              );\n            }\n            await sleep(interval);\n          }\n        }\n      })(),\n      (async () => {\n        await sleep(timeout);\n        this.isConnecting = false;\n        throw new Error(\n          JSON.stringify({\n            code: '',\n            StatusCode: '',\n            message: 'initial WS connection could not be established',\n            isWSFailure: true,\n          }),\n        );\n      })(),\n    ]);\n  }\n\n  /**\n   * Builds and returns the url for websocket.\n   * @private\n   * @returns url string\n   */\n  _buildUrl = () => {\n    const qs = encodeURIComponent(this.client._buildWSPayload(this.requestID));\n    const token = this.client.tokenManager.getToken();\n\n    return `${this.client.wsBaseURL}/connect?json=${qs}&api_key=${\n      this.client.key\n    }&authorization=${token}&stream-auth-type=${this.client.getAuthType()}&X-Stream-Client=${encodeURIComponent(\n      this.client.getUserAgent(),\n    )}`;\n  };\n\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout?: number) {\n    this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n\n    this.wsID += 1;\n    this.isConnecting = false;\n    this.isDisconnected = true;\n\n    // start by removing all the listeners\n    if (this.healthCheckTimeoutRef) {\n      clearInterval(this.healthCheckTimeoutRef);\n    }\n    if (this.connectionCheckTimeoutRef) {\n      clearInterval(this.connectionCheckTimeoutRef);\n    }\n\n    removeConnectionEventListeners(this.onlineStatusChanged);\n\n    this.isHealthy = false;\n\n    // remove ws handlers...\n    if (this.ws && this.ws.removeAllListeners) {\n      this.ws.removeAllListeners();\n    }\n\n    let isClosedPromise: Promise<void>;\n    // and finally close...\n    // Assigning to local here because we will remove it from this before the\n    // promise resolves.\n    const { ws } = this;\n    if (ws && ws.close && ws.readyState === ws.OPEN) {\n      isClosedPromise = new Promise((resolve) => {\n        const onclose = (event: WebSocket.CloseEvent) => {\n          this._log(`disconnect() - resolving isClosedPromise ${event ? 'with' : 'without'} close frame`, { event });\n          resolve();\n        };\n\n        ws.onclose = onclose;\n        // In case we don't receive close frame websocket server in time,\n        // lets not wait for more than 1 seconds.\n        setTimeout(onclose, timeout != null ? timeout : 1000);\n      });\n\n      this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n\n      ws.close(chatCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');\n    } else {\n      this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n      isClosedPromise = Promise.resolve();\n    }\n\n    delete this.ws;\n\n    return isClosedPromise;\n  }\n\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    if (this.isConnecting || (this.isDisconnected && this.client.options.enableWSFallback)) return; // simply ignore _connect if it's currently trying to connect\n    this.isConnecting = true;\n    this.requestID = randomId();\n    this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n    let isTokenReady = false;\n    try {\n      this._log(`_connect() - waiting for token`);\n      await this.client.tokenManager.tokenReady();\n      isTokenReady = true;\n    } catch (e) {\n      // token provider has failed before, so try again\n    }\n\n    try {\n      if (!isTokenReady) {\n        this._log(`_connect() - tokenProvider failed before, so going to retry`);\n        await this.client.tokenManager.loadToken();\n      }\n\n      this._setupConnectionPromise();\n      const wsURL = this._buildUrl();\n      this._log(`_connect() - Connecting to ${wsURL}`, { wsURL, requestID: this.requestID });\n      this.ws = new WebSocket(wsURL);\n      this.ws.onopen = this.onopen.bind(this, this.wsID);\n      this.ws.onclose = this.onclose.bind(this, this.wsID);\n      this.ws.onerror = this.onerror.bind(this, this.wsID);\n      this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n      const response = await this.connectionOpen;\n      this.isConnecting = false;\n\n      if (response) {\n        this.connectionID = response.connection_id;\n        if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n          postInsights(\n            'ws_success_after_failure',\n            buildWsSuccessAfterFailureInsight((this as unknown) as StableWSConnection),\n          );\n          this.client.insightMetrics.wsConsecutiveFailures = 0;\n        }\n        return response;\n      }\n    } catch (err) {\n      this.isConnecting = false;\n      this._log(`_connect() - Error - `, err);\n      if (this.client.options.enableInsights) {\n        this.client.insightMetrics.wsConsecutiveFailures++;\n        this.client.insightMetrics.wsTotalFailures++;\n\n        const insights = buildWsFatalInsight((this as unknown) as StableWSConnection, convertErrorToJson(err as Error));\n        postInsights?.('ws_fatal', insights);\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(options: { interval?: number; refreshToken?: boolean } = {}): Promise<void> {\n    this._log('_reconnect() - Initiating the reconnect');\n\n    // only allow 1 connection at the time\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (1) since already connecting or healthy');\n      return;\n    }\n\n    // reconnect in case of on error or on close\n    // also reconnect if the health check cycle fails\n    let interval = options.interval;\n    if (!interval) {\n      interval = retryInterval(this.consecutiveFailures);\n    }\n    // reconnect, or try again after a little while...\n    await sleep(interval);\n\n    // Check once again if by some other call to _reconnect is active or connection is\n    // already restored, then no need to proceed.\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (2) since already connecting or healthy');\n      return;\n    }\n\n    if (this.isDisconnected && this.client.options.enableWSFallback) {\n      this._log('_reconnect() - Abort (3) since disconnect() is called');\n      return;\n    }\n\n    this._log('_reconnect() - Destroying current WS connection');\n\n    // cleanup the old connection\n    this._destroyCurrentWSConnection();\n\n    if (options.refreshToken) {\n      await this.client.tokenManager.loadToken();\n    }\n\n    try {\n      await this._connect();\n      this._log('_reconnect() - Waiting for recoverCallBack');\n      await this.client.recoverState();\n      this._log('_reconnect() - Finished recoverCallBack');\n\n      this.consecutiveFailures = 0;\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log('_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect');\n\n        return this._reconnect({ refreshToken: true });\n      }\n\n      // reconnect on WS failures, don't reconnect if there is a code bug\n      if (error.isWSFailure) {\n        this._log('_reconnect() - WS failure, so going to try to reconnect');\n\n        this._reconnect();\n      }\n    }\n    this._log('_reconnect() - == END ==');\n  }\n\n  /**\n   * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n   *\n   * @param {Event} event Event with type online or offline\n   *\n   */\n  onlineStatusChanged = (event: Event) => {\n    if (event.type === 'offline') {\n      // mark the connection as down\n      this._log('onlineStatusChanged() - Status changing to offline');\n      this._setHealth(false);\n    } else if (event.type === 'online') {\n      // retry right now...\n      // We check this.isHealthy, not sure if it's always\n      // smart to create a new WS connection if the old one is still up and running.\n      // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n      this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n      if (!this.isHealthy) {\n        this._reconnect({ interval: 10 });\n      }\n    }\n  };\n\n  onopen = (wsID: number) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onopen() - onopen callback', { wsID });\n  };\n\n  onmessage = (wsID: number, event: WebSocket.MessageEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onmessage() - onmessage callback', { event, wsID });\n    const data = typeof event.data === 'string' ? JSON.parse(event.data) : null;\n\n    // we wait till the first message before we consider the connection open..\n    // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n    // after that a ws.onclose..\n    if (!this.isResolved && data) {\n      this.isResolved = true;\n      if (data.error) {\n        this.rejectPromise?.(this._errorFromWSEvent(data, false));\n        return;\n      }\n\n      this.resolvePromise?.(data);\n      this._setHealth(true);\n    }\n\n    // trigger the event..\n    this.lastEvent = new Date();\n\n    if (data && data.type === 'health.check') {\n      this.scheduleNextPing();\n    }\n\n    this.client.handleEvent(event);\n    this.scheduleConnectionCheck();\n  };\n\n  onclose = (wsID: number, event: WebSocket.CloseEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onclose() - onclose callback - ' + event.code, { event, wsID });\n\n    if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n      // this is a permanent error raised by stream..\n      // usually caused by invalid auth details\n      const error = new Error(`WS connection reject with error ${event.reason}`) as Error & WebSocket.CloseEvent;\n\n      error.reason = event.reason;\n      error.code = event.code;\n      error.wasClean = event.wasClean;\n      error.target = event.target;\n\n      this.rejectPromise?.(error);\n      this._log(`onclose() - WS connection reject with error ${event.reason}`, { event });\n    } else {\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n      this.isConnecting = false;\n\n      this.rejectPromise?.(this._errorFromWSEvent(event));\n\n      this._log(`onclose() - WS connection closed. Calling reconnect ...`, { event });\n\n      // reconnect if its an abnormal failure\n      this._reconnect();\n    }\n  };\n\n  onerror = (wsID: number, event: WebSocket.ErrorEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this.consecutiveFailures += 1;\n    this.totalFailures += 1;\n    this._setHealth(false);\n    this.isConnecting = false;\n\n    this.rejectPromise?.(this._errorFromWSEvent(event));\n    this._log(`onerror() - WS connection resulted into error`, { event });\n\n    this._reconnect();\n  };\n\n  /**\n   * _setHealth - Sets the connection to healthy or unhealthy.\n   * Broadcasts an event in case the connection status changed.\n   *\n   * @param {boolean} healthy boolean indicating if the connection is healthy or not\n   *\n   */\n  _setHealth = (healthy: boolean) => {\n    if (healthy === this.isHealthy) return;\n\n    this.isHealthy = healthy;\n\n    if (this.isHealthy) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: this.isHealthy });\n      return;\n    }\n\n    // we're offline, wait few seconds and fire and event if still offline\n    setTimeout(() => {\n      if (this.isHealthy) return;\n      this.client.dispatchEvent({ type: 'connection.changed', online: this.isHealthy });\n    }, 5000);\n  };\n\n  /**\n   * _errorFromWSEvent - Creates an error object for the WS event\n   *\n   */\n  _errorFromWSEvent = (event: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent, isWSFailure = true) => {\n    let code;\n    let statusCode;\n    let message;\n    if (isCloseEvent(event)) {\n      code = event.code;\n      statusCode = 'unknown';\n      message = event.reason;\n    }\n\n    if (isErrorEvent(event)) {\n      code = event.error.code;\n      statusCode = event.error.StatusCode;\n      message = event.error.message;\n    }\n\n    // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n    this._log(`_errorFromWSEvent() - WS failed with code ${code}`, { event }, 'warn');\n\n    const error = new Error(`WS failed with code ${code} and reason - ${message}`) as Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    };\n    error.code = code;\n    /**\n     * StatusCode does not exist on any event types but has been left\n     * as is to preserve JS functionality during the TS implementation\n     */\n    error.StatusCode = statusCode;\n    error.isWSFailure = isWSFailure;\n    return error;\n  };\n\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    // increment the ID, meaning we will ignore all messages from the old\n    // ws connection from now on.\n    this.wsID += 1;\n\n    try {\n      this?.ws?.removeAllListeners();\n      this?.ws?.close();\n    } catch (e) {\n      // we don't care\n    }\n  }\n\n  /**\n   * _setupPromise - sets up the this.connectOpen promise\n   */\n  _setupConnectionPromise = () => {\n    this.isResolved = false;\n    /** a promise that is resolved once ws.open is called */\n    this.connectionOpen = new Promise<ConnectionOpen<StreamChatGenerics>>((resolve, reject) => {\n      this.resolvePromise = resolve;\n      this.rejectPromise = reject;\n    });\n  };\n\n  /**\n   * Schedules a next health check ping for websocket.\n   */\n  scheduleNextPing = () => {\n    if (this.healthCheckTimeoutRef) {\n      clearTimeout(this.healthCheckTimeoutRef);\n    }\n\n    // 30 seconds is the recommended interval (messenger uses this)\n    this.healthCheckTimeoutRef = setTimeout(() => {\n      // send the healthcheck.., server replies with a health check event\n      const data = [{ type: 'health.check', client_id: this.client.clientID }];\n      // try to send on the connection\n      try {\n        this.ws?.send(JSON.stringify(data));\n      } catch (e) {\n        // error will already be detected elsewhere\n      }\n    }, this.pingInterval);\n  };\n\n  /**\n   * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n   * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n   * to be reconnected.\n   */\n  scheduleConnectionCheck = () => {\n    if (this.connectionCheckTimeoutRef) {\n      clearTimeout(this.connectionCheckTimeoutRef);\n    }\n\n    this.connectionCheckTimeoutRef = setTimeout(() => {\n      const now = new Date();\n      if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n        this._log('scheduleConnectionCheck - going to reconnect');\n        this._setHealth(false);\n        this._reconnect();\n      }\n    }, this.connectionCheckTimeout);\n  };\n}\n","export default null;","export default null;","import jwt, { Secret, SignOptions } from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { encodeBase64, decodeBase64 } from './base64';\nimport { UR } from './types';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UR} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(apiSecret: Secret, userId: string, extraData: UR = {}, jwtOptions: SignOptions = {}) {\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n\n  const payload: { user_id: string } & UR = {\n    user_id: userId,\n    ...extraData,\n  };\n\n  // make sure we return a clear error when jwt is shimmed (ie. browser build)\n  if (jwt == null || jwt.sign == null) {\n    throw Error(\n      `Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`,\n    );\n  }\n\n  const opts: SignOptions = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\n  if (payload.iat) {\n    opts.noTimestamp = false;\n  }\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret: Secret, jwtOptions: SignOptions = {}) {\n  const payload = {\n    server: true,\n  };\n\n  const opts: SignOptions = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function UserFromToken(token: string) {\n  const fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id as string;\n}\n\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */\nexport function DevToken(userId: string) {\n  return [\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n    encodeBase64(JSON.stringify({ user_id: userId })),\n    'devtoken', // hardcoded signature\n  ].join('.');\n}\n\n/**\n *\n * @param {string | Buffer} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body: string | Buffer, secret: string, signature: string) {\n  const key = Buffer.from(secret, 'utf8');\n  const hash = crypto.createHmac('sha256', key).update(body).digest('hex');\n\n  try {\n    return crypto.timingSafeEqual(Buffer.from(hash), Buffer.from(signature));\n  } catch {\n    return false;\n  }\n}\n","import { Secret } from 'jsonwebtoken';\nimport { UserFromToken, JWTServerToken, JWTUserToken } from './signing';\nimport { isFunction } from './utils';\nimport { TokenOrProvider, ExtendableGenerics, DefaultGenerics, UserResponse } from './types';\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nexport class TokenManager<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  loadTokenPromise: Promise<string> | null;\n  type: 'static' | 'provider';\n  secret?: Secret;\n  token?: string;\n  tokenProvider?: TokenOrProvider;\n  user?: UserResponse<StreamChatGenerics>;\n  /**\n   * Constructor\n   *\n   * @param {Secret} secret\n   */\n  constructor(secret?: Secret) {\n    this.loadTokenPromise = null;\n    if (secret) {\n      this.secret = secret;\n    }\n\n    this.type = 'static';\n\n    if (this.secret) {\n      this.token = JWTServerToken(this.secret);\n    }\n  }\n\n  /**\n   * Set the static string token or token provider.\n   * Token provider should return a token string or a promise which resolves to string token.\n   *\n   * @param {TokenOrProvider} tokenOrProvider\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  setTokenOrProvider = async (tokenOrProvider: TokenOrProvider, user: UserResponse<StreamChatGenerics>) => {\n    this.validateToken(tokenOrProvider, user);\n    this.user = user;\n\n    if (isFunction(tokenOrProvider)) {\n      this.tokenProvider = tokenOrProvider;\n      this.type = 'provider';\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      this.token = tokenOrProvider;\n      this.type = 'static';\n    }\n\n    if (!tokenOrProvider && this.user && this.secret) {\n      this.token = JWTUserToken(this.secret, user.id, {}, {});\n      this.type = 'static';\n    }\n\n    await this.loadToken();\n  };\n\n  /**\n   * Resets the token manager.\n   * Useful for client disconnection or switching user.\n   */\n  reset = () => {\n    this.token = undefined;\n    this.tokenProvider = undefined;\n    this.type = 'static';\n    this.user = undefined;\n    this.loadTokenPromise = null;\n  };\n\n  // Validates the user token.\n  validateToken = (tokenOrProvider: TokenOrProvider, user: UserResponse<StreamChatGenerics>) => {\n    // allow empty token for anon user\n    if (user && user.anon && !tokenOrProvider) return;\n\n    // Don't allow empty token for non-server side client.\n    if (!this.secret && !tokenOrProvider) {\n      throw new Error('User token can not be empty');\n    }\n\n    if (tokenOrProvider && typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {\n      throw new Error('user token should either be a string or a function');\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (user.anon && tokenOrProvider === '') return;\n\n      const tokenUserId = UserFromToken(tokenOrProvider);\n      if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)) {\n        throw new Error('userToken does not have a user_id or is not matching with user.id');\n      }\n    }\n  };\n\n  // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n  // case a function should wait.\n  tokenReady = () => this.loadTokenPromise;\n\n  // Fetches a token from tokenProvider function and sets in tokenManager.\n  // In case of static token, it will simply resolve to static token.\n  loadToken = () => {\n    // eslint-disable-next-line no-async-promise-executor\n    this.loadTokenPromise = new Promise(async (resolve, reject) => {\n      if (this.type === 'static') {\n        return resolve(this.token as string);\n      }\n\n      if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n        try {\n          this.token = await this.tokenProvider();\n        } catch (e) {\n          return reject(new Error(`Call to tokenProvider failed with message: ${e}`));\n        }\n        resolve(this.token);\n      }\n    });\n\n    return this.loadTokenPromise;\n  };\n\n  // Returns a current token\n  getToken = () => {\n    if (this.token) {\n      return this.token;\n    }\n\n    if (this.user && this.user.anon && !this.token) {\n      return this.token;\n    }\n\n    if (this.secret) {\n      return JWTServerToken(this.secret);\n    }\n\n    throw new Error(\n      `Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called`,\n    );\n  };\n\n  isStatic = () => this.type === 'static';\n}\n","import { AxiosResponse } from 'axios';\nimport { APIErrorResponse } from './types';\n\nexport const APIErrorCodes: Record<string, { name: string; retryable: boolean }> = {\n  '-1': { name: 'InternalSystemError', retryable: true },\n  '2': { name: 'AccessKeyError', retryable: false },\n  '3': { name: 'AuthenticationFailedError', retryable: true },\n  '4': { name: 'InputError', retryable: false },\n  '6': { name: 'DuplicateUsernameError', retryable: false },\n  '9': { name: 'RateLimitError', retryable: true },\n  '16': { name: 'DoesNotExistError', retryable: false },\n  '17': { name: 'NotAllowedError', retryable: false },\n  '18': { name: 'EventNotSupportedError', retryable: false },\n  '19': { name: 'ChannelFeatureNotSupportedError', retryable: false },\n  '20': { name: 'MessageTooLongError', retryable: false },\n  '21': { name: 'MultipleNestingLevelError', retryable: false },\n  '22': { name: 'PayloadTooBigError', retryable: false },\n  '23': { name: 'RequestTimeoutError', retryable: true },\n  '24': { name: 'MaxHeaderSizeExceededError', retryable: false },\n  '40': { name: 'AuthErrorTokenExpired', retryable: false },\n  '41': { name: 'AuthErrorTokenNotValidYet', retryable: false },\n  '42': { name: 'AuthErrorTokenUsedBeforeIssuedAt', retryable: false },\n  '43': { name: 'AuthErrorTokenSignatureInvalid', retryable: false },\n  '44': { name: 'CustomCommandEndpointMissingError', retryable: false },\n  '45': { name: 'CustomCommandEndpointCallError', retryable: true },\n  '46': { name: 'ConnectionIDNotFoundError', retryable: false },\n  '60': { name: 'CoolDownError', retryable: true },\n  '69': { name: 'ErrWrongRegion', retryable: false },\n  '70': { name: 'ErrQueryChannelPermissions', retryable: false },\n  '71': { name: 'ErrTooManyConnections', retryable: true },\n  '99': { name: 'AppSuspendedError', retryable: false },\n};\n\ntype APIError = Error & { code: number; isWSFailure?: boolean };\n\nexport function isAPIError(error: Error): error is APIError {\n  return (error as APIError).code !== undefined;\n}\n\nexport function isErrorRetryable(error: APIError) {\n  if (!error.code) return false;\n  const err = APIErrorCodes[`${error.code}`];\n  if (!err) return false;\n  return err.retryable;\n}\n\nexport function isConnectionIDError(error: APIError) {\n  return error.code === 46; // ConnectionIDNotFoundError\n}\n\nexport function isWSFailure(err: APIError): boolean {\n  if (typeof err.isWSFailure === 'boolean') {\n    return err.isWSFailure;\n  }\n\n  try {\n    return JSON.parse(err.message).isWSFailure;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function isErrorResponse(res: AxiosResponse<unknown>): res is AxiosResponse<APIErrorResponse> {\n  return !res.status || res.status < 200 || 300 <= res.status;\n}\n","import axios, { AxiosRequestConfig, CancelTokenSource } from 'axios';\nimport { StreamChat } from './client';\nimport { addConnectionEventListeners, removeConnectionEventListeners, retryInterval, sleep } from './utils';\nimport { isAPIError, isConnectionIDError, isErrorRetryable } from './errors';\nimport { ConnectionOpen, Event, UR, ExtendableGenerics, DefaultGenerics, LogLevel } from './types';\n\nexport enum ConnectionState {\n  Closed = 'CLOSED',\n  Connected = 'CONNECTED',\n  Connecting = 'CONNECTING',\n  Disconnected = 'DISCONNECTED',\n  Init = 'INIT',\n}\n\nexport class WSConnectionFallback<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  client: StreamChat<StreamChatGenerics>;\n  state: ConnectionState;\n  consecutiveFailures: number;\n  connectionID?: string;\n  cancelToken?: CancelTokenSource;\n\n  constructor({ client }: { client: StreamChat<StreamChatGenerics> }) {\n    this.client = client;\n    this.state = ConnectionState.Init;\n    this.consecutiveFailures = 0;\n\n    addConnectionEventListeners(this._onlineStatusChanged);\n  }\n\n  _log(msg: string, extra: UR = {}, level: LogLevel = 'info') {\n    this.client.logger(level, 'WSConnectionFallback:' + msg, { tags: ['connection_fallback', 'connection'], ...extra });\n  }\n\n  _setState(state: ConnectionState) {\n    this._log(`_setState() - ${state}`);\n\n    // transition from connecting => connected\n    if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: true });\n    }\n\n    if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: false });\n    }\n\n    this.state = state;\n  }\n\n  /** @private */\n  _onlineStatusChanged = (event: { type: string }) => {\n    this._log(`_onlineStatusChanged() - ${event.type}`);\n\n    if (event.type === 'offline') {\n      this._setState(ConnectionState.Closed);\n      this.cancelToken?.cancel('disconnect() is called');\n      this.cancelToken = undefined;\n      return;\n    }\n\n    if (event.type === 'online' && this.state === ConnectionState.Closed) {\n      this.connect(true);\n    }\n  };\n\n  /** @private */\n  _req = async <T = UR>(params: UR, config: AxiosRequestConfig, retry: boolean): Promise<T> => {\n    if (!this.cancelToken && !params.close) {\n      this.cancelToken = axios.CancelToken.source();\n    }\n\n    try {\n      const res = await this.client.doAxiosRequest<T>(\n        'get',\n        (this.client.baseURL as string).replace(':3030', ':8900') + '/longpoll', // replace port if present for testing with local API\n        undefined,\n        {\n          config: { ...config, cancelToken: this.cancelToken?.token },\n          params,\n        },\n      );\n\n      this.consecutiveFailures = 0; // always reset in case of no error\n      return res;\n    } catch (err) {\n      this.consecutiveFailures += 1;\n\n      if (retry && isErrorRetryable(err)) {\n        this._log(`_req() - Retryable error, retrying request`);\n        await sleep(retryInterval(this.consecutiveFailures));\n        return this._req<T>(params, config, retry);\n      }\n\n      throw err;\n    }\n  };\n\n  /** @private */\n  _poll = async () => {\n    while (this.state === ConnectionState.Connected) {\n      try {\n        const data = await this._req<{\n          events: Event<StreamChatGenerics>[];\n        }>({}, { timeout: 30000 }, true); // 30s => API responds in 20s if there is no event\n\n        if (data.events?.length) {\n          for (let i = 0; i < data.events.length; i++) {\n            this.client.dispatchEvent(data.events[i]);\n          }\n        }\n      } catch (err) {\n        if (axios.isCancel(err)) {\n          this._log(`_poll() - axios canceled request`);\n          return;\n        }\n\n        /** client.doAxiosRequest will take care of TOKEN_EXPIRED error */\n\n        if (isConnectionIDError(err)) {\n          this._log(`_poll() - ConnectionID error, connecting without ID...`);\n          this._setState(ConnectionState.Disconnected);\n          this.connect(true);\n          return;\n        }\n\n        if (isAPIError(err) && !isErrorRetryable(err)) {\n          this._setState(ConnectionState.Closed);\n          return;\n        }\n\n        await sleep(retryInterval(this.consecutiveFailures));\n      }\n    }\n  };\n\n  /**\n   * connect try to open a longpoll request\n   * @param reconnect should be false for first call and true for subsequent calls to keep the connection alive and call recoverState\n   */\n  connect = async (reconnect = false) => {\n    if (this.state === ConnectionState.Connecting) {\n      this._log('connect() - connecting already in progress', { reconnect }, 'warn');\n      return;\n    }\n    if (this.state === ConnectionState.Connected) {\n      this._log('connect() - already connected and polling', { reconnect }, 'warn');\n      return;\n    }\n\n    this._setState(ConnectionState.Connecting);\n    this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n    try {\n      const { event } = await this._req<{ event: ConnectionOpen<StreamChatGenerics> }>(\n        { json: this.client._buildWSPayload() },\n        { timeout: 8000 }, // 8s\n        reconnect,\n      );\n\n      this._setState(ConnectionState.Connected);\n      this.connectionID = event.connection_id;\n      // @ts-expect-error\n      this.client.dispatchEvent(event);\n      this._poll();\n      if (reconnect) {\n        this.client.recoverState();\n      }\n      return event;\n    } catch (err) {\n      this._setState(ConnectionState.Closed);\n      throw err;\n    }\n  };\n\n  /**\n   * isHealthy checks if there is a connectionID and connection is in Connected state\n   */\n  isHealthy = () => {\n    return !!this.connectionID && this.state === ConnectionState.Connected;\n  };\n\n  disconnect = async (timeout = 2000) => {\n    removeConnectionEventListeners(this._onlineStatusChanged);\n\n    this._setState(ConnectionState.Disconnected);\n    this.cancelToken?.cancel('disconnect() is called');\n    this.cancelToken = undefined;\n\n    const connection_id = this.connectionID;\n    this.connectionID = undefined;\n\n    try {\n      await this._req({ close: true, connection_id }, { timeout }, false);\n      this._log(`disconnect() - Closed connectionID`);\n    } catch (err) {\n      this._log(`disconnect() - Failed`, { err }, 'error');\n    }\n  };\n}\n","import { StreamChat } from './client';\nimport {\n  DefaultGenerics,\n  ExtendableGenerics,\n  QuerySegmentTargetsFilter,\n  SegmentData,\n  SegmentResponse,\n  SortParam,\n} from './types';\n\ntype SegmentType = 'user' | 'channel';\n\ntype SegmentUpdatableFields = {\n  description?: string;\n  filter?: {};\n  name?: string;\n};\n\nexport class Segment<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  type: SegmentType;\n  id: string | null;\n  client: StreamChat<StreamChatGenerics>;\n  data?: SegmentData | SegmentResponse;\n\n  constructor(client: StreamChat<StreamChatGenerics>, type: SegmentType, id: string | null, data?: SegmentData) {\n    this.client = client;\n    this.type = type;\n    this.id = id;\n    this.data = data;\n  }\n\n  async create() {\n    const body = {\n      name: this.data?.name,\n      filter: this.data?.filter,\n      description: this.data?.description,\n      all_sender_channels: this.data?.all_sender_channels,\n      all_users: this.data?.all_users,\n    };\n\n    return this.client.createSegment(this.type, this.id, body);\n  }\n\n  verifySegmentId() {\n    if (!this.id) {\n      throw new Error(\n        'Segment id is missing. Either create the segment using segment.create() or set the id during instantiation - const segment = client.segment(id)',\n      );\n    }\n  }\n\n  async get() {\n    this.verifySegmentId();\n    return this.client.getSegment(this.id as string);\n  }\n\n  async update(data: Partial<SegmentUpdatableFields>) {\n    this.verifySegmentId();\n\n    return this.client.updateSegment(this.id as string, data);\n  }\n\n  async addTargets(targets: string[]) {\n    this.verifySegmentId();\n    return this.client.addSegmentTargets(this.id as string, targets);\n  }\n\n  async removeTargets(targets: string[]) {\n    this.verifySegmentId();\n    return this.client.removeSegmentTargets(this.id as string, targets);\n  }\n\n  async delete() {\n    this.verifySegmentId();\n    return this.client.deleteSegment(this.id as string);\n  }\n\n  async targetExists(targetId: string) {\n    this.verifySegmentId();\n    return this.client.segmentTargetExists(this.id as string, targetId);\n  }\n\n  async queryTargets(filter: QuerySegmentTargetsFilter | null = {}, sort: SortParam[] | null | [] = [], options = {}) {\n    this.verifySegmentId();\n\n    return this.client.querySegmentTargets(this.id as string, filter, sort, options);\n  }\n}\n","import { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { StableWSConnection } from './connection';\nimport { EVENT_MAP } from './events';\nimport { Role } from './permissions';\nimport type { Channel } from './channel';\n\n/**\n * Utility Types\n */\n\nexport type ArrayOneOrMore<T> = {\n  0: T;\n} & Array<T>;\n\nexport type ArrayTwoOrMore<T> = {\n  0: T;\n  1: T;\n} & Array<T>;\n\nexport type KnownKeys<T> = {\n  [K in keyof T]: string extends K ? never : number extends K ? never : K;\n} extends { [_ in keyof T]: infer U }\n  ? U\n  : never;\n\nexport type RequireAtLeastOne<T> = {\n  [K in keyof T]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<keyof T, K>>>;\n}[keyof T];\n\nexport type RequireOnlyOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>>;\n  }[Keys];\n\n/* Unknown Record */\nexport type UR = Record<string, unknown>;\nexport type UnknownType = UR; //alias to avoid breaking change\n\nexport type DefaultGenerics = {\n  attachmentType: UR;\n  channelType: UR;\n  commandType: LiteralStringForUnion;\n  eventType: UR;\n  memberType: UR;\n  messageType: UR;\n  pollOptionType: UR;\n  pollType: UR;\n  reactionType: UR;\n  userType: UR;\n};\n\nexport type ExtendableGenerics = {\n  attachmentType: UR;\n  channelType: UR;\n  commandType: string;\n  eventType: UR;\n  memberType: UR;\n  messageType: UR;\n  pollOptionType: UR;\n  pollType: UR;\n  reactionType: UR;\n  userType: UR;\n};\n\nexport type Unpacked<T> = T extends (infer U)[]\n  ? U // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  : T extends (...args: any[]) => infer U\n  ? U\n  : T extends Promise<infer U>\n  ? U\n  : T;\n\n/**\n * Response Types\n */\n\nexport type APIResponse = {\n  duration: string;\n};\n\nexport type TranslateResponse = {\n  language: string;\n  translated_text: string;\n};\n\nexport type AppSettingsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  app?: {\n    // TODO\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call_types: any;\n    channel_configs: Record<\n      string,\n      {\n        reminders: boolean;\n        automod?: ChannelConfigAutomod;\n        automod_behavior?: ChannelConfigAutomodBehavior;\n        automod_thresholds?: ChannelConfigAutomodThresholds;\n        blocklist_behavior?: ChannelConfigAutomodBehavior;\n        commands?: CommandVariants<StreamChatGenerics>[];\n        connect_events?: boolean;\n        created_at?: string;\n        custom_events?: boolean;\n        mark_messages_pending?: boolean;\n        max_message_length?: number;\n        message_retention?: string;\n        mutes?: boolean;\n        name?: string;\n        polls?: boolean;\n        push_notifications?: boolean;\n        quotes?: boolean;\n        reactions?: boolean;\n        read_events?: boolean;\n        replies?: boolean;\n        search?: boolean;\n        typing_events?: boolean;\n        updated_at?: string;\n        uploads?: boolean;\n        url_enrichment?: boolean;\n      }\n    >;\n    reminders_interval: number;\n    agora_options?: AgoraOptions | null;\n    async_moderation_config?: AsyncModerationOptions;\n    async_url_enrich_enabled?: boolean;\n    auto_translation_enabled?: boolean;\n    before_message_send_hook_url?: string;\n    campaign_enabled?: boolean;\n    cdn_expiration_seconds?: number;\n    custom_action_handler_url?: string;\n    datadog_info?: {\n      api_key: string;\n      site: string;\n      enabled?: boolean;\n    };\n    disable_auth_checks?: boolean;\n    disable_permissions_checks?: boolean;\n    enforce_unique_usernames?: 'no' | 'app' | 'team';\n    file_upload_config?: FileUploadConfig;\n    geofences?: Array<{\n      country_codes: Array<string>;\n      description: string;\n      name: string;\n      type: string;\n    }>;\n    grants?: Record<string, string[]>;\n    hms_options?: HMSOptions | null;\n    image_moderation_enabled?: boolean;\n    image_upload_config?: FileUploadConfig;\n    multi_tenant_enabled?: boolean;\n    name?: string;\n    organization?: string;\n    permission_version?: string;\n    policies?: Record<string, Policy[]>;\n    poll_enabled?: boolean;\n    push_notifications?: {\n      offline_only: boolean;\n      version: string;\n      apn?: APNConfig;\n      firebase?: FirebaseConfig;\n      huawei?: HuaweiConfig;\n      providers?: PushProviderConfig[];\n      xiaomi?: XiaomiConfig;\n    };\n    revoke_tokens_issued_before?: string | null;\n    search_backend?: 'disabled' | 'elasticsearch' | 'postgres';\n    sns_key?: string;\n    sns_secret?: string;\n    sns_topic_arn?: string;\n    sqs_key?: string;\n    sqs_secret?: string;\n    sqs_url?: string;\n    suspended?: boolean;\n    suspended_explanation?: string;\n    user_search_disallowed_roles?: string[] | null;\n    video_provider?: string;\n    webhook_events?: Array<string>;\n    webhook_url?: string;\n  };\n};\n\nexport type ModerationResult = {\n  action: string;\n  created_at: string;\n  message_id: string;\n  updated_at: string;\n  user_bad_karma: boolean;\n  user_karma: number;\n  blocked_word?: string;\n  blocklist_name?: string;\n  moderated_by?: string;\n};\n\nexport type AutomodDetails = {\n  action?: string;\n  image_labels?: Array<string>;\n  original_message_type?: string;\n  result?: ModerationResult;\n};\n\nexport type FlagDetails = {\n  automod?: AutomodDetails;\n};\n\nexport type Flag<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  created_at: string;\n  created_by_automod: boolean;\n  updated_at: string;\n  details?: FlagDetails;\n  target_message?: MessageResponse<StreamChatGenerics>;\n  target_user?: UserResponse<StreamChatGenerics>;\n  user?: UserResponse<StreamChatGenerics>;\n};\n\nexport type FlagsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flags?: Array<Flag<StreamChatGenerics>>;\n};\n\nexport type MessageFlagsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flags?: Array<{\n    message: MessageResponse<StreamChatGenerics>;\n    user: UserResponse<StreamChatGenerics>;\n    approved_at?: string;\n    created_at?: string;\n    created_by_automod?: boolean;\n    moderation_result?: ModerationResult;\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: UserResponse<StreamChatGenerics>;\n    updated_at?: string;\n  }>;\n};\n\nexport type FlagReport<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  flags_count: number;\n  id: string;\n  message: MessageResponse<StreamChatGenerics>;\n  user: UserResponse<StreamChatGenerics>;\n  created_at?: string;\n  details?: FlagDetails;\n  first_reporter?: UserResponse<StreamChatGenerics>;\n  review_result?: string;\n  reviewed_at?: string;\n  reviewed_by?: UserResponse<StreamChatGenerics>;\n  updated_at?: string;\n};\n\nexport type FlagReportsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag_reports: Array<FlagReport<StreamChatGenerics>>;\n};\n\nexport type ReviewFlagReportResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag_report: FlagReport<StreamChatGenerics>;\n};\n\nexport type BannedUsersResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  bans?: Array<{\n    user: UserResponse<StreamChatGenerics>;\n    banned_by?: UserResponse<StreamChatGenerics>;\n    channel?: ChannelResponse<StreamChatGenerics>;\n    expires?: string;\n    ip_ban?: boolean;\n    reason?: string;\n    timeout?: number;\n  }>;\n};\n\nexport type BlockListResponse = BlockList & {\n  created_at?: string;\n  type?: string;\n  updated_at?: string;\n};\n\nexport type ChannelResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['channelType'] & {\n  cid: string;\n  disabled: boolean;\n  frozen: boolean;\n  id: string;\n  type: string;\n  auto_translation_enabled?: boolean;\n  auto_translation_language?: TranslationLanguages | '';\n  config?: ChannelConfigWithInfo<StreamChatGenerics>;\n  cooldown?: number;\n  created_at?: string;\n  created_by?: UserResponse<StreamChatGenerics> | null;\n  created_by_id?: string;\n  deleted_at?: string;\n  hidden?: boolean;\n  invites?: string[];\n  joined?: boolean;\n  last_message_at?: string;\n  member_count?: number;\n  members?: ChannelMemberResponse<StreamChatGenerics>[];\n  muted?: boolean;\n  name?: string;\n  own_capabilities?: string[];\n  team?: string;\n  truncated_at?: string;\n  truncated_by?: UserResponse<StreamChatGenerics>;\n  truncated_by_id?: string;\n  updated_at?: string;\n};\n\nexport type QueryReactionsOptions = Pager;\n\nexport type QueryReactionsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  reactions: ReactionResponse<StreamChatGenerics>[];\n  next?: string;\n};\n\nexport type QueryChannelsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channels: Omit<ChannelAPIResponse<StreamChatGenerics>, keyof APIResponse>[];\n};\n\nexport type QueryChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  ChannelAPIResponse<StreamChatGenerics>;\n\nexport type ChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  channel: ChannelResponse<StreamChatGenerics>;\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n  messages: MessageResponse<StreamChatGenerics>[];\n  pinned_messages: MessageResponse<StreamChatGenerics>[];\n  hidden?: boolean;\n  membership?: ChannelMemberResponse<StreamChatGenerics> | null;\n  pending_messages?: PendingMessageResponse<StreamChatGenerics>[];\n  push_preferences?: PushPreference;\n  read?: ReadResponse<StreamChatGenerics>[];\n  threads?: ThreadResponse[];\n  watcher_count?: number;\n  watchers?: UserResponse<StreamChatGenerics>[];\n};\n\nexport type ChannelUpdateOptions = {\n  hide_history?: boolean;\n  skip_push?: boolean;\n};\n\nexport type ChannelMemberAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n};\n\nexport type ChannelMemberUpdates<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['memberType'] & {\n  archived?: boolean;\n  channel_role?: Role;\n  pinned?: boolean;\n};\n\nexport type ChannelMemberResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['memberType'] & {\n  archived_at?: string;\n  ban_expires?: string;\n  banned?: boolean;\n  channel_role?: Role;\n  created_at?: string;\n  invite_accepted_at?: string;\n  invite_rejected_at?: string;\n  invited?: boolean;\n  is_moderator?: boolean;\n  notifications_muted?: boolean;\n  pinned_at?: string;\n  role?: string;\n  shadow_banned?: boolean;\n  status?: InviteStatus;\n  updated_at?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type PartialUpdateMemberAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  channel_member: ChannelMemberResponse<StreamChatGenerics>;\n};\n\nexport type CheckPushResponse = APIResponse & {\n  device_errors?: {\n    [deviceID: string]: {\n      error_message?: string;\n      provider?: PushProvider;\n      provider_name?: string;\n    };\n  };\n  general_errors?: string[];\n  rendered_apn_template?: string;\n  rendered_firebase_template?: string;\n  rendered_message?: {};\n  skip_devices?: boolean;\n};\n\nexport type CheckSQSResponse = APIResponse & {\n  status: string;\n  data?: {};\n  error?: string;\n};\n\nexport type CheckSNSResponse = APIResponse & {\n  status: string;\n  data?: {};\n  error?: string;\n};\n\nexport type CommandResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = Partial<CreatedAtUpdatedAt> & {\n  args?: string;\n  description?: string;\n  name?: CommandVariants<StreamChatGenerics>;\n  set?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type ConnectAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = Promise<void | ConnectionOpen<StreamChatGenerics>>;\n\nexport type CreateChannelResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id'> & {\n    created_at: string;\n    updated_at: string;\n    grants?: Record<string, string[]>;\n  };\n\nexport type CreateCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  command: CreateCommandOptions<StreamChatGenerics> & CreatedAtUpdatedAt;\n};\n\nexport type DeleteChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n};\n\nexport type DeleteCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  name?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type EventAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  event: Event<StreamChatGenerics>;\n};\n\nexport type ExportChannelResponse = {\n  task_id: string;\n};\n\nexport type ExportUsersResponse = {\n  task_id: string;\n};\n\nexport type ExportChannelStatusResponse = {\n  created_at?: string;\n  error?: {};\n  result?: {};\n  updated_at?: string;\n};\n\nexport type FlagMessageResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag: {\n    created_at: string;\n    created_by_automod: boolean;\n    target_message_id: string;\n    updated_at: string;\n    user: UserResponse<StreamChatGenerics>;\n    approved_at?: string;\n    channel_cid?: string;\n    details?: Object; // Any JSON\n    message_user_id?: string;\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: string;\n  };\n  review_queue_item_id?: string;\n};\n\nexport type FlagUserResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag: {\n    created_at: string;\n    created_by_automod: boolean;\n    target_user: UserResponse<StreamChatGenerics>;\n    updated_at: string;\n    user: UserResponse<StreamChatGenerics>;\n    approved_at?: string;\n    details?: Object; // Any JSON\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: string;\n  };\n  review_queue_item_id?: string;\n};\n\nexport type FormatMessageResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  MessageResponse<{\n    attachmentType: StreamChatGenerics['attachmentType'];\n    channelType: StreamChatGenerics['channelType'];\n    commandType: StreamChatGenerics['commandType'];\n    eventType: StreamChatGenerics['eventType'];\n    memberType: StreamChatGenerics['memberType'];\n    messageType: {};\n    pollOptionType: StreamChatGenerics['pollOptionType'];\n    pollType: StreamChatGenerics['pollType'];\n    reactionType: StreamChatGenerics['reactionType'];\n    userType: StreamChatGenerics['userType'];\n  }>,\n  'created_at' | 'pinned_at' | 'updated_at' | 'deleted_at' | 'status'\n> &\n  StreamChatGenerics['messageType'] & {\n    created_at: Date;\n    deleted_at: Date | null;\n    pinned_at: Date | null;\n    status: string;\n    updated_at: Date;\n  };\n\nexport type GetChannelTypeResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id' | 'commands'> & {\n    created_at: string;\n    updated_at: string;\n    commands?: CommandResponse<StreamChatGenerics>[];\n    grants?: Record<string, string[]>;\n  };\n\nexport type GetCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  CreateCommandOptions<StreamChatGenerics> &\n  CreatedAtUpdatedAt;\n\nexport type GetMessageAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = SendMessageAPIResponse<StreamChatGenerics>;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ThreadResponseCustomData {}\n\nexport interface ThreadResponse<SCG extends ExtendableGenerics = DefaultGenerics> extends ThreadResponseCustomData {\n  // FIXME: according to OpenAPI, `channel` could be undefined but since cid is provided I'll asume that it's wrong\n  channel: ChannelResponse<SCG>;\n  channel_cid: string;\n  created_at: string;\n  created_by_user_id: string;\n  latest_replies: Array<MessageResponse<SCG>>;\n  parent_message: MessageResponse<SCG>;\n  parent_message_id: string;\n  title: string;\n  updated_at: string;\n  active_participant_count?: number;\n  created_by?: UserResponse<SCG>;\n  deleted_at?: string;\n  last_message_at?: string;\n  participant_count?: number;\n  read?: Array<ReadResponse<SCG>>;\n  reply_count?: number;\n  thread_participants?: Array<{\n    channel_cid: string;\n    created_at: string;\n    last_read_at: string;\n    last_thread_message_at?: string;\n    left_thread_at?: string;\n    thread_id?: string;\n    user?: UserResponse<SCG>;\n    user_id?: string;\n  }>;\n  // TODO: when moving to API v2 we should do this instead\n  // custom: ThreadResponseCustomData;\n}\n\n// TODO: Figure out a way to strongly type set and unset.\nexport type PartialThreadUpdate = {\n  set?: Partial<Record<string, unknown>>;\n  unset?: Array<string>;\n};\n\nexport type QueryThreadsOptions = {\n  limit?: number;\n  member_limit?: number;\n  next?: string;\n  participant_limit?: number;\n  reply_limit?: number;\n  watch?: boolean;\n};\n\nexport type QueryThreadsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  threads: ThreadResponse<StreamChatGenerics>[];\n  next?: string;\n};\n\nexport type GetThreadOptions = {\n  member_limit?: number;\n  participant_limit?: number;\n  reply_limit?: number;\n  watch?: boolean;\n};\n\nexport type GetThreadAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  thread: ThreadResponse<StreamChatGenerics>;\n};\n\nexport type GetMultipleMessagesAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  messages: MessageResponse<StreamChatGenerics>[];\n};\n\nexport type GetRateLimitsResponse = APIResponse & {\n  android?: RateLimitsMap;\n  ios?: RateLimitsMap;\n  server_side?: RateLimitsMap;\n  web?: RateLimitsMap;\n};\n\nexport type GetReactionsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  reactions: ReactionResponse<StreamChatGenerics>[];\n};\n\nexport type GetRepliesAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  messages: MessageResponse<StreamChatGenerics>[];\n};\n\nexport type GetUnreadCountAPIResponse = APIResponse & {\n  channel_type: {\n    channel_count: number;\n    channel_type: string;\n    unread_count: number;\n  }[];\n  channels: {\n    channel_id: string;\n    last_read: string;\n    unread_count: number;\n  }[];\n  threads: {\n    last_read: string;\n    last_read_message_id: string;\n    parent_message_id: string;\n    unread_count: number;\n  }[];\n  total_unread_count: number;\n  total_unread_threads_count: number;\n};\n\nexport type ChatLevelPushPreference = 'all' | 'none' | 'mentions' | (string & {});\n\nexport type PushPreference = {\n  callLevel?: 'all' | 'none' | (string & {});\n  chatLevel?: ChatLevelPushPreference;\n  disabledUntil?: string; // snooze till this time\n  removeDisable?: boolean; // Temporary flag for resetting disabledUntil\n};\n\nexport type ChannelPushPreference = {\n  chatLevel?: ChatLevelPushPreference; // \"all\", \"none\", \"mentions\", or other custom strings\n  disabledUntil?: string;\n  removeDisable?: boolean; // Temporary flag for resetting disabledUntil\n};\n\nexport type UpsertPushPreferencesResponse = APIResponse & {\n  // Mapping of user IDs to their push preferences\n  userChannelPreferences: Record<string, Record<string, ChannelPushPreference>>;\n  userPreferences: Record<string, PushPreference>; // Mapping of user -> channel id -> push preferences\n};\n\nexport type GetUnreadCountBatchAPIResponse = APIResponse & {\n  counts_by_user: { [userId: string]: GetUnreadCountAPIResponse };\n};\n\nexport type ListChannelResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel_types: Record<\n    string,\n    Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id' | 'commands'> & {\n      commands: CommandResponse<StreamChatGenerics>[];\n      created_at: string;\n      updated_at: string;\n      grants?: Record<string, string[]>;\n    }\n  >;\n};\n\nexport type ListChannelTypesAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = ListChannelResponse<StreamChatGenerics>;\n\nexport type ListCommandsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  commands: Array<CreateCommandOptions<StreamChatGenerics> & Partial<CreatedAtUpdatedAt>>;\n};\n\nexport type MuteChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel_mute: ChannelMute<StreamChatGenerics>;\n  own_user: OwnUserResponse<StreamChatGenerics>;\n  channel_mutes?: ChannelMute<StreamChatGenerics>[];\n  mute?: MuteResponse<StreamChatGenerics>;\n};\n\nexport type MessageResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = MessageResponseBase<StreamChatGenerics> & {\n  quoted_message?: MessageResponseBase<StreamChatGenerics>;\n};\n\nexport type MessageResponseBase<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = MessageBase<StreamChatGenerics> & {\n  type: MessageLabel;\n  args?: string;\n  before_message_send_failed?: boolean;\n  channel?: ChannelResponse<StreamChatGenerics>;\n  cid?: string;\n  command?: string;\n  command_info?: { name?: string };\n  created_at?: string;\n  deleted_at?: string;\n  deleted_reply_count?: number;\n  i18n?: RequireAtLeastOne<Record<`${TranslationLanguages}_text`, string>> & {\n    language: TranslationLanguages;\n  };\n  latest_reactions?: ReactionResponse<StreamChatGenerics>[];\n  mentioned_users?: UserResponse<StreamChatGenerics>[];\n  message_text_updated_at?: string;\n  moderation?: ModerationResponse; // present only with Moderation v2\n  moderation_details?: ModerationDetailsResponse; // present only with Moderation v1\n  own_reactions?: ReactionResponse<StreamChatGenerics>[] | null;\n  pin_expires?: string | null;\n  pinned_at?: string | null;\n  pinned_by?: UserResponse<StreamChatGenerics> | null;\n  poll?: PollResponse<StreamChatGenerics>;\n  reaction_counts?: { [key: string]: number } | null;\n  reaction_groups?: { [key: string]: ReactionGroupResponse } | null;\n  reaction_scores?: { [key: string]: number } | null;\n  reply_count?: number;\n  shadowed?: boolean;\n  status?: string;\n  thread_participants?: UserResponse<StreamChatGenerics>[];\n  updated_at?: string;\n};\n\nexport type ReactionGroupResponse = {\n  count: number;\n  sum_scores: number;\n  first_reaction_at?: string;\n  last_reaction_at?: string;\n};\n\nexport type ModerationDetailsResponse = {\n  action: 'MESSAGE_RESPONSE_ACTION_BOUNCE' | (string & {});\n  error_msg: string;\n  harms: ModerationHarmResponse[];\n  original_text: string;\n};\n\nexport type ModerationHarmResponse = {\n  name: string;\n  phrase_list_ids: number[];\n};\n\nexport type ModerationAction = 'bounce' | 'flag' | 'remove' | 'shadow';\n\nexport type ModerationResponse = {\n  action: ModerationAction;\n  original_text: string;\n};\n\nexport type MuteResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  user: UserResponse<StreamChatGenerics>;\n  created_at?: string;\n  expires?: string;\n  target?: UserResponse<StreamChatGenerics>;\n  updated_at?: string;\n};\n\nexport type MuteUserResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  mute?: MuteResponse<StreamChatGenerics>;\n  mutes?: Array<Mute<StreamChatGenerics>>;\n  own_user?: OwnUserResponse<StreamChatGenerics>;\n};\n\nexport type BlockUserAPIResponse = APIResponse & {\n  blocked_at: string;\n  blocked_by_user_id: string;\n  blocked_user_id: string;\n};\n\nexport type GetBlockedUsersAPIResponse = APIResponse & {\n  blocks: BlockedUserDetails[];\n};\nexport type BlockedUserDetails = APIResponse & {\n  blocked_user: UserResponse;\n  blocked_user_id: string;\n  created_at: string;\n  user: UserResponse;\n  user_id: string;\n};\n\nexport type OwnUserBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  channel_mutes: ChannelMute<StreamChatGenerics>[];\n  devices: Device<StreamChatGenerics>[];\n  mutes: Mute<StreamChatGenerics>[];\n  total_unread_count: number;\n  unread_channels: number;\n  unread_count: number;\n  unread_threads: number;\n  invisible?: boolean;\n  privacy_settings?: PrivacySettings;\n  push_preferences?: PushPreference;\n  roles?: string[];\n};\n\nexport type OwnUserResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = UserResponse<StreamChatGenerics> & OwnUserBase<StreamChatGenerics>;\n\nexport type PartialUpdateChannelAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n};\n\nexport type PermissionAPIResponse = APIResponse & {\n  permission?: PermissionAPIObject;\n};\n\nexport type PermissionsAPIResponse = APIResponse & {\n  permissions?: PermissionAPIObject[];\n};\n\nexport type ReactionAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  message: MessageResponse<StreamChatGenerics>;\n  reaction: ReactionResponse<StreamChatGenerics>;\n};\n\nexport type ReactionResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = Reaction<StreamChatGenerics> & {\n  created_at: string;\n  message_id: string;\n  updated_at: string;\n};\n\nexport type ReadResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  last_read: string;\n  user: UserResponse<StreamChatGenerics>;\n  last_read_message_id?: string;\n  unread_messages?: number;\n};\n\nexport type SearchAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  results: {\n    message: MessageResponse<StreamChatGenerics>;\n  }[];\n  next?: string;\n  previous?: string;\n  results_warning?: SearchWarning | null;\n};\n\nexport type SearchWarning = {\n  channel_search_cids: string[];\n  channel_search_count: number;\n  warning_code: number;\n  warning_description: string;\n};\n\n// Thumb URL(thumb_url) is added considering video attachments as the backend will return the thumbnail in the response.\nexport type SendFileAPIResponse = APIResponse & { file: string; thumb_url?: string };\n\nexport type SendMessageAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  message: MessageResponse<StreamChatGenerics>;\n  pending_message_metadata?: Record<string, string> | null;\n};\n\nexport type SyncResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  events: Event<StreamChatGenerics>[];\n  inaccessible_cids?: string[];\n};\n\nexport type TruncateChannelAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n  message?: MessageResponse<StreamChatGenerics>;\n};\n\nexport type UpdateChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n  message?: MessageResponse<StreamChatGenerics>;\n};\n\nexport type UpdateChannelResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id'> & {\n    created_at: string;\n    updated_at: string;\n  };\n\nexport type UpdateCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  command: UpdateCommandOptions<StreamChatGenerics> &\n    CreatedAtUpdatedAt & {\n      name: CommandVariants<StreamChatGenerics>;\n    };\n};\n\nexport type UpdateMessageAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  message: MessageResponse<StreamChatGenerics>;\n};\n\nexport type UsersAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  users: Array<UserResponse<StreamChatGenerics>>;\n};\n\nexport type UpdateUsersAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  users: { [key: string]: UserResponse<StreamChatGenerics> };\n};\n\nexport type UserResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = User<StreamChatGenerics> & {\n  banned?: boolean;\n  blocked_user_ids?: string[];\n  created_at?: string;\n  deactivated_at?: string;\n  deleted_at?: string;\n  language?: TranslationLanguages | '';\n  last_active?: string;\n  online?: boolean;\n  privacy_settings?: PrivacySettings;\n  push_notifications?: PushNotificationSettings;\n  revoke_tokens_issued_before?: string;\n  shadow_banned?: boolean;\n  updated_at?: string;\n};\n\nexport type PrivacySettings = {\n  read_receipts?: {\n    enabled?: boolean;\n  };\n  typing_indicators?: {\n    enabled?: boolean;\n  };\n};\n\nexport type PushNotificationSettings = {\n  disabled?: boolean;\n  disabled_until?: string | null;\n};\n\n/**\n * Option Types\n */\n\nexport type MessageFlagsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type FlagsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type FlagReportsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type ReviewFlagReportOptions = {\n  review_details?: Object;\n  user_id?: string;\n};\n\nexport type BannedUsersPaginationOptions = Omit<PaginationOptions, 'id_gt' | 'id_gte' | 'id_lt' | 'id_lte'> & {\n  exclude_expired_bans?: boolean;\n};\n\nexport type BanUserOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = UnBanUserOptions & {\n  banned_by?: UserResponse<StreamChatGenerics>;\n  banned_by_id?: string;\n  ip_ban?: boolean;\n  reason?: string;\n  timeout?: number;\n};\n\nexport type ChannelOptions = {\n  limit?: number;\n  member_limit?: number;\n  message_limit?: number;\n  offset?: number;\n  presence?: boolean;\n  state?: boolean;\n  user_id?: string;\n  watch?: boolean;\n};\n\nexport type ChannelQueryOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  data?: ChannelResponse<StreamChatGenerics>;\n  hide_for_creator?: boolean;\n  members?: PaginationOptions;\n  messages?: MessagePaginationOptions;\n  presence?: boolean;\n  state?: boolean;\n  watch?: boolean;\n  watchers?: PaginationOptions;\n};\n\nexport type ChannelStateOptions = {\n  offlineMode?: boolean;\n  skipInitialization?: string[];\n};\n\nexport type CreateChannelOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  automod?: ChannelConfigAutomod;\n  automod_behavior?: ChannelConfigAutomodBehavior;\n  automod_thresholds?: ChannelConfigAutomodThresholds;\n  blocklist?: string;\n  blocklist_behavior?: ChannelConfigAutomodBehavior;\n  client_id?: string;\n  commands?: CommandVariants<StreamChatGenerics>[];\n  connect_events?: boolean;\n  connection_id?: string;\n  custom_events?: boolean;\n  grants?: Record<string, string[]>;\n  mark_messages_pending?: boolean;\n  max_message_length?: number;\n  message_retention?: string;\n  mutes?: boolean;\n  name?: string;\n  permissions?: PermissionObject[];\n  polls?: boolean;\n  push_notifications?: boolean;\n  quotes?: boolean;\n  reactions?: boolean;\n  read_events?: boolean;\n  reminders?: boolean;\n  replies?: boolean;\n  search?: boolean;\n  skip_last_msg_update_for_system_msgs?: boolean;\n  typing_events?: boolean;\n  uploads?: boolean;\n  url_enrichment?: boolean;\n};\n\nexport type CreateCommandOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  description: string;\n  name: CommandVariants<StreamChatGenerics>;\n  args?: string;\n  set?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type CustomPermissionOptions = {\n  action: string;\n  condition: object;\n  id: string;\n  name: string;\n  description?: string;\n  owner?: boolean;\n  same_team?: boolean;\n};\n\nexport type DeactivateUsersOptions = {\n  created_by_id?: string;\n  mark_messages_deleted?: boolean;\n};\n\nexport type NewMemberPayload<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['memberType'] & Pick<ChannelMemberResponse<StreamChatGenerics>, 'user_id' | 'channel_role'>;\n\n// TODO: rename to UpdateChannelOptions in the next major update and use it in channel._update and/or channel.update\nexport type InviteOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  accept_invite?: boolean;\n  add_members?: string[];\n  add_moderators?: string[];\n  client_id?: string;\n  connection_id?: string;\n  data?: Omit<ChannelResponse<StreamChatGenerics>, 'id' | 'cid'>;\n  demote_moderators?: string[];\n  invites?: string[];\n  message?: MessageResponse<StreamChatGenerics>;\n  reject_invite?: boolean;\n  remove_members?: string[];\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\n/** @deprecated use MarkChannelsReadOptions instead */\nexport type MarkAllReadOptions<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = MarkChannelsReadOptions<StreamChatGenerics>;\n\nexport type MarkChannelsReadOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  read_by_channel?: Record<string, string>;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type MarkReadOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  thread_id?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type MarkUnreadOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  message_id?: string;\n  thread_id?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type MuteUserOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  id?: string;\n  reason?: string;\n  target_user_id?: string;\n  timeout?: number;\n  type?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type PaginationOptions = {\n  created_at_after?: string | Date;\n  created_at_after_or_equal?: string | Date;\n  created_at_before?: string | Date;\n  created_at_before_or_equal?: string | Date;\n  id_gt?: string;\n  id_gte?: string;\n  id_lt?: string;\n  id_lte?: string;\n  limit?: number;\n  offset?: number; // should be avoided with channel.query()\n};\n\nexport type MessagePaginationOptions = PaginationOptions & {\n  created_at_around?: string | Date;\n  id_around?: string;\n};\n\nexport type PinnedMessagePaginationOptions = {\n  id_around?: string;\n  id_gt?: string;\n  id_gte?: string;\n  id_lt?: string;\n  id_lte?: string;\n  limit?: number;\n  offset?: number;\n  pinned_at_after?: string | Date;\n  pinned_at_after_or_equal?: string | Date;\n  pinned_at_around?: string | Date;\n  pinned_at_before?: string | Date;\n  pinned_at_before_or_equal?: string | Date;\n};\n\nexport type QueryMembersOptions = {\n  // Pagination option: select members created after the date (RFC399)\n  created_at_after?: string;\n  // Pagination option: select members created after or equal the date (RFC399)\n  created_at_after_or_equal?: string;\n  // Pagination option: select members created before the date (RFC399)\n  created_at_before?: string;\n  // Pagination option: select members created before or equal the date (RFC399)\n  created_at_before_or_equal?: string;\n  // Number of members to return, default 100\n  limit?: number;\n  // Offset (max is 1000)\n  offset?: number;\n  // \tPagination option: excludes members with ID less or equal the value\n  user_id_gt?: string;\n  // Pagination option: excludes members with ID less than the value\n  user_id_gte?: string;\n  // Pagination option: excludes members with ID greater or equal the value\n  user_id_lt?: string;\n  // \tPagination option: excludes members with ID greater than the value\n  user_id_lte?: string;\n};\n\nexport type ReactivateUserOptions = {\n  created_by_id?: string;\n  name?: string;\n  restore_messages?: boolean;\n};\n\nexport type ReactivateUsersOptions = {\n  created_by_id?: string;\n  restore_messages?: boolean;\n};\n\nexport type SearchOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  limit?: number;\n  next?: string;\n  offset?: number;\n  sort?: SearchMessageSort<StreamChatGenerics>;\n};\n\nexport type StreamChatOptions = AxiosRequestConfig & {\n  /**\n   * Used to disable warnings that are triggered by using connectUser or connectAnonymousUser server-side.\n   */\n  allowServerSideConnect?: boolean;\n  axiosRequestConfig?: AxiosRequestConfig;\n  /**\n   * Base url to use for API\n   * such as https://chat-proxy-dublin.stream-io-api.com\n   */\n  baseURL?: string;\n  browser?: boolean;\n  device?: BaseDeviceFields;\n  /**\n   * Disables the hydration of all caches within the JS Client. This includes this.activeChannels,\n   * this.polls.pollCache and this.config.\n   * It is mainly meant to be used for integrations where stream-chat is used as a server-side service\n   * interacting with Stream's REST API, not depending on any state and purely serving as a wrapper\n   * around HTTP requests. Using this property on either the client side or a backend implementation\n   * that also relies on WS events will break these functionalities, so please use carefully.\n   */\n  disableCache?: boolean;\n  enableInsights?: boolean;\n  /** experimental feature, please contact support if you want this feature enabled for you */\n  enableWSFallback?: boolean;\n  logger?: Logger;\n  /**\n   * When true, user will be persisted on client. Otherwise if `connectUser` call fails, then you need to\n   * call `connectUser` again to retry.\n   * This is mainly useful for chat application working in offline mode, where you will need client.user to\n   * persist even if connectUser call fails.\n   */\n  persistUserOnConnectionFailure?: boolean;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guaranteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't rely on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  warmUp?: boolean;\n  /**\n   * Set the instance of StableWSConnection on chat client. Its purely for testing purpose and should\n   * not be used in production apps.\n   */\n  wsConnection?: StableWSConnection;\n};\n\nexport type SyncOptions = {\n  /**\n   * This will behave as queryChannels option.\n   */\n  watch?: boolean;\n  /**\n   * Return channels from request that user does not have access to in a separate\n   * field in the response called 'inaccessible_cids' instead of\n   * adding them as 'notification.removed_from_channel' events.\n   */\n  with_inaccessible_cids?: boolean;\n};\n\nexport type UnBanUserOptions = {\n  client_id?: string;\n  connection_id?: string;\n  id?: string;\n  shadow?: boolean;\n  target_user_id?: string;\n  type?: string;\n};\n\n// TODO: rename to UpdateChannelTypeOptions in the next major update\nexport type UpdateChannelOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  CreateChannelOptions<StreamChatGenerics>,\n  'name'\n> & {\n  created_at?: string;\n  updated_at?: string;\n};\n\nexport type UpdateCommandOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  description: string;\n  args?: string;\n  set?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type UserOptions = {\n  include_deactivated_users?: boolean;\n  limit?: number;\n  offset?: number;\n  presence?: boolean;\n};\n\n/**\n * Event Types\n */\n\nexport type ConnectionChangeEvent = {\n  type: EventTypes;\n  online?: boolean;\n};\n\nexport type Event<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = StreamChatGenerics['eventType'] & {\n  type: EventTypes;\n  ai_message?: string;\n  ai_state?: AIState;\n  channel?: ChannelResponse<StreamChatGenerics>;\n  channel_id?: string;\n  channel_type?: string;\n  cid?: string;\n  clear_history?: boolean;\n  connection_id?: string;\n  // event creation timestamp, format Date ISO string\n  created_at?: string;\n  // id of the message that was marked as unread - all the following messages are considered unread. (notification.mark_unread)\n  first_unread_message_id?: string;\n  hard_delete?: boolean;\n  // creation date of a message with last_read_message_id, formatted as Date ISO string\n  last_read_at?: string;\n  last_read_message_id?: string;\n  mark_messages_deleted?: boolean;\n  me?: OwnUserResponse<StreamChatGenerics>;\n  member?: ChannelMemberResponse<StreamChatGenerics>;\n  message?: MessageResponse<StreamChatGenerics>;\n  message_id?: string;\n  mode?: string;\n  online?: boolean;\n  parent_id?: string;\n  poll?: PollResponse<StreamChatGenerics>;\n  poll_vote?: PollVote<StreamChatGenerics> | PollAnswer<StreamChatGenerics>;\n  queriedChannels?: {\n    channels: ChannelAPIResponse<StreamChatGenerics>[];\n    isLatestMessageSet?: boolean;\n  };\n  reaction?: ReactionResponse<StreamChatGenerics>;\n  received_at?: string | Date;\n  team?: string;\n  thread?: ThreadResponse<StreamChatGenerics>;\n  // @deprecated number of all unread messages across all current user's unread channels, equals unread_count\n  total_unread_count?: number;\n  // number of all current user's channels with at least one unread message including the channel in this event\n  unread_channels?: number;\n  // number of all unread messages across all current user's unread channels\n  unread_count?: number;\n  // number of unread messages in the channel from this event (notification.mark_unread)\n  unread_messages?: number;\n  unread_thread_messages?: number;\n  unread_threads?: number;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n  watcher_count?: number;\n};\n\nexport type UserCustomEvent<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['eventType'] & {\n  type: string;\n};\n\nexport type EventHandler<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = (\n  event: Event<StreamChatGenerics>,\n) => void;\n\nexport type EventTypes = 'all' | keyof typeof EVENT_MAP;\n\n/**\n * Filter Types\n */\n\nexport type AscDesc = 1 | -1;\n\nexport type MessageFlagsFiltersOptions = {\n  channel_cid?: string;\n  is_reviewed?: boolean;\n  team?: string;\n  user_id?: string;\n};\n\nexport type MessageFlagsFilters = QueryFilters<\n  {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageFlagsFiltersOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageFlagsFiltersOptions['channel_cid']>;\n  } & {\n    team?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageFlagsFiltersOptions['team']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageFlagsFiltersOptions['team']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageFlagsFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageFlagsFiltersOptions['user_id']>;\n  } & {\n      [Key in keyof Omit<MessageFlagsFiltersOptions, 'channel_cid' | 'user_id' | 'is_reviewed'>]:\n        | RequireOnlyOne<QueryFilter<MessageFlagsFiltersOptions[Key]>>\n        | PrimitiveFilter<MessageFlagsFiltersOptions[Key]>;\n    }\n>;\n\nexport type FlagsFiltersOptions = {\n  channel_cid?: string;\n  message_id?: string;\n  message_user_id?: string;\n  reporter_id?: string;\n  team?: string;\n  user_id?: string;\n};\n\nexport type FlagsFilters = QueryFilters<\n  {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['user_id']>;\n  } & {\n    message_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['message_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['message_id']>;\n  } & {\n    message_user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['message_user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['message_user_id']>;\n  } & {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['channel_cid']>;\n  } & {\n    reporter_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['reporter_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['reporter_id']>;\n  } & {\n    team?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['team']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['team']>;\n  }\n>;\n\nexport type FlagReportsFiltersOptions = {\n  channel_cid?: string;\n  is_reviewed?: boolean;\n  message_id?: string;\n  message_user_id?: string;\n  report_id?: string;\n  review_result?: string;\n  reviewed_by?: string;\n  team?: string;\n  user_id?: string;\n};\n\nexport type FlagReportsFilters = QueryFilters<\n  {\n    report_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['report_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['report_id']>;\n  } & {\n    review_result?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['review_result']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['review_result']>;\n  } & {\n    reviewed_by?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['reviewed_by']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['reviewed_by']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['user_id']>;\n  } & {\n    message_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['message_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['message_id']>;\n  } & {\n    message_user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['message_user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['message_user_id']>;\n  } & {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['channel_cid']>;\n  } & {\n    team?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['team']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['team']>;\n  } & {\n      [Key in keyof Omit<\n        FlagReportsFiltersOptions,\n        'report_id' | 'user_id' | 'message_id' | 'review_result' | 'reviewed_by'\n      >]: RequireOnlyOne<QueryFilter<FlagReportsFiltersOptions[Key]>> | PrimitiveFilter<FlagReportsFiltersOptions[Key]>;\n    }\n>;\n\nexport type BannedUsersFilterOptions = {\n  banned_by_id?: string;\n  channel_cid?: string;\n  created_at?: string;\n  reason?: string;\n  user_id?: string;\n};\n\nexport type BannedUsersFilters = QueryFilters<\n  {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<BannedUsersFilterOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<BannedUsersFilterOptions['channel_cid']>;\n  } & {\n    reason?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: BannedUsersFilterOptions['reason'];\n          } & QueryFilter<BannedUsersFilterOptions['reason']>\n        >\n      | PrimitiveFilter<BannedUsersFilterOptions['reason']>;\n  } & {\n      [Key in keyof Omit<BannedUsersFilterOptions, 'channel_cid' | 'reason'>]:\n        | RequireOnlyOne<QueryFilter<BannedUsersFilterOptions[Key]>>\n        | PrimitiveFilter<BannedUsersFilterOptions[Key]>;\n    }\n>;\n\nexport type ReactionFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<ReactionResponse<StreamChatGenerics>['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReactionResponse<StreamChatGenerics>['user_id']>;\n  } & {\n    type?:\n      | RequireOnlyOne<Pick<QueryFilter<ReactionResponse<StreamChatGenerics>['type']>, '$eq'>>\n      | PrimitiveFilter<ReactionResponse<StreamChatGenerics>['type']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<PollResponse['created_at']>;\n  }\n>;\n\nexport type ChannelFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  ContainsOperator<StreamChatGenerics['channelType']> & {\n    members?:\n      | RequireOnlyOne<Pick<QueryFilter<string>, '$in' | '$nin'>>\n      | RequireOnlyOne<Pick<QueryFilter<string[]>, '$eq'>>\n      | PrimitiveFilter<string[]>;\n  } & {\n    name?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: ChannelResponse<StreamChatGenerics>['name'];\n          } & QueryFilter<ChannelResponse<StreamChatGenerics>['name']>\n        >\n      | PrimitiveFilter<ChannelResponse<StreamChatGenerics>['name']>;\n  } & {\n      [Key in keyof Omit<\n        ChannelResponse<{\n          attachmentType: StreamChatGenerics['attachmentType'];\n          channelType: {};\n          commandType: StreamChatGenerics['commandType'];\n          eventType: StreamChatGenerics['eventType'];\n          memberType: StreamChatGenerics['memberType'];\n          messageType: StreamChatGenerics['messageType'];\n          pollOptionType: StreamChatGenerics['pollOptionType'];\n          pollType: StreamChatGenerics['pollType'];\n          reactionType: StreamChatGenerics['reactionType'];\n          userType: StreamChatGenerics['userType'];\n        }>,\n        'name' | 'members'\n      >]:\n        | RequireOnlyOne<\n            QueryFilter<\n              ChannelResponse<{\n                attachmentType: StreamChatGenerics['attachmentType'];\n                channelType: {};\n                commandType: StreamChatGenerics['commandType'];\n                eventType: StreamChatGenerics['eventType'];\n                memberType: StreamChatGenerics['memberType'];\n                messageType: StreamChatGenerics['messageType'];\n                pollOptionType: StreamChatGenerics['pollOptionType'];\n                pollType: StreamChatGenerics['pollType'];\n                reactionType: StreamChatGenerics['reactionType'];\n                userType: StreamChatGenerics['userType'];\n              }>[Key]\n            >\n          >\n        | PrimitiveFilter<\n            ChannelResponse<{\n              attachmentType: StreamChatGenerics['attachmentType'];\n              channelType: {};\n              commandType: StreamChatGenerics['commandType'];\n              eventType: StreamChatGenerics['eventType'];\n              memberType: StreamChatGenerics['memberType'];\n              messageType: StreamChatGenerics['messageType'];\n              pollOptionType: StreamChatGenerics['pollOptionType'];\n              pollType: StreamChatGenerics['pollType'];\n              reactionType: StreamChatGenerics['reactionType'];\n              userType: StreamChatGenerics['userType'];\n            }>[Key]\n          >;\n    } & {\n      archived?: boolean;\n      pinned?: boolean;\n    }\n>;\n\nexport type QueryPollsParams = {\n  filter?: QueryPollsFilters;\n  options?: QueryPollsOptions;\n  sort?: PollSort;\n};\n\nexport type QueryPollsOptions = Pager;\n\nexport type VotesFiltersOptions = {\n  is_answer?: boolean;\n  option_id?: string;\n  user_id?: string;\n};\n\nexport type QueryVotesOptions = Pager;\n\nexport type QueryPollsFilters = QueryFilters<\n  {\n    id?: RequireOnlyOne<Pick<QueryFilter<PollResponse['id']>, '$eq' | '$in'>> | PrimitiveFilter<PollResponse['id']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<VotesFiltersOptions['user_id']>;\n  } & {\n    is_closed?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['is_closed']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['is_closed']>;\n  } & {\n    max_votes_allowed?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<PollResponse['max_votes_allowed']>, '$eq' | '$ne' | '$gt' | '$lt' | '$gte' | '$lte'>\n        >\n      | PrimitiveFilter<PollResponse['max_votes_allowed']>;\n  } & {\n    allow_answers?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['allow_answers']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['allow_answers']>;\n  } & {\n    allow_user_suggested_options?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['allow_user_suggested_options']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['allow_user_suggested_options']>;\n  } & {\n    voting_visibility?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['voting_visibility']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['voting_visibility']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<PollResponse['created_at']>;\n  } & {\n    created_by_id?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_by_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['created_by_id']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['updated_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<PollResponse['updated_at']>;\n  } & {\n    name?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['name']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['name']>;\n  }\n>;\n\nexport type QueryVotesFilters = QueryFilters<\n  {\n    id?: RequireOnlyOne<Pick<QueryFilter<PollResponse['id']>, '$eq' | '$in'>> | PrimitiveFilter<PollResponse['id']>;\n  } & {\n    option_id?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['option_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<VotesFiltersOptions['option_id']>;\n  } & {\n    is_answer?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['is_answer']>, '$eq'>>\n      | PrimitiveFilter<VotesFiltersOptions['is_answer']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<VotesFiltersOptions['user_id']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<PollResponse['created_at']>;\n  } & {\n    created_by_id?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_by_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['created_by_id']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['updated_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<PollResponse['updated_at']>;\n  }\n>;\n\nexport type ContainsOperator<CustomType = {}> = {\n  [Key in keyof CustomType]?: CustomType[Key] extends (infer ContainType)[]\n    ?\n        | RequireOnlyOne<\n            {\n              $contains?: ContainType extends object\n                ? PrimitiveFilter<RequireAtLeastOne<ContainType>>\n                : PrimitiveFilter<ContainType>;\n            } & QueryFilter<PrimitiveFilter<ContainType>[]>\n          >\n        | PrimitiveFilter<PrimitiveFilter<ContainType>[]>\n    : RequireOnlyOne<QueryFilter<CustomType[Key]>> | PrimitiveFilter<CustomType[Key]>;\n};\n\nexport type MessageFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  ContainsOperator<StreamChatGenerics['messageType']> & {\n    text?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: MessageResponse<StreamChatGenerics>['text'];\n            $q?: MessageResponse<StreamChatGenerics>['text'];\n          } & QueryFilter<MessageResponse<StreamChatGenerics>['text']>\n        >\n      | PrimitiveFilter<MessageResponse<StreamChatGenerics>['text']>;\n  } & {\n      [Key in keyof Omit<\n        MessageResponse<{\n          attachmentType: StreamChatGenerics['attachmentType'];\n          channelType: StreamChatGenerics['channelType'];\n          commandType: StreamChatGenerics['commandType'];\n          eventType: StreamChatGenerics['eventType'];\n          memberType: StreamChatGenerics['memberType'];\n          messageType: {};\n          pollOptionType: StreamChatGenerics['pollOptionType'];\n          pollType: StreamChatGenerics['pollType'];\n          reactionType: StreamChatGenerics['reactionType'];\n          userType: StreamChatGenerics['userType'];\n        }>,\n        'text'\n      >]?:\n        | RequireOnlyOne<\n            QueryFilter<\n              MessageResponse<{\n                attachmentType: StreamChatGenerics['attachmentType'];\n                channelType: StreamChatGenerics['channelType'];\n                commandType: StreamChatGenerics['commandType'];\n                eventType: StreamChatGenerics['eventType'];\n                memberType: StreamChatGenerics['memberType'];\n                messageType: {};\n                pollOptionType: StreamChatGenerics['pollOptionType'];\n                pollType: StreamChatGenerics['pollType'];\n                reactionType: StreamChatGenerics['reactionType'];\n                userType: StreamChatGenerics['userType'];\n              }>[Key]\n            >\n          >\n        | PrimitiveFilter<\n            MessageResponse<{\n              attachmentType: StreamChatGenerics['attachmentType'];\n              channelType: StreamChatGenerics['channelType'];\n              commandType: StreamChatGenerics['commandType'];\n              eventType: StreamChatGenerics['eventType'];\n              memberType: StreamChatGenerics['memberType'];\n              messageType: {};\n              pollOptionType: StreamChatGenerics['pollOptionType'];\n              pollType: StreamChatGenerics['pollType'];\n              reactionType: StreamChatGenerics['reactionType'];\n              userType: StreamChatGenerics['userType'];\n            }>[Key]\n          >;\n    }\n>;\n\nexport type MessageOptions = {\n  include_thread_participants?: boolean;\n};\n\nexport type PrimitiveFilter<ObjectType> = ObjectType | null;\n\nexport type QueryFilter<ObjectType = string> = NonNullable<ObjectType> extends string | number | boolean\n  ? {\n      $eq?: PrimitiveFilter<ObjectType>;\n      $exists?: boolean;\n      $gt?: PrimitiveFilter<ObjectType>;\n      $gte?: PrimitiveFilter<ObjectType>;\n      $in?: PrimitiveFilter<ObjectType>[];\n      $lt?: PrimitiveFilter<ObjectType>;\n      $lte?: PrimitiveFilter<ObjectType>;\n      /**\n       * @deprecated and will be removed in a future release. Filtering shall be applied client-side.\n       */\n      $ne?: PrimitiveFilter<ObjectType>;\n      /**\n       * @deprecated and will be removed in a future release. Filtering shall be applied client-side.\n       */\n      $nin?: PrimitiveFilter<ObjectType>[];\n    }\n  : {\n      $eq?: PrimitiveFilter<ObjectType>;\n      $exists?: boolean;\n      $in?: PrimitiveFilter<ObjectType>[];\n      /**\n       * @deprecated and will be removed in a future release. Filtering shall be applied client-side.\n       */\n      $ne?: PrimitiveFilter<ObjectType>;\n      /**\n       * @deprecated and will be removed in a future release. Filtering shall be applied client-side.\n       */\n      $nin?: PrimitiveFilter<ObjectType>[];\n    };\n\nexport type QueryFilters<Operators = {}> = {\n  [Key in keyof Operators]?: Operators[Key];\n} &\n  QueryLogicalOperators<Operators>;\n\nexport type QueryLogicalOperators<Operators> = {\n  $and?: ArrayOneOrMore<QueryFilters<Operators>>;\n  $nor?: ArrayOneOrMore<QueryFilters<Operators>>;\n  $or?: ArrayTwoOrMore<QueryFilters<Operators>>;\n};\n\nexport type UserFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  ContainsOperator<StreamChatGenerics['userType']> & {\n    id?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse<StreamChatGenerics>['id'] } & QueryFilter<\n            UserResponse<StreamChatGenerics>['id']\n          >\n        >\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['id']>;\n    name?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse<StreamChatGenerics>['name'] } & QueryFilter<\n            UserResponse<StreamChatGenerics>['name']\n          >\n        >\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['name']>;\n    notifications_muted?:\n      | RequireOnlyOne<{\n          $eq?: PrimitiveFilter<UserResponse<StreamChatGenerics>['notifications_muted']>;\n        }>\n      | boolean;\n    teams?:\n      | RequireOnlyOne<{\n          $contains?: PrimitiveFilter<string>;\n          $eq?: PrimitiveFilter<UserResponse<StreamChatGenerics>['teams']>;\n          $in?: PrimitiveFilter<UserResponse<StreamChatGenerics>['teams']>;\n        }>\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['teams']>;\n    username?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse<StreamChatGenerics>['username'] } & QueryFilter<\n            UserResponse<StreamChatGenerics>['username']\n          >\n        >\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['username']>;\n  } & {\n      [Key in keyof Omit<\n        UserResponse<{\n          attachmentType: StreamChatGenerics['attachmentType'];\n          channelType: StreamChatGenerics['channelType'];\n          commandType: StreamChatGenerics['commandType'];\n          eventType: StreamChatGenerics['eventType'];\n          memberType: StreamChatGenerics['memberType'];\n          messageType: StreamChatGenerics['messageType'];\n          pollOptionType: StreamChatGenerics['pollOptionType'];\n          pollType: StreamChatGenerics['pollType'];\n          reactionType: StreamChatGenerics['reactionType'];\n          userType: {};\n        }>,\n        'id' | 'name' | 'teams' | 'username'\n      >]?:\n        | RequireOnlyOne<\n            QueryFilter<\n              UserResponse<{\n                attachmentType: StreamChatGenerics['attachmentType'];\n                channelType: StreamChatGenerics['channelType'];\n                commandType: StreamChatGenerics['commandType'];\n                eventType: StreamChatGenerics['eventType'];\n                memberType: StreamChatGenerics['memberType'];\n                messageType: StreamChatGenerics['messageType'];\n                pollOptionType: StreamChatGenerics['pollOptionType'];\n                pollType: StreamChatGenerics['pollType'];\n                reactionType: StreamChatGenerics['reactionType'];\n                userType: {};\n              }>[Key]\n            >\n          >\n        | PrimitiveFilter<\n            UserResponse<{\n              attachmentType: StreamChatGenerics['attachmentType'];\n              channelType: StreamChatGenerics['channelType'];\n              commandType: StreamChatGenerics['commandType'];\n              eventType: StreamChatGenerics['eventType'];\n              memberType: StreamChatGenerics['memberType'];\n              messageType: StreamChatGenerics['messageType'];\n              pollOptionType: StreamChatGenerics['pollOptionType'];\n              pollType: StreamChatGenerics['pollType'];\n              reactionType: StreamChatGenerics['reactionType'];\n              userType: {};\n            }>[Key]\n          >;\n    }\n>;\n\nexport type InviteStatus = 'pending' | 'accepted' | 'rejected';\n\n// https://getstream.io/chat/docs/react/channel_member/#update-channel-members\nexport type MemberFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  {\n    banned?:\n      | { $eq?: ChannelMemberResponse<StreamChatGenerics>['banned'] }\n      | ChannelMemberResponse<StreamChatGenerics>['banned'];\n    channel_role?:\n      | { $eq?: ChannelMemberResponse<StreamChatGenerics>['channel_role'] }\n      | ChannelMemberResponse<StreamChatGenerics>['channel_role'];\n    cid?: { $eq?: ChannelResponse<StreamChatGenerics>['cid'] } | ChannelResponse<StreamChatGenerics>['cid'];\n    created_at?:\n      | {\n          $eq?: ChannelMemberResponse<StreamChatGenerics>['created_at'];\n          $gt?: ChannelMemberResponse<StreamChatGenerics>['created_at'];\n          $gte?: ChannelMemberResponse<StreamChatGenerics>['created_at'];\n          $lt?: ChannelMemberResponse<StreamChatGenerics>['created_at'];\n          $lte?: ChannelMemberResponse<StreamChatGenerics>['created_at'];\n        }\n      | ChannelMemberResponse<StreamChatGenerics>['created_at'];\n    id?:\n      | RequireOnlyOne<{\n          $eq?: UserResponse<StreamChatGenerics>['id'];\n          $in?: UserResponse<StreamChatGenerics>['id'][];\n        }>\n      | UserResponse<StreamChatGenerics>['id'];\n    invite?:\n      | { $eq?: ChannelMemberResponse<StreamChatGenerics>['status'] }\n      | ChannelMemberResponse<StreamChatGenerics>['status'];\n    joined?: { $eq?: boolean } | boolean;\n    last_active?:\n      | {\n          $eq?: UserResponse<StreamChatGenerics>['last_active'];\n          $gt?: UserResponse<StreamChatGenerics>['last_active'];\n          $gte?: UserResponse<StreamChatGenerics>['last_active'];\n          $lt?: UserResponse<StreamChatGenerics>['last_active'];\n          $lte?: UserResponse<StreamChatGenerics>['last_active'];\n        }\n      | UserResponse<StreamChatGenerics>['last_active'];\n    name?:\n      | RequireOnlyOne<{\n          $autocomplete?: ChannelMemberResponse<StreamChatGenerics>['name'];\n          $eq?: ChannelMemberResponse<StreamChatGenerics>['name'];\n          $in?: ChannelMemberResponse<StreamChatGenerics>['name'][];\n          $q?: ChannelMemberResponse<StreamChatGenerics>['name'];\n        }>\n      | PrimitiveFilter<ChannelMemberResponse<StreamChatGenerics>['name']>;\n    updated_at?:\n      | {\n          $eq?: ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n          $gt?: ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n          $gte?: ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n          $lt?: ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n          $lte?: ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n        }\n      | ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n    'user.email'?:\n      | RequireOnlyOne<{\n          $autocomplete?: string;\n          $eq?: string;\n          $in?: string;\n        }>\n      | string;\n    user_id?:\n      | RequireOnlyOne<{\n          $eq?: ChannelMemberResponse<StreamChatGenerics>['user_id'];\n          $in?: ChannelMemberResponse<StreamChatGenerics>['user_id'][];\n        }>\n      | PrimitiveFilter<ChannelMemberResponse<StreamChatGenerics>['id']>;\n  } & {\n    [Key in keyof ContainsOperator<StreamChatGenerics['memberType']>]?:\n      | RequireOnlyOne<QueryFilter<ContainsOperator<StreamChatGenerics['memberType']>[Key]>>\n      | PrimitiveFilter<ContainsOperator<StreamChatGenerics['memberType']>[Key]>;\n  }\n>;\n\n/**\n * Sort Types\n */\n\nexport type BannedUsersSort = BannedUsersSortBase | Array<BannedUsersSortBase>;\n\nexport type BannedUsersSortBase = { created_at?: AscDesc };\n\nexport type ReactionSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | ReactionSortBase<StreamChatGenerics>\n  | Array<ReactionSortBase<StreamChatGenerics>>;\n\nexport type ReactionSortBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Sort<\n  StreamChatGenerics['reactionType']\n> & {\n  created_at?: AscDesc;\n};\n\nexport type ChannelSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | ChannelSortBase<StreamChatGenerics>\n  | Array<ChannelSortBase<StreamChatGenerics>>;\n\nexport type ChannelSortBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Sort<\n  StreamChatGenerics['channelType']\n> & {\n  created_at?: AscDesc;\n  has_unread?: AscDesc;\n  last_message_at?: AscDesc;\n  last_updated?: AscDesc;\n  member_count?: AscDesc;\n  pinned_at?: AscDesc;\n  unread_count?: AscDesc;\n  updated_at?: AscDesc;\n};\n\nexport type PinnedMessagesSort = PinnedMessagesSortBase | Array<PinnedMessagesSortBase>;\nexport type PinnedMessagesSortBase = { pinned_at?: AscDesc };\n\nexport type Sort<T> = {\n  [P in keyof T]?: AscDesc;\n};\n\nexport type UserSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | Sort<UserResponse<StreamChatGenerics>>\n  | Array<Sort<UserResponse<StreamChatGenerics>>>;\n\nexport type MemberSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | Sort<Pick<UserResponse<StreamChatGenerics>, 'id' | 'created_at' | 'last_active' | 'name' | 'updated_at'>>\n  | Array<Sort<Pick<UserResponse<StreamChatGenerics>, 'id' | 'created_at' | 'last_active' | 'name' | 'updated_at'>>>;\n\nexport type SearchMessageSortBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Sort<\n  StreamChatGenerics['messageType']\n> & {\n  attachments?: AscDesc;\n  'attachments.type'?: AscDesc;\n  created_at?: AscDesc;\n  id?: AscDesc;\n  'mentioned_users.id'?: AscDesc;\n  parent_id?: AscDesc;\n  pinned?: AscDesc;\n  relevance?: AscDesc;\n  reply_count?: AscDesc;\n  text?: AscDesc;\n  type?: AscDesc;\n  updated_at?: AscDesc;\n  'user.id'?: AscDesc;\n};\n\nexport type SearchMessageSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | SearchMessageSortBase<StreamChatGenerics>\n  | Array<SearchMessageSortBase<StreamChatGenerics>>;\n\nexport type QuerySort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | BannedUsersSort\n  | ChannelSort<StreamChatGenerics>\n  | SearchMessageSort<StreamChatGenerics>\n  | UserSort<StreamChatGenerics>;\n\nexport type PollSort = PollSortBase | Array<PollSortBase>;\n\nexport type PollSortBase = {\n  created_at?: AscDesc;\n  id?: AscDesc;\n  is_closed?: AscDesc;\n  name?: AscDesc;\n  updated_at?: AscDesc;\n};\n\nexport type VoteSort = VoteSortBase | Array<VoteSortBase>;\n\nexport type VoteSortBase = {\n  created_at?: AscDesc;\n  id?: AscDesc;\n  is_closed?: AscDesc;\n  name?: AscDesc;\n  updated_at?: AscDesc;\n};\n\n/**\n * Base Types\n */\n\nexport type Action = {\n  name?: string;\n  style?: string;\n  text?: string;\n  type?: string;\n  value?: string;\n};\n\nexport type AnonUserType = {};\n\nexport type APNConfig = {\n  auth_key?: string;\n  auth_type?: string;\n  bundle_id?: string;\n  development?: boolean;\n  enabled?: boolean;\n  host?: string;\n  key_id?: string;\n  notification_template?: string;\n  p12_cert?: string;\n  team_id?: string;\n};\n\nexport type AgoraOptions = {\n  app_certificate: string;\n  app_id: string;\n  role_map?: Record<string, string>;\n};\n\nexport type HMSOptions = {\n  app_access_key: string;\n  app_secret: string;\n  default_role: string;\n  default_room_template: string;\n  default_region?: string;\n  role_map?: Record<string, string>;\n};\n\nexport type AsyncModerationOptions = {\n  callback?: {\n    mode?: 'CALLBACK_MODE_NONE' | 'CALLBACK_MODE_REST' | 'CALLBACK_MODE_TWIRP';\n    server_url?: string;\n  };\n  timeout_ms?: number;\n};\n\nexport type AppSettings = {\n  agora_options?: AgoraOptions | null;\n  allowed_flag_reasons?: string[];\n  apn_config?: {\n    auth_key?: string;\n    auth_type?: string;\n    bundle_id?: string;\n    development?: boolean;\n    host?: string;\n    key_id?: string;\n    notification_template?: string;\n    p12_cert?: string;\n    team_id?: string;\n  };\n  async_moderation_config?: AsyncModerationOptions;\n  async_url_enrich_enabled?: boolean;\n  auto_translation_enabled?: boolean;\n  before_message_send_hook_url?: string;\n  cdn_expiration_seconds?: number;\n  custom_action_handler_url?: string;\n  disable_auth_checks?: boolean;\n  disable_permissions_checks?: boolean;\n  enforce_unique_usernames?: 'no' | 'app' | 'team';\n  // all possible file mime types are https://www.iana.org/assignments/media-types/media-types.xhtml\n  file_upload_config?: FileUploadConfig;\n  firebase_config?: {\n    apn_template?: string;\n    credentials_json?: string;\n    data_template?: string;\n    notification_template?: string;\n    server_key?: string;\n  };\n  grants?: Record<string, string[]>;\n  hms_options?: HMSOptions | null;\n  huawei_config?: {\n    id: string;\n    secret: string;\n  };\n  image_moderation_enabled?: boolean;\n  image_upload_config?: FileUploadConfig;\n  migrate_permissions_to_v2?: boolean;\n  multi_tenant_enabled?: boolean;\n  permission_version?: 'v1' | 'v2';\n  push_config?: {\n    offline_only?: boolean;\n    version?: string;\n  };\n  reminders_interval?: number;\n  revoke_tokens_issued_before?: string | null;\n  sns_key?: string;\n  sns_secret?: string;\n  sns_topic_arn?: string;\n  sqs_key?: string;\n  sqs_secret?: string;\n  sqs_url?: string;\n  video_provider?: string;\n  webhook_events?: Array<string> | null;\n  webhook_url?: string;\n  xiaomi_config?: {\n    package_name: string;\n    secret: string;\n  };\n};\n\nexport type Attachment<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['attachmentType'] & {\n  actions?: Action[];\n  asset_url?: string;\n  author_icon?: string;\n  author_link?: string;\n  author_name?: string;\n  color?: string;\n  duration?: number;\n  fallback?: string;\n  fields?: Field[];\n  file_size?: number | string;\n  footer?: string;\n  footer_icon?: string;\n  giphy?: GiphyData;\n  image_url?: string;\n  latitude?: number;\n  longitude?: number;\n  mime_type?: string;\n  og_scrape_url?: string;\n  original_height?: number;\n  original_width?: number;\n  pretext?: string;\n  text?: string;\n  thumb_url?: string;\n  title?: string;\n  title_link?: string;\n  type?: string;\n  waveform_data?: Array<number>;\n};\n\nexport type OGAttachment = {\n  og_scrape_url: string;\n  asset_url?: string; // og:video | og:audio\n  author_link?: string; // og:site\n  author_name?: string; // og:site_name\n  image_url?: string; // og:image\n  text?: string; // og:description\n  thumb_url?: string; // og:image\n  title?: string; // og:title\n  title_link?: string; // og:url\n  type?: string | 'video' | 'audio' | 'image';\n};\n\nexport type BlockList = {\n  name: string;\n  words: string[];\n  team?: string;\n  type?: string;\n  validate?: boolean;\n};\n\nexport type ChannelConfig<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = ChannelConfigFields &\n  CreatedAtUpdatedAt & {\n    commands?: CommandVariants<StreamChatGenerics>[];\n  };\n\nexport type ChannelConfigAutomod = '' | 'AI' | 'disabled' | 'simple';\n\nexport type ChannelConfigAutomodBehavior = '' | 'block' | 'flag';\n\nexport type ChannelConfigAutomodThresholds = null | {\n  explicit?: { block?: number; flag?: number };\n  spam?: { block?: number; flag?: number };\n  toxic?: { block?: number; flag?: number };\n};\n\nexport type ChannelConfigFields = {\n  reminders: boolean;\n  automod?: ChannelConfigAutomod;\n  automod_behavior?: ChannelConfigAutomodBehavior;\n  automod_thresholds?: ChannelConfigAutomodThresholds;\n  blocklist_behavior?: ChannelConfigAutomodBehavior;\n  connect_events?: boolean;\n  custom_events?: boolean;\n  mark_messages_pending?: boolean;\n  max_message_length?: number;\n  message_retention?: string;\n  mutes?: boolean;\n  name?: string;\n  polls?: boolean;\n  push_notifications?: boolean;\n  quotes?: boolean;\n  reactions?: boolean;\n  read_events?: boolean;\n  replies?: boolean;\n  search?: boolean;\n  typing_events?: boolean;\n  uploads?: boolean;\n  url_enrichment?: boolean;\n};\n\nexport type ChannelConfigWithInfo<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = ChannelConfigFields &\n  CreatedAtUpdatedAt & {\n    commands?: CommandResponse<StreamChatGenerics>[];\n  };\n\nexport type ChannelData<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['channelType'] & {\n  blocked?: boolean;\n  members?: string[] | Array<NewMemberPayload<StreamChatGenerics>>;\n  name?: string;\n};\n\n/**\n * @deprecated Use ChannelMemberResponse instead\n */\nexport type ChannelMembership<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = ChannelMemberResponse<StreamChatGenerics>;\n\nexport type ChannelMute<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  user: UserResponse<StreamChatGenerics>;\n  channel?: ChannelResponse<StreamChatGenerics>;\n  created_at?: string;\n  expires?: string;\n  updated_at?: string;\n};\n\nexport type ChannelRole = {\n  custom?: boolean;\n  name?: string;\n  owner?: boolean;\n  resource?: string;\n  same_team?: boolean;\n};\n\nexport type CheckPushInput<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  apn_template?: string;\n  client_id?: string;\n  connection_id?: string;\n  firebase_data_template?: string;\n  firebase_template?: string;\n  message_id?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type PushProvider = 'apn' | 'firebase' | 'huawei' | 'xiaomi';\n\nexport type PushProviderConfig = PushProviderCommon &\n  PushProviderID &\n  PushProviderAPN &\n  PushProviderFirebase &\n  PushProviderHuawei &\n  PushProviderXiaomi;\n\nexport type PushProviderID = {\n  name: string;\n  type: PushProvider;\n};\n\nexport type PushProviderCommon = {\n  created_at: string;\n  updated_at: string;\n  description?: string;\n  disabled_at?: string;\n  disabled_reason?: string;\n};\n\nexport type PushProviderAPN = {\n  apn_auth_key?: string;\n  apn_auth_type?: 'token' | 'certificate';\n  apn_development?: boolean;\n  apn_host?: string;\n  apn_key_id?: string;\n  apn_notification_template?: string;\n  apn_p12_cert?: string;\n  apn_team_id?: string;\n  apn_topic?: string;\n};\n\nexport type PushProviderFirebase = {\n  firebase_apn_template?: string;\n  firebase_credentials?: string;\n  firebase_data_template?: string;\n  firebase_notification_template?: string;\n  firebase_server_key?: string;\n};\n\nexport type PushProviderHuawei = {\n  huawei_app_id?: string;\n  huawei_app_secret?: string;\n};\n\nexport type PushProviderXiaomi = {\n  xiaomi_package_name?: string;\n  xiaomi_secret?: string;\n};\n\nexport type CommandVariants<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | 'all'\n  | 'ban'\n  | 'fun_set'\n  | 'giphy'\n  | 'moderation_set'\n  | 'mute'\n  | 'unban'\n  | 'unmute'\n  | StreamChatGenerics['commandType'];\n\nexport type Configs<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Record<\n  string,\n  ChannelConfigWithInfo<StreamChatGenerics> | undefined\n>;\n\nexport type ConnectionOpen<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  connection_id: string;\n  cid?: string;\n  created_at?: string;\n  me?: OwnUserResponse<StreamChatGenerics>;\n  type?: string;\n};\n\nexport type CreatedAtUpdatedAt = {\n  created_at: string;\n  updated_at: string;\n};\n\nexport type Device<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = DeviceFields & {\n  provider?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type BaseDeviceFields = {\n  id: string;\n  push_provider: PushProvider;\n  push_provider_name?: string;\n};\n\nexport type DeviceFields = BaseDeviceFields & {\n  created_at: string;\n  disabled?: boolean;\n  disabled_reason?: string;\n};\n\nexport type EndpointName =\n  | 'Connect'\n  | 'LongPoll'\n  | 'DeleteFile'\n  | 'DeleteImage'\n  | 'DeleteMessage'\n  | 'DeleteUser'\n  | 'DeleteUsers'\n  | 'DeactivateUser'\n  | 'ExportUser'\n  | 'DeleteReaction'\n  | 'UpdateChannel'\n  | 'UpdateChannelPartial'\n  | 'UpdateMessage'\n  | 'UpdateMessagePartial'\n  | 'GetMessage'\n  | 'GetManyMessages'\n  | 'UpdateUsers'\n  | 'UpdateUsersPartial'\n  | 'CreateGuest'\n  | 'GetOrCreateChannel'\n  | 'StopWatchingChannel'\n  | 'QueryChannels'\n  | 'Search'\n  | 'QueryUsers'\n  | 'QueryMembers'\n  | 'QueryBannedUsers'\n  | 'QueryFlags'\n  | 'QueryMessageFlags'\n  | 'GetReactions'\n  | 'GetReplies'\n  | 'GetPinnedMessages'\n  | 'Ban'\n  | 'Unban'\n  | 'MuteUser'\n  | 'MuteChannel'\n  | 'UnmuteChannel'\n  | 'UnmuteUser'\n  | 'RunMessageAction'\n  | 'SendEvent'\n  | 'SendUserCustomEvent'\n  | 'MarkRead'\n  | 'MarkChannelsRead'\n  | 'SendMessage'\n  | 'ImportChannelMessages'\n  | 'UploadFile'\n  | 'UploadImage'\n  | 'UpdateApp'\n  | 'GetApp'\n  | 'CreateDevice'\n  | 'DeleteDevice'\n  | 'SendReaction'\n  | 'Flag'\n  | 'Unflag'\n  | 'Unblock'\n  | 'QueryFlagReports'\n  | 'FlagReportReview'\n  | 'CreateChannelType'\n  | 'DeleteChannel'\n  | 'DeleteChannels'\n  | 'DeleteChannelType'\n  | 'GetChannelType'\n  | 'ListChannelTypes'\n  | 'ListDevices'\n  | 'TruncateChannel'\n  | 'UpdateChannelType'\n  | 'CheckPush'\n  | 'PrivateSubmitModeration'\n  | 'ReactivateUser'\n  | 'HideChannel'\n  | 'ShowChannel'\n  | 'CreatePermission'\n  | 'UpdatePermission'\n  | 'GetPermission'\n  | 'DeletePermission'\n  | 'ListPermissions'\n  | 'CreateRole'\n  | 'DeleteRole'\n  | 'ListRoles'\n  | 'ListCustomRoles'\n  | 'Sync'\n  | 'TranslateMessage'\n  | 'CreateCommand'\n  | 'GetCommand'\n  | 'UpdateCommand'\n  | 'DeleteCommand'\n  | 'ListCommands'\n  | 'CreateBlockList'\n  | 'UpdateBlockList'\n  | 'GetBlockList'\n  | 'ListBlockLists'\n  | 'DeleteBlockList'\n  | 'ExportChannels'\n  | 'GetExportChannelsStatus'\n  | 'CheckSQS'\n  | 'GetRateLimits'\n  | 'CreateSegment'\n  | 'GetSegment'\n  | 'QuerySegments'\n  | 'UpdateSegment'\n  | 'DeleteSegment'\n  | 'CreateCampaign'\n  | 'GetCampaign'\n  | 'ListCampaigns'\n  | 'UpdateCampaign'\n  | 'DeleteCampaign'\n  | 'ScheduleCampaign'\n  | 'StopCampaign'\n  | 'ResumeCampaign'\n  | 'TestCampaign'\n  | 'GetOG'\n  | 'GetTask'\n  | 'ExportUsers'\n  | 'CreateImport'\n  | 'CreateImportURL'\n  | 'GetImport'\n  | 'ListImports'\n  | 'UpsertPushProvider'\n  | 'DeletePushProvider'\n  | 'ListPushProviders'\n  | 'CreatePoll';\n\nexport type ExportChannelRequest = {\n  id: string;\n  type: string;\n  cid?: string;\n  messages_since?: Date;\n  messages_until?: Date;\n};\n\nexport type ExportChannelOptions = {\n  clear_deleted_message_text?: boolean;\n  export_users?: boolean;\n  include_soft_deleted_channels?: boolean;\n  include_truncated_messages?: boolean;\n  version?: string;\n};\n\nexport type ExportUsersRequest = {\n  user_ids: string[];\n};\n\nexport type Field = {\n  short?: boolean;\n  title?: string;\n  value?: string;\n};\n\nexport type FileUploadConfig = {\n  allowed_file_extensions?: string[] | null;\n  allowed_mime_types?: string[] | null;\n  blocked_file_extensions?: string[] | null;\n  blocked_mime_types?: string[] | null;\n  size_limit?: number | null;\n};\n\nexport type FirebaseConfig = {\n  apn_template?: string;\n  credentials_json?: string;\n  data_template?: string;\n  enabled?: boolean;\n  notification_template?: string;\n  server_key?: string;\n};\n\ntype GiphyVersionInfo = {\n  height: string;\n  url: string;\n  width: string;\n  frames?: string;\n  size?: string;\n};\n\ntype GiphyVersions =\n  | 'original'\n  | 'fixed_height'\n  | 'fixed_height_still'\n  | 'fixed_height_downsampled'\n  | 'fixed_width'\n  | 'fixed_width_still'\n  | 'fixed_width_downsampled';\n\ntype GiphyData = {\n  [key in GiphyVersions]: GiphyVersionInfo;\n};\n\nexport type HuaweiConfig = {\n  enabled?: boolean;\n  id?: string;\n  secret?: string;\n};\n\nexport type XiaomiConfig = {\n  enabled?: boolean;\n  package_name?: string;\n  secret?: string;\n};\n\nexport type LiteralStringForUnion = string & {};\n\nexport type LogLevel = 'info' | 'error' | 'warn';\n\nexport type Logger = (logLevel: LogLevel, message: string, extraData?: Record<string, unknown>) => void;\n\nexport type Message<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Partial<\n  MessageBase<StreamChatGenerics>\n> & {\n  mentioned_users?: string[];\n};\n\nexport type MessageBase<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['messageType'] & {\n  id: string;\n  attachments?: Attachment<StreamChatGenerics>[];\n  html?: string;\n  mml?: string;\n  parent_id?: string;\n  pin_expires?: string | null;\n  pinned?: boolean;\n  pinned_at?: string | null;\n  poll_id?: string;\n  quoted_message_id?: string;\n  restricted_visibility?: string[];\n  show_in_channel?: boolean;\n  silent?: boolean;\n  text?: string;\n  user?: UserResponse<StreamChatGenerics> | null;\n  user_id?: string;\n};\n\nexport type MessageLabel = 'deleted' | 'ephemeral' | 'error' | 'regular' | 'reply' | 'system';\n\nexport type SendMessageOptions = {\n  force_moderation?: boolean;\n  is_pending_message?: boolean;\n  keep_channel_hidden?: boolean;\n  pending?: boolean;\n  pending_message_metadata?: Record<string, string>;\n  skip_enrich_url?: boolean;\n  skip_push?: boolean;\n};\n\nexport type UpdateMessageOptions = {\n  skip_enrich_url?: boolean;\n};\n\nexport type GetMessageOptions = {\n  show_deleted_message?: boolean;\n};\n\nexport type Mute<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  created_at: string;\n  target: UserResponse<StreamChatGenerics>;\n  updated_at: string;\n  user: UserResponse<StreamChatGenerics>;\n};\n\nexport type PartialUpdateChannel<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: Partial<ChannelResponse<StreamChatGenerics>>;\n  unset?: Array<keyof ChannelResponse<StreamChatGenerics>>;\n};\n\nexport type PartialUpdateMember<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: ChannelMemberUpdates<StreamChatGenerics>;\n  unset?: Array<keyof ChannelMemberUpdates<StreamChatGenerics>>;\n};\n\nexport type PartialUserUpdate<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  id: string;\n  set?: Partial<UserResponse<StreamChatGenerics>>;\n  unset?: Array<keyof UserResponse<StreamChatGenerics>>;\n};\n\nexport type MessageUpdatableFields<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  MessageResponse<StreamChatGenerics>,\n  'cid' | 'created_at' | 'updated_at' | 'deleted_at' | 'user' | 'user_id'\n>;\n\nexport type PartialMessageUpdate<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: Partial<MessageUpdatableFields<StreamChatGenerics>>;\n  unset?: Array<keyof MessageUpdatableFields<StreamChatGenerics>>;\n};\n\nexport type PendingMessageResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  message: MessageResponse<StreamChatGenerics>;\n  pending_message_metadata?: Record<string, string>;\n};\n\nexport type PermissionAPIObject = {\n  action?: string;\n  condition?: object;\n  custom?: boolean;\n  description?: string;\n  id?: string;\n  level?: string;\n  name?: string;\n  owner?: boolean;\n  same_team?: boolean;\n  tags?: string[];\n};\n\nexport type PermissionObject = {\n  action?: 'Deny' | 'Allow';\n  name?: string;\n  owner?: boolean;\n  priority?: number;\n  resources?: string[];\n  roles?: string[];\n};\n\nexport type Policy = {\n  action?: 0 | 1;\n  created_at?: string;\n  name?: string;\n  owner?: boolean;\n  priority?: number;\n  resources?: string[];\n  roles?: string[] | null;\n  updated_at?: string;\n};\n\nexport type RateLimitsInfo = {\n  limit: number;\n  remaining: number;\n  reset: number;\n};\n\nexport type RateLimitsMap = Record<EndpointName, RateLimitsInfo>;\n\nexport type Reaction<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['reactionType'] & {\n  type: string;\n  message_id?: string;\n  score?: number;\n  user?: UserResponse<StreamChatGenerics> | null;\n  user_id?: string;\n};\n\nexport type Resource =\n  | 'AddLinks'\n  | 'BanUser'\n  | 'CreateChannel'\n  | 'CreateMessage'\n  | 'CreateReaction'\n  | 'DeleteAttachment'\n  | 'DeleteChannel'\n  | 'DeleteMessage'\n  | 'DeleteReaction'\n  | 'EditUser'\n  | 'MuteUser'\n  | 'ReadChannel'\n  | 'RunMessageAction'\n  | 'UpdateChannel'\n  | 'UpdateChannelMembers'\n  | 'UpdateMessage'\n  | 'UpdateUser'\n  | 'UploadAttachment';\n\nexport type SearchPayload<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  SearchOptions<StreamChatGenerics>,\n  'sort'\n> & {\n  client_id?: string;\n  connection_id?: string;\n  filter_conditions?: ChannelFilters<StreamChatGenerics>;\n  message_filter_conditions?: MessageFilters<StreamChatGenerics>;\n  message_options?: MessageOptions;\n  query?: string;\n  sort?: Array<{\n    direction: AscDesc;\n    field: keyof SearchMessageSortBase<StreamChatGenerics>;\n  }>;\n};\n\nexport type TestPushDataInput = {\n  apnTemplate?: string;\n  firebaseDataTemplate?: string;\n  firebaseTemplate?: string;\n  messageID?: string;\n  pushProviderName?: string;\n  pushProviderType?: PushProvider;\n  skipDevices?: boolean;\n};\n\nexport type TestSQSDataInput = {\n  sqs_key?: string;\n  sqs_secret?: string;\n  sqs_url?: string;\n};\n\nexport type TestSNSDataInput = {\n  sns_key?: string;\n  sns_secret?: string;\n  sns_topic_arn?: string;\n};\n\nexport type TokenOrProvider = null | string | TokenProvider | undefined;\n\nexport type TokenProvider = () => Promise<string>;\n\nexport type TranslationLanguages =\n  | ''\n  | 'af'\n  | 'am'\n  | 'ar'\n  | 'az'\n  | 'bg'\n  | 'bn'\n  | 'bs'\n  | 'cs'\n  | 'da'\n  | 'de'\n  | 'el'\n  | 'en'\n  | 'es'\n  | 'es-MX'\n  | 'et'\n  | 'fa'\n  | 'fa-AF'\n  | 'fi'\n  | 'fr'\n  | 'fr-CA'\n  | 'ha'\n  | 'he'\n  | 'hi'\n  | 'hr'\n  | 'hu'\n  | 'id'\n  | 'it'\n  | 'ja'\n  | 'ka'\n  | 'ko'\n  | 'lt'\n  | 'lv'\n  | 'ms'\n  | 'nl'\n  | 'no'\n  | 'pl'\n  | 'ps'\n  | 'pt'\n  | 'ro'\n  | 'ru'\n  | 'sk'\n  | 'sl'\n  | 'so'\n  | 'sq'\n  | 'sr'\n  | 'sv'\n  | 'sw'\n  | 'ta'\n  | 'th'\n  | 'tl'\n  | 'tr'\n  | 'uk'\n  | 'ur'\n  | 'vi'\n  | 'zh'\n  | 'zh-TW';\n\nexport type TypingStartEvent = Event;\n\nexport type ReservedMessageFields =\n  | 'command'\n  | 'created_at'\n  | 'html'\n  | 'latest_reactions'\n  | 'own_reactions'\n  | 'quoted_message'\n  | 'reaction_counts'\n  | 'reply_count'\n  | 'type'\n  | 'updated_at'\n  | 'pinned_at'\n  | 'user'\n  | '__html';\n\nexport type UpdatedMessage<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  MessageResponse<StreamChatGenerics>,\n  'mentioned_users'\n> & { mentioned_users?: string[] };\n\nexport type User<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = StreamChatGenerics['userType'] & {\n  id: string;\n  anon?: boolean;\n  name?: string;\n  role?: string;\n  teams?: string[];\n  username?: string;\n};\n\nexport type TaskResponse = {\n  task_id: string;\n};\n\nexport type DeleteChannelsResponse = {\n  result: Record<string, string>;\n} & Partial<TaskResponse>;\n\nexport type DeleteType = 'soft' | 'hard' | 'pruning';\n\n/*\n  DeleteUserOptions specifies a collection of one or more `user_ids` to be deleted.\n\n  `user`:\n    - soft: marks user as deleted and retains all user data\n    - pruning: marks user as deleted and nullifies user information\n    - hard: deletes user completely - this requires hard option for messages and conversation as well\n  `conversations`:\n    - soft: marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)\n    - hard: deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)\n  `messages`:\n    - soft: marks all user messages as deleted without removing any related message data\n    - pruning: marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags\n    - hard: deletes messages completely with all related information\n  `new_channel_owner_id`: any channels owned by the hard-deleted user will be transferred to this user ID\n */\nexport type DeleteUserOptions = {\n  conversations?: Exclude<DeleteType, 'pruning'>;\n  messages?: DeleteType;\n  new_channel_owner_id?: string;\n  user?: DeleteType;\n};\n\nexport type SegmentType = 'channel' | 'user';\n\nexport type SegmentData = {\n  all_sender_channels?: boolean;\n  all_users?: boolean;\n  description?: string;\n  filter?: {};\n  name?: string;\n};\n\nexport type SegmentResponse = {\n  created_at: string;\n  deleted_at: string;\n  id: string;\n  locked: boolean;\n  size: number;\n  task_id: string;\n  type: SegmentType;\n  updated_at: string;\n} & SegmentData;\n\nexport type UpdateSegmentData = {\n  name: string;\n} & SegmentData;\n\nexport type SegmentTargetsResponse = {\n  created_at: string;\n  segment_id: string;\n  target_id: string;\n};\n\nexport type SortParam = {\n  field: string;\n  direction?: AscDesc;\n};\n\nexport type Pager = {\n  limit?: number;\n  next?: string;\n  prev?: string;\n};\n\nexport type QuerySegmentsOptions = Pager;\n\nexport type QuerySegmentTargetsFilter = {\n  target_id?: {\n    $eq?: string;\n    $gte?: string;\n    $in?: string[];\n    $lte?: string;\n  };\n};\nexport type QuerySegmentTargetsOptions = Pick<Pager, 'next' | 'limit'>;\n\nexport type GetCampaignOptions = {\n  users?: { limit?: number; next?: string; prev?: string };\n};\n\nexport type CampaignSort = {\n  field: string;\n  direction?: number;\n}[];\n\nexport type CampaignQueryOptions = {\n  limit?: number;\n  next?: string;\n  prev?: string;\n  sort?: CampaignSort;\n  user_limit?: number;\n};\n\nexport type SegmentQueryOptions = CampaignQueryOptions;\n\n// TODO: add better typing\nexport type CampaignFilters = {};\n\nexport type CampaignData = {\n  channel_template?: {\n    type: string;\n    custom?: {};\n    id?: string;\n    members?: string[];\n    team?: string;\n  };\n  create_channels?: boolean;\n  deleted_at?: string;\n  description?: string;\n  id?: string | null;\n  message_template?: {\n    text: string;\n    attachments?: Attachment[];\n    custom?: {};\n    poll_id?: string;\n  };\n  name?: string;\n  segment_ids?: string[];\n  sender_id?: string;\n  sender_mode?: 'exclude' | 'include' | null;\n  skip_push?: boolean;\n  skip_webhook?: boolean;\n  user_ids?: string[];\n};\n\nexport type CampaignStats = {\n  progress?: number;\n  stats_channels_created?: number;\n  stats_completed_at?: string;\n  stats_messages_sent?: number;\n  stats_started_at?: string;\n  stats_users_read?: number;\n  stats_users_sent?: number;\n};\nexport type CampaignResponse = {\n  created_at: string;\n  id: string;\n  segments: SegmentResponse[];\n  sender: UserResponse;\n  stats: CampaignStats;\n  status: 'draft' | 'scheduled' | 'in_progress' | 'completed' | 'stopped';\n  updated_at: string;\n  users: UserResponse[];\n  scheduled_for?: string;\n} & CampaignData;\n\nexport type DeleteCampaignOptions = {};\n\nexport type TaskStatus = {\n  created_at: string;\n  status: string;\n  task_id: string;\n  updated_at: string;\n  error?: {\n    description: string;\n    type: string;\n  };\n  result?: UR;\n};\n\nexport type TruncateOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  hard_delete?: boolean;\n  message?: Message<StreamChatGenerics>;\n  skip_push?: boolean;\n  truncated_at?: Date;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type CreateImportURLResponse = {\n  path: string;\n  upload_url: string;\n};\n\nexport type CreateImportResponse = {\n  import_task: ImportTask;\n};\n\nexport type GetImportResponse = {\n  import_task: ImportTask;\n};\n\nexport type CreateImportOptions = {\n  mode: 'insert' | 'upsert';\n};\n\nexport type ListImportsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type ListImportsResponse = {\n  import_tasks: ImportTask[];\n};\n\nexport type ImportTaskHistory = {\n  created_at: string;\n  next_state: string;\n  prev_state: string;\n};\n\nexport type ImportTask = {\n  created_at: string;\n  history: ImportTaskHistory[];\n  id: string;\n  path: string;\n  state: string;\n  updated_at: string;\n  result?: UR;\n  size?: number;\n};\n\nexport type MessageSetType = 'latest' | 'current' | 'new';\nexport type MessageSet<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  isCurrent: boolean;\n  isLatest: boolean;\n  messages: FormatMessageResponse<StreamChatGenerics>[];\n  pagination: { hasNext: boolean; hasPrev: boolean };\n};\n\nexport type PushProviderUpsertResponse = {\n  push_provider: PushProvider;\n};\n\nexport type PushProviderListResponse = {\n  push_providers: PushProvider[];\n};\n\nexport type CreateCallOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  id: string;\n  type: string;\n  options?: UR;\n  user?: UserResponse<StreamChatGenerics> | null;\n  user_id?: string;\n};\n\nexport type HMSCall = {\n  room: string;\n};\n\nexport type AgoraCall = {\n  channel: string;\n};\n\nexport type Call = {\n  id: string;\n  provider: string;\n  agora?: AgoraCall;\n  hms?: HMSCall;\n};\n\nexport type CreateCallResponse = APIResponse & {\n  call: Call;\n  token: string;\n  agora_app_id?: string;\n  agora_uid?: number;\n};\n\nexport type GetCallTokenResponse = APIResponse & {\n  token: string;\n  agora_app_id?: string;\n  agora_uid?: number;\n};\n\ntype ErrorResponseDetails = {\n  code: number;\n  messages: string[];\n};\n\nexport type APIErrorResponse = {\n  code: number;\n  duration: string;\n  message: string;\n  more_info: string;\n  StatusCode: number;\n  details?: ErrorResponseDetails;\n};\n\nexport class ErrorFromResponse<T> extends Error {\n  code?: number;\n  response?: AxiosResponse<T>;\n  status?: number;\n}\n\nexport type QueryPollsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  polls: PollResponse<StreamChatGenerics>[];\n  next?: string;\n};\n\nexport type CreatePollAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  poll: PollResponse<StreamChatGenerics>;\n};\n\nexport type GetPollAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  poll: PollResponse<StreamChatGenerics>;\n};\n\nexport type UpdatePollAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  poll: PollResponse<StreamChatGenerics>;\n};\n\nexport type PollResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['pollType'] &\n  PollEnrichData<StreamChatGenerics> & {\n    created_at: string;\n    created_by: UserResponse<StreamChatGenerics> | null;\n    created_by_id: string;\n    enforce_unique_vote: boolean;\n    id: string;\n    max_votes_allowed: number;\n    name: string;\n    options: PollOption<StreamChatGenerics>[];\n    updated_at: string;\n    allow_answers?: boolean;\n    allow_user_suggested_options?: boolean;\n    description?: string;\n    is_closed?: boolean;\n    voting_visibility?: VotingVisibility;\n  };\n\nexport type PollOption<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  created_at: string;\n  id: string;\n  poll_id: string;\n  text: string;\n  updated_at: string;\n  vote_count: number;\n  votes?: PollVote<StreamChatGenerics>[];\n};\n\nexport enum VotingVisibility {\n  anonymous = 'anonymous',\n  public = 'public',\n}\n\nexport type PollEnrichData<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  answers_count: number;\n  latest_answers: PollAnswer<StreamChatGenerics>[]; // not updated with WS events, ordered DESC by created_at, seems like updated_at cannot be different from created_at\n  latest_votes_by_option: Record<string, PollVote<StreamChatGenerics>[]>; // not updated with WS events; always null in anonymous polls\n  vote_count: number;\n  vote_counts_by_option: Record<string, number>;\n  own_votes?: (PollVote<StreamChatGenerics> | PollAnswer<StreamChatGenerics>)[]; // not updated with WS events\n};\n\nexport type PollData<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['pollType'] & {\n  id: string;\n  name: string;\n  allow_answers?: boolean;\n  allow_user_suggested_options?: boolean;\n  description?: string;\n  enforce_unique_vote?: boolean;\n  is_closed?: boolean;\n  max_votes_allowed?: number;\n  options?: PollOptionData<StreamChatGenerics>[];\n  user_id?: string;\n  voting_visibility?: VotingVisibility;\n};\n\nexport type CreatePollData<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Partial<\n  PollData<StreamChatGenerics>\n> &\n  Pick<PollData<StreamChatGenerics>, 'name'>;\n\nexport type PartialPollUpdate<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: Partial<PollData<StreamChatGenerics>>;\n  unset?: Array<keyof PollData<StreamChatGenerics>>;\n};\n\nexport type PollOptionData<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['pollOptionType'] & {\n  text: string;\n  id?: string;\n  position?: number;\n};\n\nexport type PartialPollOptionUpdate<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: Partial<PollOptionResponse<StreamChatGenerics>>;\n  unset?: Array<keyof PollOptionResponse<StreamChatGenerics>>;\n};\n\nexport type PollVoteData = {\n  answer_text?: string;\n  is_answer?: boolean;\n  option_id?: string;\n};\n\nexport type PollPaginationOptions = {\n  limit?: number;\n  next?: string;\n};\n\nexport type CreatePollOptionAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  poll_option: PollOptionResponse<StreamChatGenerics>;\n};\n\nexport type GetPollOptionAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = CreatePollOptionAPIResponse<StreamChatGenerics>;\nexport type UpdatePollOptionAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = CreatePollOptionAPIResponse<StreamChatGenerics>;\n\nexport type PollOptionResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['pollType'] & {\n  created_at: string;\n  id: string;\n  poll_id: string;\n  position: number;\n  text: string;\n  updated_at: string;\n  vote_count: number;\n  votes?: PollVote<StreamChatGenerics>[];\n};\n\nexport type PollVote<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  created_at: string;\n  id: string;\n  poll_id: string;\n  updated_at: string;\n  option_id?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type PollAnswer<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Exclude<\n  PollVote<StreamChatGenerics>,\n  'option_id'\n> & {\n  answer_text: string;\n  is_answer: boolean; // this is absolutely redundant prop as answer_text indicates that a vote is an answer\n};\n\nexport type PollVotesAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  votes: (PollVote<StreamChatGenerics> | PollAnswer<StreamChatGenerics>)[];\n  next?: string;\n};\n\nexport type PollAnswersAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  votes: PollAnswer<StreamChatGenerics>[]; // todo: should be changes to answers?\n  next?: string;\n};\n\nexport type CastVoteAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  vote: PollVote<StreamChatGenerics> | PollAnswer<StreamChatGenerics>;\n};\n\nexport type QueryMessageHistoryFilters = QueryFilters<\n  {\n    message_id?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageHistoryEntry['message_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageHistoryEntry['message_id']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageHistoryEntry['message_updated_by_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageHistoryEntry['message_updated_by_id']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<MessageHistoryEntry['message_updated_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>\n        >\n      | PrimitiveFilter<MessageHistoryEntry['message_updated_at']>;\n  }\n>;\n\nexport type QueryMessageHistorySort = QueryMessageHistorySortBase | Array<QueryMessageHistorySortBase>;\n\nexport type QueryMessageHistorySortBase = {\n  message_updated_at?: AscDesc;\n  message_updated_by_id?: AscDesc;\n};\n\nexport type QueryMessageHistoryOptions = Pager;\n\nexport type MessageHistoryEntry<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  message_id: string;\n  message_updated_at: string;\n  attachments?: Attachment<StreamChatGenerics>[];\n  message_updated_by_id?: string;\n  text?: string;\n};\n\nexport type QueryMessageHistoryResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  message_history: MessageHistoryEntry<StreamChatGenerics>[];\n  next?: string;\n  prev?: string;\n};\n\n// Moderation v2\nexport type ModerationPayload = {\n  created_at: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  custom?: Record<string, any>;\n  images?: string[];\n  texts?: string[];\n  videos?: string[];\n};\n\nexport type ModV2ReviewStatus = 'complete' | 'flagged' | 'partial';\n\nexport type ModerationFlag = {\n  created_at: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  custom: Record<string, any>;\n  entity_creator_id: string;\n  entity_id: string;\n  entity_type: string;\n  id: string;\n  reason: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  result: Record<string, any>[];\n  review_queue_item_id: string;\n  updated_at: string;\n  user: UserResponse;\n  moderation_payload?: ModerationPayload;\n  moderation_payload_hash?: string;\n};\n\nexport type ReviewQueueItem = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  actions_taken: any[];\n  appealed_by: string;\n  assigned_to: string;\n  completed_at: string;\n  config_key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  context: any[];\n  created_at: string;\n  created_by: string;\n  entity_id: string;\n  entity_type: string;\n  flags: ModerationFlag[];\n  has_image: boolean;\n  has_text: boolean;\n  has_video: boolean;\n  id: string;\n  moderation_payload: ModerationPayload;\n  moderation_payload_hash: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options: any;\n  recommended_action: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  results: any;\n  reviewed_at: string;\n  status: string;\n  updated_at: string;\n};\n\nexport type CustomCheckFlag = {\n  type: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  custom?: Record<string, any>[];\n  labels?: string[];\n  reason?: string;\n};\n\nexport type SubmitActionOptions = {\n  ban?: {\n    channel_ban_only?: boolean;\n    reason?: string;\n    timeout?: number;\n  };\n  delete_message?: {\n    hard_delete?: boolean;\n  };\n  delete_user?: {\n    delete_conversation_channels?: boolean;\n    hard_delete?: boolean;\n    mark_messages_deleted?: boolean;\n  };\n  restore?: {};\n  unban?: {\n    channel_cid?: string;\n  };\n  user_id?: string;\n};\n\nexport type GetUserModerationReportResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  user: UserResponse<StreamChatGenerics>;\n  user_blocks?: Array<{\n    blocked_at: string;\n    blocked_by_user_id: string;\n    blocked_user_id: string;\n  }>;\n  user_mutes?: Mute<StreamChatGenerics>[];\n};\n\nexport type QueryModerationConfigsFilters = QueryFilters<\n  {\n    key?: string;\n  } & {\n    created_at?: PrimitiveFilter<string>;\n  } & {\n    updated_at?: PrimitiveFilter<string>;\n  } & {\n    team?: string;\n  }\n>;\n\nexport type ReviewQueueFilters = QueryFilters<\n  {\n    assigned_to?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['assigned_to']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['assigned_to']>;\n  } & {\n    completed_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['completed_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ReviewQueueItem['completed_at']>;\n  } & {\n    config_key?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['config_key']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['config_key']>;\n  } & {\n    entity_type?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['entity_type']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['entity_type']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['created_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ReviewQueueItem['created_at']>;\n  } & {\n    id?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['id']>;\n  } & {\n    entity_id?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['entity_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['entity_id']>;\n  } & {\n    reviewed?: boolean;\n  } & {\n    reviewed_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['reviewed_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ReviewQueueItem['reviewed_at']>;\n  } & {\n    status?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['status']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['status']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['updated_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ReviewQueueItem['updated_at']>;\n  } & {\n    has_image?: boolean;\n  } & {\n    has_text?: boolean;\n  } & {\n    has_video?: boolean;\n  } & {\n    has_media?: boolean;\n  } & {\n    language?: RequireOnlyOne<{\n      $contains?: string;\n      $eq?: string;\n      $in?: string[];\n    }>;\n  } & {\n    teams?:\n      | RequireOnlyOne<{\n          $contains?: PrimitiveFilter<string>;\n          $eq?: PrimitiveFilter<string>;\n          $in?: PrimitiveFilter<string>;\n        }>\n      | PrimitiveFilter<string>;\n  } & {\n    user_report_reason?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    recommended_action?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    flagged_user_id?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    category?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    label?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    reporter_type?: RequireOnlyOne<{\n      $eq?: 'automod' | 'user' | 'moderator' | 'admin' | 'velocity_filter';\n    }>;\n  } & {\n    reporter_id?: RequireOnlyOne<{\n      $eq?: string;\n      $in?: string[];\n    }>;\n  } & {\n    date_range?: RequireOnlyOne<{\n      $eq?: string; // Format: \"date1_date2\"\n    }>;\n  }\n>;\n\nexport type ReviewQueueSort =\n  | Sort<Pick<ReviewQueueItem, 'id' | 'created_at' | 'updated_at'>>\n  | Array<Sort<Pick<ReviewQueueItem, 'id' | 'created_at' | 'updated_at'>>>;\n\nexport type QueryModerationConfigsSort = Array<Sort<'key' | 'created_at' | 'updated_at'>>;\n\nexport type ReviewQueuePaginationOptions = Pager;\n\nexport type ReviewQueueResponse = {\n  items: ReviewQueueItem[];\n  next?: string;\n  prev?: string;\n};\n\nexport type ModerationConfig = {\n  key: string;\n  ai_image_config?: AIImageConfig;\n  ai_text_config?: AITextConfig;\n  ai_video_config?: AIVideoConfig;\n  automod_platform_circumvention_config?: AutomodPlatformCircumventionConfig;\n  automod_semantic_filters_config?: AutomodSemanticFiltersConfig;\n  automod_toxicity_config?: AutomodToxicityConfig;\n  block_list_config?: BlockListConfig;\n  team?: string;\n};\n\nexport type ModerationConfigResponse = ModerationConfig & {\n  created_at: string;\n  updated_at: string;\n};\n\nexport type GetConfigResponse = {\n  config: ModerationConfigResponse;\n};\n\nexport type QueryConfigsResponse = {\n  configs: ModerationConfigResponse[];\n  next?: string;\n  prev?: string;\n};\n\nexport type UpsertConfigResponse = {\n  config: ModerationConfigResponse;\n};\n\nexport type ModerationFlagOptions = {\n  custom?: Record<string, unknown>;\n  moderation_payload?: ModerationPayload;\n  user_id?: string;\n};\n\nexport type ModerationMuteOptions = {\n  timeout?: number;\n  user_id?: string;\n};\nexport type GetUserModerationReportOptions = {\n  create_user_if_not_exists?: boolean;\n  include_user_blocks?: boolean;\n  include_user_mutes?: boolean;\n};\n\nexport type AIState =\n  | 'AI_STATE_ERROR'\n  | 'AI_STATE_CHECKING_SOURCES'\n  | 'AI_STATE_THINKING'\n  | 'AI_STATE_GENERATING'\n  | (string & {});\n\nexport type ModerationActionType = 'flag' | 'shadow' | 'remove' | 'bounce' | 'bounce_flag' | 'bounce_remove';\n\nexport type AutomodRule = {\n  action: ModerationActionType;\n  label: string;\n  threshold: number;\n};\n\nexport type BlockListRule = {\n  action: ModerationActionType;\n  name?: string;\n};\n\nexport type BlockListConfig = {\n  enabled: boolean;\n  rules: BlockListRule[];\n  async?: boolean;\n};\n\nexport type AutomodToxicityConfig = {\n  enabled: boolean;\n  rules: AutomodRule[];\n  async?: boolean;\n};\n\nexport type AutomodPlatformCircumventionConfig = {\n  enabled: boolean;\n  rules: AutomodRule[];\n  async?: boolean;\n};\n\nexport type AutomodSemanticFiltersRule = {\n  action: ModerationActionType;\n  name: string;\n  threshold: number;\n};\n\nexport type AutomodSemanticFiltersConfig = {\n  enabled: boolean;\n  rules: AutomodSemanticFiltersRule[];\n  async?: boolean;\n};\n\nexport type AITextSeverityRule = {\n  action: ModerationActionType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n};\n\nexport type AITextRule = {\n  label: string;\n  action?: ModerationActionType;\n  severity_rules?: AITextSeverityRule[];\n};\n\nexport type AITextConfig = {\n  enabled: boolean;\n  rules: AITextRule[];\n  async?: boolean;\n  profile?: string;\n  severity_rules?: AITextSeverityRule[]; // Deprecated: use rules instead\n};\n\nexport type AIImageRule = {\n  action: ModerationActionType;\n  label: string;\n  min_confidence?: number;\n};\n\nexport type AIImageConfig = {\n  enabled: boolean;\n  rules: AIImageRule[];\n  async?: boolean;\n};\n\nexport type AIVideoRule = {\n  action: ModerationActionType;\n  label: string;\n  min_confidence?: number;\n};\n\nexport type AIVideoConfig = {\n  enabled: boolean;\n  rules: AIVideoRule[];\n  async?: boolean;\n};\n\nexport type VelocityFilterConfigRule = {\n  action: 'flag' | 'shadow' | 'remove' | 'ban';\n  ban_duration?: number;\n  cascading_action?: 'flag' | 'shadow' | 'remove' | 'ban';\n  cascading_threshold?: number;\n  check_message_context?: boolean;\n  fast_spam_threshold?: number;\n  fast_spam_ttl?: number;\n  ip_ban?: boolean;\n  shadow_ban?: boolean;\n  slow_spam_ban_duration?: number;\n  slow_spam_threshold?: number;\n  slow_spam_ttl?: number;\n};\n\nexport type VelocityFilterConfig = {\n  cascading_actions: boolean;\n  enabled: boolean;\n  first_message_only: boolean;\n  rules: VelocityFilterConfigRule[];\n  async?: boolean;\n};\n\nexport type PromoteChannelParams<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  channels: Array<Channel<SCG>>;\n  channelToMove: Channel<SCG>;\n  sort: ChannelSort<SCG>;\n  /**\n   * If the index of the channel within `channels` list which is being moved upwards\n   * (`channelToMove`) is known, you can supply it to skip extra calculation.\n   */\n  channelToMoveIndexWithinChannels?: number;\n};\n\n/**\n * An identifier containing information about the downstream SDK using stream-chat. It\n * is used to resolve the user agent.\n */\nexport type SdkIdentifier = { name: 'react' | 'react-native' | 'expo' | 'angular'; version: string };\n\n/**\n * An identifier containing information about the downstream device using stream-chat, if\n * available. Is used by the react-native SDKs to enrich the user agent further.\n */\nexport type DeviceIdentifier = { os: string; model?: string };\n","export type Patch<T> = (value: T) => T;\nexport type ValueOrPatch<T> = T | Patch<T>;\nexport type Handler<T> = (nextValue: T, previousValue: T | undefined) => void;\nexport type Unsubscribe = () => void;\n\nexport const isPatch = <T>(value: ValueOrPatch<T>): value is Patch<T> => {\n  return typeof value === 'function';\n};\n\nexport class StateStore<T extends Record<string, unknown>> {\n  private handlerSet = new Set<Handler<T>>();\n\n  private static logCount = 5;\n\n  constructor(private value: T) {}\n\n  public next = (newValueOrPatch: ValueOrPatch<T>): void => {\n    // newValue (or patch output) should never be mutated previous value\n    const newValue = isPatch(newValueOrPatch) ? newValueOrPatch(this.value) : newValueOrPatch;\n\n    // do not notify subscribers if the value hasn't changed\n    if (newValue === this.value) return;\n\n    const oldValue = this.value;\n    this.value = newValue;\n\n    this.handlerSet.forEach((handler) => handler(this.value, oldValue));\n  };\n\n  public partialNext = (partial: Partial<T>): void => this.next((current) => ({ ...current, ...partial }));\n\n  public getLatestValue = (): T => this.value;\n\n  public subscribe = (handler: Handler<T>): Unsubscribe => {\n    handler(this.value, undefined);\n    this.handlerSet.add(handler);\n    return () => {\n      this.handlerSet.delete(handler);\n    };\n  };\n\n  public subscribeWithSelector = <O extends Readonly<Record<string, unknown>> | Readonly<unknown[]>>(\n    selector: (nextValue: T) => O,\n    handler: Handler<O>,\n  ) => {\n    // begin with undefined to reduce amount of selector calls\n    let selectedValues: O | undefined;\n\n    const wrappedHandler: Handler<T> = (nextValue) => {\n      const newlySelectedValues = selector(nextValue);\n\n      let hasUpdatedValues = !selectedValues;\n\n      if (Array.isArray(newlySelectedValues) && StateStore.logCount > 0) {\n        console.warn(\n          '[StreamChat]: The API of our StateStore has changed. Instead of returning an array in the selector, please return a named object of properties.',\n        );\n        StateStore.logCount--;\n      }\n\n      for (const key in selectedValues) {\n        // @ts-ignore TODO: remove array support (Readonly<unknown[]>)\n        if (selectedValues[key] === newlySelectedValues[key]) continue;\n        hasUpdatedValues = true;\n        break;\n      }\n\n      if (!hasUpdatedValues) return;\n\n      const oldSelectedValues = selectedValues;\n      selectedValues = newlySelectedValues;\n\n      handler(newlySelectedValues, oldSelectedValues);\n    };\n\n    return this.subscribe(wrappedHandler);\n  };\n}\n","import type { Channel } from './channel';\nimport type { StreamChat } from './client';\nimport { StateStore } from './store';\nimport type {\n  AscDesc,\n  DefaultGenerics,\n  EventTypes,\n  ExtendableGenerics,\n  FormatMessageResponse,\n  MessagePaginationOptions,\n  MessageResponse,\n  ReadResponse,\n  ThreadResponse,\n  ThreadResponseCustomData,\n  UserResponse,\n} from './types';\nimport { addToMessageList, findIndexInSortedArray, formatMessage, throttle } from './utils';\n\ntype QueryRepliesOptions<SCG extends ExtendableGenerics> = {\n  sort?: { created_at: AscDesc }[];\n} & MessagePaginationOptions & { user?: UserResponse<SCG>; user_id?: string };\n\nexport type ThreadState<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  /**\n   * Determines if the thread is currently opened and on-screen. When the thread is active,\n   * all new messages are immediately marked as read.\n   */\n  active: boolean;\n  channel: Channel<SCG>;\n  createdAt: Date;\n  custom: ThreadResponseCustomData;\n  deletedAt: Date | null;\n  isLoading: boolean;\n  isStateStale: boolean;\n  pagination: ThreadRepliesPagination;\n  /**\n   * Thread is identified by and has a one-to-one relation with its parent message.\n   * We use parent message id as a thread id.\n   */\n  parentMessage: FormatMessageResponse<SCG>;\n  participants: ThreadResponse<SCG>['thread_participants'];\n  read: ThreadReadState;\n  replies: Array<FormatMessageResponse<SCG>>;\n  replyCount: number;\n  title: string;\n  updatedAt: Date | null;\n};\n\nexport type ThreadRepliesPagination = {\n  isLoadingNext: boolean;\n  isLoadingPrev: boolean;\n  nextCursor: string | null;\n  prevCursor: string | null;\n};\n\nexport type ThreadUserReadState<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  lastReadAt: Date;\n  unreadMessageCount: number;\n  user: UserResponse<SCG>;\n  lastReadMessageId?: string;\n};\n\nexport type ThreadReadState<SCG extends ExtendableGenerics = DefaultGenerics> = Record<\n  string,\n  ThreadUserReadState<SCG> | undefined\n>;\n\nconst DEFAULT_PAGE_LIMIT = 50;\nconst DEFAULT_SORT: { created_at: AscDesc }[] = [{ created_at: -1 }];\nconst MARK_AS_READ_THROTTLE_TIMEOUT = 1000;\n// TODO: remove this once we move to API v2\nexport const THREAD_RESPONSE_RESERVED_KEYS: Record<keyof ThreadResponse, true> = {\n  channel: true,\n  channel_cid: true,\n  created_at: true,\n  created_by_user_id: true,\n  parent_message_id: true,\n  title: true,\n  updated_at: true,\n  latest_replies: true,\n  active_participant_count: true,\n  deleted_at: true,\n  last_message_at: true,\n  participant_count: true,\n  reply_count: true,\n  read: true,\n  thread_participants: true,\n  created_by: true,\n  parent_message: true,\n};\n\n// TODO: remove this once we move to API v2\nconst constructCustomDataObject = <T extends ThreadResponse>(threadData: T) => {\n  const custom: ThreadResponseCustomData = {};\n\n  for (const key in threadData) {\n    if (THREAD_RESPONSE_RESERVED_KEYS[key as keyof ThreadResponse]) {\n      continue;\n    }\n\n    const customKey = key as keyof ThreadResponseCustomData;\n\n    custom[customKey] = threadData[customKey];\n  }\n\n  return custom;\n};\n\nexport class Thread<SCG extends ExtendableGenerics = DefaultGenerics> {\n  public readonly state: StateStore<ThreadState<SCG>>;\n  public readonly id: string;\n\n  private client: StreamChat<SCG>;\n  private unsubscribeFunctions: Set<() => void> = new Set();\n  private failedRepliesMap: Map<string, FormatMessageResponse<SCG>> = new Map();\n\n  constructor({ client, threadData }: { client: StreamChat<SCG>; threadData: ThreadResponse<SCG> }) {\n    const channel = client.channel(threadData.channel.type, threadData.channel.id, {\n      name: threadData.channel.name,\n    });\n    channel._hydrateMembers({ members: threadData.channel.members ?? [], overrideCurrentState: false });\n\n    // For when read object is undefined and due to that unreadMessageCount for\n    // the current user isn't being incremented on message.new\n    const placeholderReadResponse: ReadResponse[] = client.userID\n      ? [{ user: { id: client.userID }, unread_messages: 0, last_read: new Date().toISOString() }]\n      : [];\n\n    this.state = new StateStore<ThreadState<SCG>>({\n      // local only\n      active: false,\n      isLoading: false,\n      isStateStale: false,\n      // 99.9% should never change\n      channel,\n      createdAt: new Date(threadData.created_at),\n      // rest\n      deletedAt: threadData.deleted_at ? new Date(threadData.deleted_at) : null,\n      pagination: repliesPaginationFromInitialThread(threadData),\n      parentMessage: formatMessage(threadData.parent_message),\n      participants: threadData.thread_participants,\n      read: formatReadState(\n        !threadData.read || threadData.read.length === 0 ? placeholderReadResponse : threadData.read,\n      ),\n      replies: threadData.latest_replies.map(formatMessage),\n      replyCount: threadData.reply_count ?? 0,\n      updatedAt: threadData.updated_at ? new Date(threadData.updated_at) : null,\n      title: threadData.title,\n      custom: constructCustomDataObject(threadData),\n    });\n\n    this.id = threadData.parent_message_id;\n    this.client = client;\n  }\n\n  get channel() {\n    return this.state.getLatestValue().channel;\n  }\n\n  get hasStaleState() {\n    return this.state.getLatestValue().isStateStale;\n  }\n\n  get ownUnreadCount() {\n    return ownUnreadCountSelector(this.client.userID)(this.state.getLatestValue());\n  }\n\n  public activate = () => {\n    this.state.partialNext({ active: true });\n  };\n\n  public deactivate = () => {\n    this.state.partialNext({ active: false });\n  };\n\n  public reload = async () => {\n    if (this.state.getLatestValue().isLoading) {\n      return;\n    }\n\n    this.state.partialNext({ isLoading: true });\n\n    try {\n      const thread = await this.client.getThread(this.id, { watch: true });\n      this.hydrateState(thread);\n    } finally {\n      this.state.partialNext({ isLoading: false });\n    }\n  };\n\n  public hydrateState = (thread: Thread<SCG>) => {\n    if (thread === this) {\n      // skip if the instances are the same\n      return;\n    }\n\n    if (thread.id !== this.id) {\n      throw new Error(\"Cannot hydrate thread state with using thread's state\");\n    }\n\n    const {\n      read,\n      replyCount,\n      replies,\n      parentMessage,\n      participants,\n      createdAt,\n      deletedAt,\n      updatedAt,\n    } = thread.state.getLatestValue();\n\n    // Preserve pending replies and append them to the updated list of replies\n    const pendingReplies = Array.from(this.failedRepliesMap.values());\n\n    this.state.partialNext({\n      read,\n      replyCount,\n      replies: pendingReplies.length ? replies.concat(pendingReplies) : replies,\n      parentMessage,\n      participants,\n      createdAt,\n      deletedAt,\n      updatedAt,\n      isStateStale: false,\n    });\n  };\n\n  public registerSubscriptions = () => {\n    if (this.unsubscribeFunctions.size) {\n      // Thread is already listening for events and changes\n      return;\n    }\n\n    this.unsubscribeFunctions.add(this.subscribeThreadUpdated());\n    this.unsubscribeFunctions.add(this.subscribeMarkActiveThreadRead());\n    this.unsubscribeFunctions.add(this.subscribeReloadActiveStaleThread());\n    this.unsubscribeFunctions.add(this.subscribeMarkThreadStale());\n    this.unsubscribeFunctions.add(this.subscribeNewReplies());\n    this.unsubscribeFunctions.add(this.subscribeRepliesRead());\n    this.unsubscribeFunctions.add(this.subscribeMessageDeleted());\n    this.unsubscribeFunctions.add(this.subscribeMessageUpdated());\n  };\n\n  private subscribeThreadUpdated = () => {\n    return this.client.on('thread.updated', (event) => {\n      if (!event.thread || event.thread.parent_message_id !== this.id) {\n        return;\n      }\n\n      const threadData = event.thread;\n\n      this.state.partialNext({\n        title: threadData.title,\n        updatedAt: new Date(threadData.updated_at),\n        deletedAt: threadData.deleted_at ? new Date(threadData.deleted_at) : null,\n        // TODO: use threadData.custom once we move to API v2\n        custom: constructCustomDataObject(threadData),\n      });\n    }).unsubscribe;\n  };\n\n  private subscribeMarkActiveThreadRead = () => {\n    return this.state.subscribeWithSelector(\n      (nextValue) => ({\n        active: nextValue.active,\n        unreadMessageCount: ownUnreadCountSelector(this.client.userID)(nextValue),\n      }),\n      ({ active, unreadMessageCount }) => {\n        if (!active || !unreadMessageCount) return;\n        this.throttledMarkAsRead();\n      },\n    );\n  };\n\n  private subscribeReloadActiveStaleThread = () =>\n    this.state.subscribeWithSelector(\n      (nextValue) => ({ active: nextValue.active, isStateStale: nextValue.isStateStale }),\n      ({ active, isStateStale }) => {\n        if (active && isStateStale) {\n          this.reload();\n        }\n      },\n    );\n\n  private subscribeMarkThreadStale = () =>\n    this.client.on('user.watching.stop', (event) => {\n      const { channel } = this.state.getLatestValue();\n\n      if (!this.client.userID || this.client.userID !== event.user?.id || event.channel?.cid !== channel.cid) {\n        return;\n      }\n\n      this.state.partialNext({ isStateStale: true });\n    }).unsubscribe;\n\n  private subscribeNewReplies = () =>\n    this.client.on('message.new', (event) => {\n      if (!this.client.userID || event.message?.parent_id !== this.id) {\n        return;\n      }\n\n      const isOwnMessage = event.message.user?.id === this.client.userID;\n      const { active, read } = this.state.getLatestValue();\n\n      this.upsertReplyLocally({\n        message: event.message,\n        // Message from current user could have been added optimistically,\n        // so the actual timestamp might differ in the event\n        timestampChanged: isOwnMessage,\n      });\n\n      if (active) {\n        this.throttledMarkAsRead();\n      }\n\n      const nextRead: ThreadReadState = {};\n\n      for (const userId of Object.keys(read)) {\n        const userRead = read[userId];\n\n        if (userRead) {\n          let nextUserRead: ThreadUserReadState = userRead;\n\n          if (userId === event.user?.id) {\n            // The user who just sent a message to the thread has no unread messages\n            // in that thread\n            nextUserRead = {\n              ...nextUserRead,\n              lastReadAt: event.created_at ? new Date(event.created_at) : new Date(),\n              user: event.user,\n              unreadMessageCount: 0,\n            };\n          } else if (active && userId === this.client.userID) {\n            // Do not increment unread count for the current user in an active thread\n          } else {\n            // Increment unread count for all users except the author of the new message\n            nextUserRead = {\n              ...nextUserRead,\n              unreadMessageCount: userRead.unreadMessageCount + 1,\n            };\n          }\n\n          nextRead[userId] = nextUserRead;\n        }\n      }\n\n      this.state.partialNext({ read: nextRead });\n    }).unsubscribe;\n\n  private subscribeRepliesRead = () =>\n    this.client.on('message.read', (event) => {\n      if (!event.user || !event.created_at || !event.thread) return;\n      if (event.thread.parent_message_id !== this.id) return;\n\n      const userId = event.user.id;\n      const createdAt = event.created_at;\n      const user = event.user;\n\n      this.state.next((current) => ({\n        ...current,\n        read: {\n          ...current.read,\n          [userId]: {\n            lastReadAt: new Date(createdAt),\n            user,\n            lastReadMessageId: event.last_read_message_id,\n            unreadMessageCount: 0,\n          },\n        },\n      }));\n    }).unsubscribe;\n\n  private subscribeMessageDeleted = () =>\n    this.client.on('message.deleted', (event) => {\n      if (!event.message) return;\n\n      // Deleted message is a reply of this thread\n      if (event.message.parent_id === this.id) {\n        if (event.hard_delete) {\n          this.deleteReplyLocally({ message: event.message });\n        } else {\n          // Handle soft delete (updates deleted_at timestamp)\n          this.upsertReplyLocally({ message: event.message });\n        }\n      }\n\n      // Deleted message is parent message of this thread\n      if (event.message.id === this.id) {\n        this.updateParentMessageLocally({ message: event.message });\n      }\n    }).unsubscribe;\n\n  private subscribeMessageUpdated = () => {\n    const eventTypes: EventTypes[] = ['message.updated', 'reaction.new', 'reaction.deleted', 'reaction.updated'];\n\n    const unsubscribeFunctions = eventTypes.map(\n      (eventType) =>\n        this.client.on(eventType, (event) => {\n          if (event.message) {\n            this.updateParentMessageOrReplyLocally(event.message);\n          }\n        }).unsubscribe,\n    );\n\n    return () => unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n  };\n\n  public unregisterSubscriptions = () => {\n    this.unsubscribeFunctions.forEach((cleanupFunction) => cleanupFunction());\n    this.unsubscribeFunctions.clear();\n  };\n\n  public deleteReplyLocally = ({ message }: { message: MessageResponse<SCG> }) => {\n    const { replies } = this.state.getLatestValue();\n\n    const index = findIndexInSortedArray({\n      needle: formatMessage(message),\n      sortedArray: replies,\n      sortDirection: 'ascending',\n      selectValueToCompare: (reply) => reply.created_at.getTime(),\n      selectKey: (reply) => reply.id,\n    });\n\n    if (replies[index]?.id !== message.id) {\n      return;\n    }\n\n    const updatedReplies = [...replies];\n    updatedReplies.splice(index, 1);\n\n    this.state.partialNext({\n      replies: updatedReplies,\n    });\n  };\n\n  public upsertReplyLocally = ({\n    message,\n    timestampChanged = false,\n  }: {\n    message: MessageResponse<SCG>;\n    timestampChanged?: boolean;\n  }) => {\n    if (message.parent_id !== this.id) {\n      throw new Error('Reply does not belong to this thread');\n    }\n\n    const formattedMessage = formatMessage(message);\n\n    if (message.status === 'failed') {\n      // store failed reply so that it's not lost when reloading or hydrating\n      this.failedRepliesMap.set(formattedMessage.id, formattedMessage);\n    } else if (this.failedRepliesMap.has(message.id)) {\n      this.failedRepliesMap.delete(message.id);\n    }\n\n    this.state.next((current) => ({\n      ...current,\n      replies: addToMessageList(current.replies, formattedMessage, timestampChanged),\n    }));\n  };\n\n  public updateParentMessageLocally = ({ message }: { message: MessageResponse<SCG> }) => {\n    if (message.id !== this.id) {\n      throw new Error('Message does not belong to this thread');\n    }\n\n    this.state.next((current) => {\n      const formattedMessage = formatMessage(message);\n\n      return {\n        ...current,\n        deletedAt: formattedMessage.deleted_at,\n        parentMessage: formattedMessage,\n        replyCount: message.reply_count ?? current.replyCount,\n      };\n    });\n  };\n\n  public updateParentMessageOrReplyLocally = (message: MessageResponse<SCG>) => {\n    if (message.parent_id === this.id) {\n      this.upsertReplyLocally({ message });\n    }\n\n    if (!message.parent_id && message.id === this.id) {\n      this.updateParentMessageLocally({ message });\n    }\n  };\n\n  public markAsRead = async ({ force = false }: { force?: boolean } = {}) => {\n    if (this.ownUnreadCount === 0 && !force) {\n      return null;\n    }\n\n    return await this.channel.markRead({ thread_id: this.id });\n  };\n\n  private throttledMarkAsRead = throttle(() => this.markAsRead(), MARK_AS_READ_THROTTLE_TIMEOUT, { trailing: true });\n\n  public queryReplies = ({\n    limit = DEFAULT_PAGE_LIMIT,\n    sort = DEFAULT_SORT,\n    ...otherOptions\n  }: QueryRepliesOptions<SCG> = {}) => {\n    return this.channel.getReplies(this.id, { limit, ...otherOptions }, sort);\n  };\n\n  public loadNextPage = ({ limit = DEFAULT_PAGE_LIMIT }: { limit?: number } = {}) => {\n    return this.loadPage(limit);\n  };\n\n  public loadPrevPage = ({ limit = DEFAULT_PAGE_LIMIT }: { limit?: number } = {}) => {\n    return this.loadPage(-limit);\n  };\n\n  private loadPage = async (count: number) => {\n    const { pagination } = this.state.getLatestValue();\n    const [loadingKey, cursorKey, insertionMethodKey] =\n      count > 0\n        ? (['isLoadingNext', 'nextCursor', 'push'] as const)\n        : (['isLoadingPrev', 'prevCursor', 'unshift'] as const);\n\n    if (pagination[loadingKey] || pagination[cursorKey] === null) return;\n\n    const queryOptions = { [count > 0 ? 'id_gt' : 'id_lt']: pagination[cursorKey] };\n    const limit = Math.abs(count);\n\n    this.state.partialNext({ pagination: { ...pagination, [loadingKey]: true } });\n\n    try {\n      const data = await this.queryReplies({ ...queryOptions, limit });\n      const replies = data.messages.map(formatMessage);\n      const maybeNextCursor = replies.at(count > 0 ? -1 : 0)?.id ?? null;\n\n      this.state.next((current) => {\n        let nextReplies = current.replies;\n\n        // prevent re-creating array if there's nothing to add to the current one\n        if (replies.length > 0) {\n          nextReplies = [...current.replies];\n          nextReplies[insertionMethodKey](...replies);\n        }\n\n        return {\n          ...current,\n          replies: nextReplies,\n          pagination: {\n            ...current.pagination,\n            [cursorKey]: data.messages.length < limit ? null : maybeNextCursor,\n            [loadingKey]: false,\n          },\n        };\n      });\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          [loadingKey]: false,\n        },\n      }));\n    }\n  };\n}\n\nconst formatReadState = (read: ReadResponse[]): ThreadReadState =>\n  read.reduce<ThreadReadState>((state, userRead) => {\n    state[userRead.user.id] = {\n      user: userRead.user,\n      lastReadMessageId: userRead.last_read_message_id,\n      unreadMessageCount: userRead.unread_messages ?? 0,\n      lastReadAt: new Date(userRead.last_read),\n    };\n    return state;\n  }, {});\n\nconst repliesPaginationFromInitialThread = (thread: ThreadResponse): ThreadRepliesPagination => {\n  const latestRepliesContainsAllReplies = thread.latest_replies.length === thread.reply_count;\n\n  return {\n    nextCursor: null,\n    prevCursor: latestRepliesContainsAllReplies ? null : thread.latest_replies.at(0)?.id ?? null,\n    isLoadingNext: false,\n    isLoadingPrev: false,\n  };\n};\n\nconst ownUnreadCountSelector = (currentUserId: string | undefined) => <\n  SCG extends ExtendableGenerics = DefaultGenerics\n>(\n  state: ThreadState<SCG>,\n) => (currentUserId && state.read[currentUserId]?.unreadMessageCount) || 0;\n","import {\n  APIResponse,\n  ModerationConfig,\n  DefaultGenerics,\n  ExtendableGenerics,\n  GetConfigResponse,\n  GetUserModerationReportResponse,\n  MuteUserResponse,\n  ReviewQueueFilters,\n  ReviewQueuePaginationOptions,\n  ReviewQueueResponse,\n  ReviewQueueSort,\n  UpsertConfigResponse,\n  ModerationFlagOptions,\n  ModerationMuteOptions,\n  GetUserModerationReportOptions,\n  SubmitActionOptions,\n  QueryModerationConfigsFilters,\n  QueryModerationConfigsSort,\n  Pager,\n  CustomCheckFlag,\n  ReviewQueueItem,\n  QueryConfigsResponse,\n} from './types';\nimport { StreamChat } from './client';\nimport { normalizeQuerySort } from './utils';\n\nexport const MODERATION_ENTITY_TYPES = {\n  user: 'stream:user',\n  message: 'stream:chat:v1:message',\n};\n\n// Moderation class provides all the endpoints related to moderation v2.\nexport class Moderation<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  client: StreamChat<StreamChatGenerics>;\n\n  constructor(client: StreamChat<StreamChatGenerics>) {\n    this.client = client;\n  }\n\n  /**\n   * Flag a user\n   *\n   * @param {string} flaggedUserID User ID to be flagged\n   * @param {string} reason Reason for flagging the user\n   * @param {Object} options Additional options for flagging the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target user\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  async flagUser(flaggedUserID: string, reason: string, options: ModerationFlagOptions = {}) {\n    return this.flag(MODERATION_ENTITY_TYPES.user, flaggedUserID, '', reason, options);\n  }\n\n  /**\n   * Flag a message\n   *\n   * @param {string} messageID Message ID to be flagged\n   * @param {string} reason Reason for flagging the message\n   * @param {Object} options Additional options for flagging the message\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target message\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  async flagMessage(messageID: string, reason: string, options: ModerationFlagOptions = {}) {\n    return this.flag(MODERATION_ENTITY_TYPES.message, messageID, '', reason, options);\n  }\n\n  /**\n   * Flag a user\n   *\n   * @param {string} entityType Entity type to be flagged\n   * @param {string} entityId Entity ID to be flagged\n   * @param {string} entityCreatorID User ID of the entity creator\n   * @param {string} reason Reason for flagging the entity\n   * @param {Object} options Additional options for flagging the entity\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target entity\n   * @param {Object} options.moderation_payload Content to be flagged e.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  async flag(\n    entityType: string,\n    entityId: string,\n    entityCreatorID: string,\n    reason: string,\n    options: ModerationFlagOptions = {},\n  ) {\n    return await this.client.post<{ item_id: string } & APIResponse>(this.client.baseURL + '/api/v2/moderation/flag', {\n      entity_type: entityType,\n      entity_id: entityId,\n      entity_creator_id: entityCreatorID,\n      reason,\n      ...options,\n    });\n  }\n\n  /**\n   * Mute a user\n   * @param {string} targetID  User ID to be muted\n   * @param {Object} options Additional options for muting the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is muting the target user\n   * @param {number} options.timeout Timeout for the mute in minutes\n   * @returns\n   */\n  async muteUser(targetID: string, options: ModerationMuteOptions = {}) {\n    return await this.client.post<MuteUserResponse<StreamChatGenerics> & APIResponse>(\n      this.client.baseURL + '/api/v2/moderation/mute',\n      {\n        target_ids: [targetID],\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Unmute a user\n   * @param {string} targetID  User ID to be unmuted\n   * @param {Object} options Additional options for unmuting the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is unmuting the target user\n   * @returns\n   */\n  async unmuteUser(\n    targetID: string,\n    options: {\n      user_id?: string;\n    },\n  ) {\n    return await this.client.post<{ item_id: string } & APIResponse>(\n      this.client.baseURL + '/api/v2/moderation/unmute',\n      {\n        target_ids: [targetID],\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Get moderation report for a user\n   * @param {string} userID User ID for which moderation report is to be fetched\n   * @param {Object} options Additional options for fetching the moderation report\n   * @param {boolean} options.create_user_if_not_exists Create user if not exists\n   * @param {boolean} options.include_user_blocks Include user blocks\n   * @param {boolean} options.include_user_mutes Include user mutes\n   */\n  async getUserModerationReport(userID: string, options: GetUserModerationReportOptions = {}) {\n    return await this.client.get<GetUserModerationReportResponse<StreamChatGenerics>>(\n      this.client.baseURL + `/api/v2/moderation/user_report`,\n      {\n        user_id: userID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Query review queue\n   * @param {Object} filterConditions Filter conditions for querying review queue\n   * @param {Object} sort Sort conditions for querying review queue\n   * @param {Object} options Pagination options for querying review queue\n   */\n  async queryReviewQueue(\n    filterConditions: ReviewQueueFilters = {},\n    sort: ReviewQueueSort = [],\n    options: ReviewQueuePaginationOptions = {},\n  ) {\n    return await this.client.post<ReviewQueueResponse>(this.client.baseURL + '/api/v2/moderation/review_queue', {\n      filter: filterConditions,\n      sort: normalizeQuerySort(sort),\n      ...options,\n    });\n  }\n\n  /**\n   * Upsert moderation config\n   * @param {Object} config Moderation config to be upserted\n   */\n  async upsertConfig(config: ModerationConfig) {\n    return await this.client.post<UpsertConfigResponse>(this.client.baseURL + '/api/v2/moderation/config', config);\n  }\n\n  /**\n   * Get moderation config\n   * @param {string} key Key for which moderation config is to be fetched\n   */\n  async getConfig(key: string, data?: { team?: string }) {\n    return await this.client.get<GetConfigResponse>(this.client.baseURL + '/api/v2/moderation/config/' + key, data);\n  }\n\n  async deleteConfig(key: string, data?: { team?: string }) {\n    return await this.client.delete(this.client.baseURL + '/api/v2/moderation/config/' + key, data);\n  }\n\n  /**\n   * Query moderation configs\n   * @param {Object} filterConditions Filter conditions for querying moderation configs\n   * @param {Object} sort Sort conditions for querying moderation configs\n   * @param {Object} options Additional options for querying moderation configs\n   */\n  async queryConfigs(\n    filterConditions: QueryModerationConfigsFilters,\n    sort: QueryModerationConfigsSort,\n    options: Pager = {},\n  ) {\n    return await this.client.post<QueryConfigsResponse>(this.client.baseURL + '/api/v2/moderation/configs', {\n      filter: filterConditions,\n      sort,\n      ...options,\n    });\n  }\n\n  async submitAction(actionType: string, itemID: string, options: SubmitActionOptions = {}) {\n    return await this.client.post<{ item_id: string } & APIResponse>(\n      this.client.baseURL + '/api/v2/moderation/submit_action',\n      {\n        action_type: actionType,\n        item_id: itemID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   *\n   * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string\n   * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes\n   * @param {string} entityCreatorID string ID of the entity creator\n   * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation\n   * @param {Array} moderationPayload.images array Array of images to be checked for moderation\n   * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation\n   * @param configKey\n   * @param options\n   * @returns\n   */\n  async check(\n    entityType: string,\n    entityID: string,\n    entityCreatorID: string,\n    moderationPayload: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      custom?: Record<string, any>;\n      images?: string[];\n      texts?: string[];\n      videos?: string[];\n    },\n    configKey: string,\n    options?: {\n      force_sync?: boolean;\n    },\n  ) {\n    return await this.client.post(this.client.baseURL + `/api/v2/moderation/check`, {\n      entity_type: entityType,\n      entity_id: entityID,\n      entity_creator_id: entityCreatorID,\n      moderation_payload: moderationPayload,\n      config_key: configKey,\n      options,\n    });\n  }\n\n  /**\n   *\n   * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string\n   * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes\n   * @param {string} entityCreatorID string ID of the entity creator\n   * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation\n   * @param {Array} moderationPayload.images array Array of images to be checked for moderation\n   * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation\n   * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the entity\n   * @returns\n   */\n  async addCustomFlags(\n    entityType: string,\n    entityID: string,\n    entityCreatorID: string,\n    moderationPayload: {\n      images?: string[];\n      texts?: string[];\n      videos?: string[];\n    },\n    flags: CustomCheckFlag[],\n  ) {\n    return await this.client.post<{ id: string; item: ReviewQueueItem; status: string } & APIResponse>(\n      this.client.baseURL + `/api/v2/moderation/custom_check`,\n      {\n        entity_type: entityType,\n        entity_id: entityID,\n        entity_creator_id: entityCreatorID,\n        moderation_payload: moderationPayload,\n        flags,\n      },\n    );\n  }\n\n  /**\n   * Add custom flags to a message\n   * @param {string} messageID Message ID to be flagged\n   * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the message\n   * @returns\n   */\n  async addCustomMessageFlags(messageID: string, flags: CustomCheckFlag[]) {\n    return await this.addCustomFlags(MODERATION_ENTITY_TYPES.message, messageID, '', {}, flags);\n  }\n}\n","import { StateStore } from './store';\nimport { throttle } from './utils';\n\nimport type { StreamChat } from './client';\nimport type { Thread } from './thread';\nimport type { DefaultGenerics, Event, ExtendableGenerics, OwnUserResponse, QueryThreadsOptions } from './types';\n\nconst DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION = 1000;\nconst MAX_QUERY_THREADS_LIMIT = 25;\nexport const THREAD_MANAGER_INITIAL_STATE = {\n  active: false,\n  isThreadOrderStale: false,\n  threads: [],\n  unreadThreadCount: 0,\n  unseenThreadIds: [],\n  lastConnectionDropAt: null,\n  pagination: {\n    isLoading: false,\n    isLoadingNext: false,\n    nextCursor: null,\n  },\n  ready: false,\n};\n\nexport type ThreadManagerState<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  active: boolean;\n  isThreadOrderStale: boolean;\n  lastConnectionDropAt: Date | null;\n  pagination: ThreadManagerPagination;\n  ready: boolean;\n  threads: Thread<SCG>[];\n  unreadThreadCount: number;\n  /**\n   * List of threads that haven't been loaded in the list, but have received new messages\n   * since the latest reload. Useful to display a banner prompting to reload the thread list.\n   */\n  unseenThreadIds: string[];\n};\n\nexport type ThreadManagerPagination = {\n  isLoading: boolean;\n  isLoadingNext: boolean;\n  nextCursor: string | null;\n};\n\nexport class ThreadManager<SCG extends ExtendableGenerics = DefaultGenerics> {\n  public readonly state: StateStore<ThreadManagerState<SCG>>;\n  private client: StreamChat<SCG>;\n  private unsubscribeFunctions: Set<() => void> = new Set();\n  private threadsByIdGetterCache: {\n    threads: ThreadManagerState<SCG>['threads'];\n    threadsById: Record<string, Thread<SCG> | undefined>;\n  };\n\n  constructor({ client }: { client: StreamChat<SCG> }) {\n    this.client = client;\n    this.state = new StateStore<ThreadManagerState<SCG>>(THREAD_MANAGER_INITIAL_STATE);\n\n    this.threadsByIdGetterCache = { threads: [], threadsById: {} };\n  }\n\n  public get threadsById() {\n    const { threads } = this.state.getLatestValue();\n\n    if (threads === this.threadsByIdGetterCache.threads) {\n      return this.threadsByIdGetterCache.threadsById;\n    }\n\n    const threadsById = threads.reduce<Record<string, Thread<SCG>>>((newThreadsById, thread) => {\n      newThreadsById[thread.id] = thread;\n      return newThreadsById;\n    }, {});\n\n    this.threadsByIdGetterCache.threads = threads;\n    this.threadsByIdGetterCache.threadsById = threadsById;\n\n    return threadsById;\n  }\n\n  public resetState = () => {\n    this.state.next(THREAD_MANAGER_INITIAL_STATE);\n  };\n\n  public activate = () => {\n    this.state.partialNext({ active: true });\n  };\n\n  public deactivate = () => {\n    this.state.partialNext({ active: false });\n  };\n\n  public registerSubscriptions = () => {\n    if (this.unsubscribeFunctions.size) return;\n\n    this.unsubscribeFunctions.add(this.subscribeUnreadThreadsCountChange());\n    this.unsubscribeFunctions.add(this.subscribeManageThreadSubscriptions());\n    this.unsubscribeFunctions.add(this.subscribeReloadOnActivation());\n    this.unsubscribeFunctions.add(this.subscribeNewReplies());\n    this.unsubscribeFunctions.add(this.subscribeRecoverAfterConnectionDrop());\n    this.unsubscribeFunctions.add(this.subscribeChannelDeleted());\n  };\n\n  private subscribeUnreadThreadsCountChange = () => {\n    // initiate\n    const { unread_threads: unreadThreadCount = 0 } = (this.client.user as OwnUserResponse<SCG>) ?? {};\n    this.state.partialNext({ unreadThreadCount });\n\n    const unsubscribeFunctions = [\n      'health.check',\n      'notification.mark_read',\n      'notification.thread_message_new',\n      'notification.channel_deleted',\n    ].map(\n      (eventType) =>\n        this.client.on(eventType, (event) => {\n          const { unread_threads: unreadThreadCount } = event.me ?? event;\n          if (typeof unreadThreadCount === 'number') {\n            this.state.partialNext({ unreadThreadCount });\n          }\n        }).unsubscribe,\n    );\n\n    return () => unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n  };\n\n  private subscribeChannelDeleted = () =>\n    this.client.on('notification.channel_deleted', (event) => {\n      const { cid } = event;\n      const { threads } = this.state.getLatestValue();\n\n      const newThreads = threads.filter((thread) => thread.channel.cid !== cid);\n      this.state.partialNext({ threads: newThreads });\n    }).unsubscribe;\n\n  private subscribeManageThreadSubscriptions = () =>\n    this.state.subscribeWithSelector(\n      (nextValue) => ({ threads: nextValue.threads }),\n      ({ threads: nextThreads }, prev) => {\n        const { threads: prevThreads = [] } = prev ?? {};\n        // Thread instance was removed if there's no thread with the given id at all,\n        // or it was replaced with a new instance\n        const removedThreads = prevThreads.filter((thread) => thread !== this.threadsById[thread.id]);\n\n        nextThreads.forEach((thread) => thread.registerSubscriptions());\n        removedThreads.forEach((thread) => thread.unregisterSubscriptions());\n      },\n    );\n\n  private subscribeReloadOnActivation = () =>\n    this.state.subscribeWithSelector(\n      (nextValue) => ({ active: nextValue.active }),\n      ({ active }) => {\n        if (active) this.reload();\n      },\n    );\n\n  private subscribeNewReplies = () =>\n    this.client.on('notification.thread_message_new', (event: Event<SCG>) => {\n      const parentId = event.message?.parent_id;\n      if (!parentId) return;\n\n      const { unseenThreadIds, ready } = this.state.getLatestValue();\n      if (!ready) return;\n\n      if (this.threadsById[parentId]) {\n        this.state.partialNext({ isThreadOrderStale: true });\n      } else if (!unseenThreadIds.includes(parentId)) {\n        this.state.partialNext({ unseenThreadIds: unseenThreadIds.concat(parentId) });\n      }\n    }).unsubscribe;\n\n  private subscribeRecoverAfterConnectionDrop = () => {\n    const unsubscribeConnectionDropped = this.client.on('connection.changed', (event) => {\n      if (event.online === false) {\n        this.state.next((current) =>\n          current.lastConnectionDropAt\n            ? current\n            : {\n                ...current,\n                lastConnectionDropAt: new Date(),\n              },\n        );\n      }\n    }).unsubscribe;\n\n    const throttledHandleConnectionRecovered = throttle(\n      () => {\n        const { lastConnectionDropAt } = this.state.getLatestValue();\n        if (!lastConnectionDropAt) return;\n        this.reload({ force: true });\n      },\n      DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION,\n      { trailing: true },\n    );\n\n    const unsubscribeConnectionRecovered = this.client.on('connection.recovered', throttledHandleConnectionRecovered)\n      .unsubscribe;\n\n    return () => {\n      unsubscribeConnectionDropped();\n      unsubscribeConnectionRecovered();\n    };\n  };\n\n  public unregisterSubscriptions = () => {\n    this.state.getLatestValue().threads.forEach((thread) => thread.unregisterSubscriptions());\n    this.unsubscribeFunctions.forEach((cleanupFunction) => cleanupFunction());\n    this.unsubscribeFunctions.clear();\n  };\n\n  public reload = async ({ force = false } = {}) => {\n    const { threads, unseenThreadIds, isThreadOrderStale, pagination, ready } = this.state.getLatestValue();\n    if (pagination.isLoading) return;\n    if (!force && ready && !unseenThreadIds.length && !isThreadOrderStale) return;\n    const limit = threads.length + unseenThreadIds.length;\n\n    try {\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          isLoading: true,\n        },\n      }));\n\n      const response = await this.queryThreads({\n        limit: Math.min(limit, MAX_QUERY_THREADS_LIMIT) || MAX_QUERY_THREADS_LIMIT,\n      });\n\n      const currentThreads = this.threadsById;\n      const nextThreads: Thread<SCG>[] = [];\n\n      for (const incomingThread of response.threads) {\n        const existingThread = currentThreads[incomingThread.id];\n\n        if (existingThread) {\n          // Reuse thread instances if possible\n          nextThreads.push(existingThread);\n          if (existingThread.hasStaleState) {\n            existingThread.hydrateState(incomingThread);\n          }\n        } else {\n          nextThreads.push(incomingThread);\n        }\n      }\n\n      this.state.next((current) => ({\n        ...current,\n        threads: nextThreads,\n        unseenThreadIds: [],\n        isThreadOrderStale: false,\n        pagination: {\n          ...current.pagination,\n          isLoading: false,\n          nextCursor: response.next ?? null,\n        },\n        ready: true,\n      }));\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          isLoading: false,\n        },\n      }));\n    }\n  };\n\n  public queryThreads = (options: QueryThreadsOptions = {}) => {\n    return this.client.queryThreads({\n      limit: 25,\n      participant_limit: 10,\n      reply_limit: 10,\n      watch: true,\n      ...options,\n    });\n  };\n\n  public loadNextPage = async (options: Omit<QueryThreadsOptions, 'next'> = {}) => {\n    const { pagination } = this.state.getLatestValue();\n\n    if (pagination.isLoadingNext || !pagination.nextCursor) return;\n\n    try {\n      this.state.partialNext({ pagination: { ...pagination, isLoadingNext: true } });\n\n      const response = await this.queryThreads({\n        ...options,\n        next: pagination.nextCursor,\n      });\n\n      this.state.next((current) => ({\n        ...current,\n        threads: response.threads.length ? current.threads.concat(response.threads) : current.threads,\n        pagination: {\n          ...current.pagination,\n          nextCursor: response.next ?? null,\n          isLoadingNext: false,\n        },\n      }));\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          isLoadingNext: false,\n        },\n      }));\n    }\n  };\n}\n","import { StateStore } from './store';\nimport type { StreamChat } from './client';\nimport type {\n  DefaultGenerics,\n  Event,\n  ExtendableGenerics,\n  PartialPollUpdate,\n  PollAnswer,\n  PollData,\n  PollEnrichData,\n  PollOptionData,\n  PollResponse,\n  PollVote,\n  QueryVotesFilters,\n  QueryVotesOptions,\n  VoteSort,\n} from './types';\n\ntype PollEvent<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  cid: string;\n  created_at: string;\n  poll: PollResponse<SCG>;\n};\n\ntype PollUpdatedEvent<SCG extends ExtendableGenerics = DefaultGenerics> = PollEvent<SCG> & {\n  type: 'poll.updated';\n};\n\ntype PollClosedEvent<SCG extends ExtendableGenerics = DefaultGenerics> = PollEvent<SCG> & {\n  type: 'poll.closed';\n};\n\ntype PollVoteEvent<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  cid: string;\n  created_at: string;\n  poll: PollResponse<SCG>;\n  poll_vote: PollVote<SCG> | PollAnswer<SCG>;\n};\n\ntype PollVoteCastedEvent<SCG extends ExtendableGenerics = DefaultGenerics> = PollVoteEvent<SCG> & {\n  type: 'poll.vote_casted';\n};\n\ntype PollVoteCastedChanged<SCG extends ExtendableGenerics = DefaultGenerics> = PollVoteEvent<SCG> & {\n  type: 'poll.vote_removed';\n};\n\ntype PollVoteCastedRemoved<SCG extends ExtendableGenerics = DefaultGenerics> = PollVoteEvent<SCG> & {\n  type: 'poll.vote_removed';\n};\n\nconst isPollUpdatedEvent = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  e: Event<SCG>,\n): e is PollUpdatedEvent<SCG> => e.type === 'poll.updated';\nconst isPollClosedEventEvent = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  e: Event<SCG>,\n): e is PollClosedEvent<SCG> => e.type === 'poll.closed';\nconst isPollVoteCastedEvent = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  e: Event<SCG>,\n): e is PollVoteCastedEvent<SCG> => e.type === 'poll.vote_casted';\nconst isPollVoteChangedEvent = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  e: Event<SCG>,\n): e is PollVoteCastedChanged<SCG> => e.type === 'poll.vote_changed';\nconst isPollVoteRemovedEvent = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  e: Event<SCG>,\n): e is PollVoteCastedRemoved<SCG> => e.type === 'poll.vote_removed';\n\nexport const isVoteAnswer = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  vote: PollVote<SCG> | PollAnswer<SCG>,\n): vote is PollAnswer<SCG> => !!(vote as PollAnswer<SCG>)?.answer_text;\n\nexport type PollAnswersQueryParams = {\n  filter?: QueryVotesFilters;\n  options?: QueryVotesOptions;\n  sort?: VoteSort;\n};\n\nexport type PollOptionVotesQueryParams = {\n  filter: { option_id: string } & QueryVotesFilters;\n  options?: QueryVotesOptions;\n  sort?: VoteSort;\n};\n\ntype OptionId = string;\n\nexport type PollState<SCG extends ExtendableGenerics = DefaultGenerics> = SCG['pollType'] &\n  Omit<PollResponse<SCG>, 'own_votes' | 'id'> & {\n    lastActivityAt: Date; // todo: would be ideal to get this from the BE\n    maxVotedOptionIds: OptionId[];\n    ownVotesByOptionId: Record<OptionId, PollVote<SCG>>;\n    ownAnswer?: PollAnswer; // each user can have only one answer\n  };\n\ntype PollInitOptions<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  client: StreamChat<SCG>;\n  poll: PollResponse<SCG>;\n};\n\nexport class Poll<SCG extends ExtendableGenerics = DefaultGenerics> {\n  public readonly state: StateStore<PollState<SCG>>;\n  public id: string;\n  private client: StreamChat<SCG>;\n  private unsubscribeFunctions: Set<() => void> = new Set();\n\n  constructor({ client, poll }: PollInitOptions<SCG>) {\n    this.client = client;\n    this.id = poll.id;\n\n    this.state = new StateStore<PollState<SCG>>(this.getInitialStateFromPollResponse(poll));\n  }\n\n  private getInitialStateFromPollResponse = (poll: PollInitOptions<SCG>['poll']) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { own_votes, id, ...pollResponseForState } = poll;\n    const { ownAnswer, ownVotes } = own_votes?.reduce<{ ownVotes: PollVote<SCG>[]; ownAnswer?: PollAnswer }>(\n      (acc, voteOrAnswer) => {\n        if (isVoteAnswer(voteOrAnswer)) {\n          acc.ownAnswer = voteOrAnswer;\n        } else {\n          acc.ownVotes.push(voteOrAnswer);\n        }\n        return acc;\n      },\n      { ownVotes: [] },\n    ) ?? { ownVotes: [] };\n\n    return {\n      ...pollResponseForState,\n      lastActivityAt: new Date(),\n      maxVotedOptionIds: getMaxVotedOptionIds(\n        pollResponseForState.vote_counts_by_option as PollResponse<SCG>['vote_counts_by_option'],\n      ),\n      ownAnswer,\n      ownVotesByOptionId: getOwnVotesByOptionId(ownVotes),\n    };\n  };\n\n  public reinitializeState = (poll: PollInitOptions<SCG>['poll']) => {\n    this.state.partialNext(this.getInitialStateFromPollResponse(poll));\n  };\n\n  get data(): PollState<SCG> {\n    return this.state.getLatestValue();\n  }\n\n  public handlePollUpdated = (event: Event<SCG>) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollUpdatedEvent(event)) return;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...pollData } = extractPollData(event.poll);\n    // @ts-ignore\n    this.state.partialNext({ ...pollData, lastActivityAt: new Date(event.created_at) });\n  };\n\n  public handlePollClosed = (event: Event<SCG>) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollClosedEventEvent(event)) return;\n    // @ts-ignore\n    this.state.partialNext({ is_closed: true, lastActivityAt: new Date(event.created_at) });\n  };\n\n  public handleVoteCasted = (event: Event<SCG>) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollVoteCastedEvent(event)) return;\n    const currentState = this.data;\n    const isOwnVote = event.poll_vote.user_id === this.client.userID;\n    let latestAnswers = [...(currentState.latest_answers as PollAnswer[])];\n    let ownAnswer = currentState.ownAnswer;\n    const ownVotesByOptionId = currentState.ownVotesByOptionId;\n    let maxVotedOptionIds = currentState.maxVotedOptionIds;\n\n    if (isOwnVote) {\n      if (isVoteAnswer(event.poll_vote)) {\n        ownAnswer = event.poll_vote;\n      } else if (event.poll_vote.option_id) {\n        ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;\n      }\n    }\n\n    if (isVoteAnswer(event.poll_vote)) {\n      latestAnswers = [event.poll_vote, ...latestAnswers];\n    } else {\n      maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n    }\n\n    const pollEnrichData = extractPollEnrichedData(event.poll);\n    // @ts-ignore\n    this.state.partialNext({\n      ...pollEnrichData,\n      latest_answers: latestAnswers,\n      lastActivityAt: new Date(event.created_at),\n      ownAnswer,\n      ownVotesByOptionId,\n      maxVotedOptionIds,\n    });\n  };\n\n  public handleVoteChanged = (event: Event<SCG>) => {\n    // this event is triggered only when event.poll.enforce_unique_vote === true\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollVoteChangedEvent(event)) return;\n    const currentState = this.data;\n    const isOwnVote = event.poll_vote.user_id === this.client.userID;\n    let latestAnswers = [...(currentState.latest_answers as PollAnswer[])];\n    let ownAnswer = currentState.ownAnswer;\n    let ownVotesByOptionId = currentState.ownVotesByOptionId;\n    let maxVotedOptionIds = currentState.maxVotedOptionIds;\n\n    if (isOwnVote) {\n      if (isVoteAnswer(event.poll_vote)) {\n        latestAnswers = [event.poll_vote, ...latestAnswers.filter((answer) => answer.id !== event.poll_vote.id)];\n        ownAnswer = event.poll_vote;\n      } else if (event.poll_vote.option_id) {\n        if (event.poll.enforce_unique_votes) {\n          ownVotesByOptionId = { [event.poll_vote.option_id]: event.poll_vote };\n        } else {\n          ownVotesByOptionId = Object.entries(ownVotesByOptionId).reduce<Record<OptionId, PollVote<SCG>>>(\n            (acc, [optionId, vote]) => {\n              if (optionId !== event.poll_vote.option_id && vote.id === event.poll_vote.id) {\n                return acc;\n              }\n              acc[optionId] = vote;\n              return acc;\n            },\n            {},\n          );\n          ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;\n        }\n\n        if (ownAnswer?.id === event.poll_vote.id) {\n          ownAnswer = undefined;\n        }\n        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n      }\n    } else if (isVoteAnswer(event.poll_vote)) {\n      latestAnswers = [event.poll_vote, ...latestAnswers];\n    } else {\n      maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n    }\n\n    const pollEnrichData = extractPollEnrichedData(event.poll);\n    // @ts-ignore\n    this.state.partialNext({\n      ...pollEnrichData,\n      latest_answers: latestAnswers,\n      lastActivityAt: new Date(event.created_at),\n      ownAnswer,\n      ownVotesByOptionId,\n      maxVotedOptionIds,\n    });\n  };\n\n  public handleVoteRemoved = (event: Event<SCG>) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollVoteRemovedEvent(event)) return;\n    const currentState = this.data;\n    const isOwnVote = event.poll_vote.user_id === this.client.userID;\n    let latestAnswers = [...(currentState.latest_answers as PollAnswer[])];\n    let ownAnswer = currentState.ownAnswer;\n    const ownVotesByOptionId = { ...currentState.ownVotesByOptionId };\n    let maxVotedOptionIds = currentState.maxVotedOptionIds;\n\n    if (isVoteAnswer(event.poll_vote)) {\n      latestAnswers = latestAnswers.filter((answer) => answer.id !== event.poll_vote.id);\n      if (isOwnVote) {\n        ownAnswer = undefined;\n      }\n    } else {\n      maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n      if (isOwnVote && event.poll_vote.option_id) {\n        delete ownVotesByOptionId[event.poll_vote.option_id];\n      }\n    }\n\n    const pollEnrichData = extractPollEnrichedData(event.poll);\n    // @ts-ignore\n    this.state.partialNext({\n      ...pollEnrichData,\n      latest_answers: latestAnswers,\n      lastActivityAt: new Date(event.created_at),\n      ownAnswer,\n      ownVotesByOptionId,\n      maxVotedOptionIds,\n    });\n  };\n\n  query = async (id: string) => {\n    const { poll } = await this.client.getPoll(id);\n    // @ts-ignore\n    this.state.partialNext({ ...poll, lastActivityAt: new Date() });\n    return poll;\n  };\n\n  update = async (data: Exclude<PollData<SCG>, 'id'>) => {\n    return await this.client.updatePoll({ ...data, id: this.id });\n  };\n\n  partialUpdate = async (partialPollObject: PartialPollUpdate<SCG>) => {\n    return await this.client.partialUpdatePoll(this.id as string, partialPollObject);\n  };\n\n  close = async () => {\n    return await this.client.closePoll(this.id as string);\n  };\n\n  delete = async () => {\n    return await this.client.deletePoll(this.id as string);\n  };\n\n  createOption = async (option: PollOptionData) => {\n    return await this.client.createPollOption(this.id as string, option);\n  };\n\n  updateOption = async (option: PollOptionData) => {\n    return await this.client.updatePollOption(this.id as string, option);\n  };\n\n  deleteOption = async (optionId: string) => {\n    return await this.client.deletePollOption(this.id as string, optionId);\n  };\n\n  castVote = async (optionId: string, messageId: string) => {\n    const { max_votes_allowed, ownVotesByOptionId } = this.data;\n\n    const reachedVoteLimit = max_votes_allowed && max_votes_allowed === Object.keys(ownVotesByOptionId).length;\n\n    if (reachedVoteLimit) {\n      let oldestVote = Object.values(ownVotesByOptionId)[0];\n      Object.values(ownVotesByOptionId)\n        .slice(1)\n        .forEach((vote) => {\n          if (!oldestVote?.created_at || new Date(vote.created_at) < new Date(oldestVote.created_at)) {\n            oldestVote = vote;\n          }\n        });\n      if (oldestVote?.id) {\n        await this.removeVote(oldestVote.id, messageId);\n      }\n    }\n    return await this.client.castPollVote(messageId, this.id as string, { option_id: optionId });\n  };\n\n  removeVote = async (voteId: string, messageId: string) => {\n    return await this.client.removePollVote(messageId, this.id as string, voteId);\n  };\n\n  addAnswer = async (answerText: string, messageId: string) => {\n    return await this.client.addPollAnswer(messageId, this.id as string, answerText);\n  };\n\n  removeAnswer = async (answerId: string, messageId: string) => {\n    return await this.client.removePollVote(messageId, this.id as string, answerId);\n  };\n\n  queryAnswers = async (params: PollAnswersQueryParams) => {\n    return await this.client.queryPollAnswers(this.id as string, params.filter, params.sort, params.options);\n  };\n\n  queryOptionVotes = async (params: PollOptionVotesQueryParams) => {\n    return await this.client.queryPollVotes(this.id as string, params.filter, params.sort, params.options);\n  };\n}\n\nfunction getMaxVotedOptionIds(voteCountsByOption: PollResponse['vote_counts_by_option']) {\n  let maxVotes = 0;\n  let winningOptions: string[] = [];\n  for (const [id, count] of Object.entries(voteCountsByOption ?? {})) {\n    if (count > maxVotes) {\n      winningOptions = [id];\n      maxVotes = count;\n    } else if (count === maxVotes) {\n      winningOptions.push(id);\n    }\n  }\n  return winningOptions;\n}\n\nfunction getOwnVotesByOptionId<SCG extends ExtendableGenerics = DefaultGenerics>(ownVotes: PollVote<SCG>[]) {\n  return !ownVotes\n    ? ({} as Record<OptionId, PollVote<SCG>>)\n    : ownVotes.reduce<Record<OptionId, PollVote<SCG>>>((acc, vote) => {\n        if (isVoteAnswer(vote) || !vote.option_id) return acc;\n        acc[vote.option_id] = vote;\n        return acc;\n      }, {});\n}\n\nexport function extractPollData<SCG extends ExtendableGenerics = DefaultGenerics>(\n  pollResponse: PollResponse<SCG>,\n): PollData<SCG> {\n  return {\n    allow_answers: pollResponse.allow_answers,\n    allow_user_suggested_options: pollResponse.allow_user_suggested_options,\n    description: pollResponse.description,\n    enforce_unique_vote: pollResponse.enforce_unique_vote,\n    id: pollResponse.id,\n    is_closed: pollResponse.is_closed,\n    max_votes_allowed: pollResponse.max_votes_allowed,\n    name: pollResponse.name,\n    options: pollResponse.options,\n    voting_visibility: pollResponse.voting_visibility,\n  };\n}\n\nexport function extractPollEnrichedData<SCG extends ExtendableGenerics = DefaultGenerics>(\n  pollResponse: PollResponse<SCG>,\n): Omit<PollEnrichData<SCG>, 'own_votes' | 'latest_answers'> {\n  return {\n    answers_count: pollResponse.answers_count,\n    latest_votes_by_option: pollResponse.latest_votes_by_option,\n    vote_count: pollResponse.vote_count,\n    vote_counts_by_option: pollResponse.vote_counts_by_option,\n  };\n}\n","import type { StreamChat } from './client';\nimport type {\n  CreatePollData,\n  DefaultGenerics,\n  ExtendableGenerics,\n  MessageResponse,\n  PollResponse,\n  PollSort,\n  QueryPollsFilters,\n  QueryPollsOptions,\n} from './types';\nimport { Poll } from './poll';\nimport { FormatMessageResponse } from './types';\nimport { formatMessage } from './utils';\n\nexport class PollManager<SCG extends ExtendableGenerics = DefaultGenerics> {\n  private client: StreamChat<SCG>;\n  // The pollCache contains only polls that have been created and sent as messages\n  // (i.e only polls that are coupled with a message, can be voted on and require a\n  // reactive state). It shall work as a basic look-up table for our SDK to be able\n  // to quickly consume poll state that will be reactive even without the polls being\n  // rendered within the UI.\n  private pollCache = new Map<string, Poll<SCG>>();\n  private unsubscribeFunctions: Set<() => void> = new Set();\n\n  constructor({ client }: { client: StreamChat<SCG> }) {\n    this.client = client;\n  }\n\n  get data(): Map<string, Poll<SCG>> {\n    return this.pollCache;\n  }\n\n  public fromState = (id: string) => {\n    return this.pollCache.get(id);\n  };\n\n  public registerSubscriptions = () => {\n    if (this.unsubscribeFunctions.size) {\n      // Already listening for events and changes\n      return;\n    }\n\n    this.unsubscribeFunctions.add(this.subscribeMessageNew());\n    this.unsubscribeFunctions.add(this.subscribePollUpdated());\n    this.unsubscribeFunctions.add(this.subscribePollClosed());\n    this.unsubscribeFunctions.add(this.subscribeVoteCasted());\n    this.unsubscribeFunctions.add(this.subscribeVoteChanged());\n    this.unsubscribeFunctions.add(this.subscribeVoteRemoved());\n  };\n\n  public unregisterSubscriptions = () => {\n    this.unsubscribeFunctions.forEach((cleanupFunction) => cleanupFunction());\n    this.unsubscribeFunctions.clear();\n  };\n\n  public createPoll = async (poll: CreatePollData<SCG>) => {\n    const { poll: createdPoll } = await this.client.createPoll(poll);\n\n    return new Poll({ client: this.client, poll: createdPoll });\n  };\n\n  public getPoll = async (id: string) => {\n    const cachedPoll = this.fromState(id);\n\n    // optimistically return the cached poll if it exists and update in the background\n    if (cachedPoll) {\n      this.client.getPoll(id).then(({ poll }) => this.setOrOverwriteInCache(poll, true));\n      return cachedPoll;\n    }\n    // fetch it, write to the cache and return otherwise\n    const { poll } = await this.client.getPoll(id);\n\n    this.setOrOverwriteInCache(poll);\n\n    return this.fromState(id);\n  };\n\n  public queryPolls = async (filter: QueryPollsFilters, sort: PollSort = [], options: QueryPollsOptions = {}) => {\n    const { polls, next } = await this.client.queryPolls(filter, sort, options);\n\n    const pollInstances = polls.map((poll) => {\n      this.setOrOverwriteInCache(poll, true);\n\n      return this.fromState(poll.id);\n    });\n\n    return {\n      polls: pollInstances,\n      next,\n    };\n  };\n\n  public hydratePollCache = (\n    messages: FormatMessageResponse<SCG>[] | MessageResponse<SCG>[],\n    overwriteState?: boolean,\n  ) => {\n    for (const message of messages) {\n      if (!message.poll) {\n        continue;\n      }\n      const pollResponse = message.poll as PollResponse<SCG>;\n      this.setOrOverwriteInCache(pollResponse, overwriteState);\n    }\n  };\n\n  private setOrOverwriteInCache = (pollResponse: PollResponse<SCG>, overwriteState?: boolean) => {\n    if (!this.client._cacheEnabled()) {\n      return;\n    }\n    const pollFromCache = this.fromState(pollResponse.id);\n    if (!pollFromCache) {\n      const poll = new Poll<SCG>({ client: this.client, poll: pollResponse });\n      this.pollCache.set(poll.id, poll);\n    } else if (overwriteState) {\n      pollFromCache.reinitializeState(pollResponse);\n    }\n  };\n\n  private subscribePollUpdated = () => {\n    return this.client.on('poll.updated', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handlePollUpdated(event);\n      }\n    }).unsubscribe;\n  };\n\n  private subscribePollClosed = () => {\n    return this.client.on('poll.closed', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handlePollClosed(event);\n      }\n    }).unsubscribe;\n  };\n\n  private subscribeVoteCasted = () => {\n    return this.client.on('poll.vote_casted', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteCasted(event);\n      }\n    }).unsubscribe;\n  };\n\n  private subscribeVoteChanged = () => {\n    return this.client.on('poll.vote_changed', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteChanged(event);\n      }\n    }).unsubscribe;\n  };\n\n  private subscribeVoteRemoved = () => {\n    return this.client.on('poll.vote_removed', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteRemoved(event);\n      }\n    }).unsubscribe;\n  };\n\n  private subscribeMessageNew = () => {\n    return this.client.on('message.new', (event) => {\n      const { message } = event;\n      if (message) {\n        const formattedMessage = formatMessage(message);\n        this.hydratePollCache([formattedMessage]);\n      }\n    }).unsubscribe;\n  };\n}\n","import type { StreamChat } from './client';\nimport type {\n  DefaultGenerics,\n  ExtendableGenerics,\n  Event,\n  ChannelOptions,\n  ChannelStateOptions,\n  ChannelFilters,\n  ChannelSort,\n} from './types';\nimport { StateStore, ValueOrPatch, isPatch } from './store';\nimport { Channel } from './channel';\nimport {\n  extractSortValue,\n  findLastPinnedChannelIndex,\n  getAndWatchChannel,\n  isChannelArchived,\n  isChannelPinned,\n  promoteChannel,\n  shouldConsiderArchivedChannels,\n  shouldConsiderPinnedChannels,\n  uniqBy,\n} from './utils';\n\nexport type ChannelManagerPagination<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  filters: ChannelFilters<SCG>;\n  hasNext: boolean;\n  isLoading: boolean;\n  isLoadingNext: boolean;\n  options: ChannelOptions;\n  sort: ChannelSort<SCG>;\n};\n\nexport type ChannelManagerState<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  channels: Channel<SCG>[];\n  /**\n   * This value will become true the first time queryChannels is successfully executed and\n   * will remain false otherwise. It's used as a control property regarding whether the list\n   * has been initialized yet (i.e a query has already been done at least once) or not. We do\n   * this to prevent state.channels from being forced to be nullable.\n   */\n  initialized: boolean;\n  pagination: ChannelManagerPagination<SCG>;\n};\n\nexport type ChannelSetterParameterType<SCG extends ExtendableGenerics = DefaultGenerics> = ValueOrPatch<\n  ChannelManagerState<SCG>['channels']\n>;\nexport type ChannelSetterType<SCG extends ExtendableGenerics = DefaultGenerics> = (\n  arg: ChannelSetterParameterType<SCG>,\n) => void;\n\nexport type GenericEventHandlerType<T extends unknown[]> = (\n  ...args: T\n) => void | (() => void) | ((...args: T) => Promise<void>) | Promise<void>;\nexport type EventHandlerType<SCG extends ExtendableGenerics = DefaultGenerics> = GenericEventHandlerType<[Event<SCG>]>;\nexport type EventHandlerOverrideType<SCG extends ExtendableGenerics = DefaultGenerics> = GenericEventHandlerType<\n  [ChannelSetterType<SCG>, Event<SCG>]\n>;\n\nexport type ChannelManagerEventTypes =\n  | 'notification.added_to_channel'\n  | 'notification.message_new'\n  | 'notification.removed_from_channel'\n  | 'message.new'\n  | 'member.updated'\n  | 'channel.deleted'\n  | 'channel.hidden'\n  | 'channel.truncated'\n  | 'channel.visible'\n  | 'channel.updated';\n\nexport type ChannelManagerEventHandlerNames =\n  | 'channelDeletedHandler'\n  | 'channelHiddenHandler'\n  | 'channelTruncatedHandler'\n  | 'channelUpdatedHandler'\n  | 'channelVisibleHandler'\n  | 'newMessageHandler'\n  | 'memberUpdatedHandler'\n  | 'notificationAddedToChannelHandler'\n  | 'notificationNewMessageHandler'\n  | 'notificationRemovedFromChannelHandler';\n\nexport type ChannelManagerEventHandlerOverrides<SCG extends ExtendableGenerics = DefaultGenerics> = Partial<\n  Record<ChannelManagerEventHandlerNames, EventHandlerOverrideType<SCG>>\n>;\n\nexport const channelManagerEventToHandlerMapping: {\n  [key in ChannelManagerEventTypes]: ChannelManagerEventHandlerNames;\n} = {\n  'channel.deleted': 'channelDeletedHandler',\n  'channel.hidden': 'channelHiddenHandler',\n  'channel.truncated': 'channelTruncatedHandler',\n  'channel.updated': 'channelUpdatedHandler',\n  'channel.visible': 'channelVisibleHandler',\n  'message.new': 'newMessageHandler',\n  'member.updated': 'memberUpdatedHandler',\n  'notification.added_to_channel': 'notificationAddedToChannelHandler',\n  'notification.message_new': 'notificationNewMessageHandler',\n  'notification.removed_from_channel': 'notificationRemovedFromChannelHandler',\n};\n\nexport type ChannelManagerOptions = {\n  /**\n   * Aborts a channels query that is already in progress and runs the new one.\n   */\n  abortInFlightQuery?: boolean;\n  /**\n   * Allows channel promotion to be applied where applicable for channels that are\n   * currently not part of the channel list within the state. A good example of\n   * this would be a channel that is being watched and it receives a new message,\n   * but is not part of the list initially.\n   */\n  allowNotLoadedChannelPromotionForEvent?: {\n    'channel.visible': boolean;\n    'message.new': boolean;\n    'notification.added_to_channel': boolean;\n    'notification.message_new': boolean;\n  };\n  /**\n   * Allows us to lock the order of channels within the list. Any event that would\n   * change the order of channels within the list will do nothing.\n   */\n  lockChannelOrder?: boolean;\n};\n\nexport const DEFAULT_CHANNEL_MANAGER_OPTIONS = {\n  abortInFlightQuery: false,\n  allowNotLoadedChannelPromotionForEvent: {\n    'channel.visible': true,\n    'message.new': true,\n    'notification.added_to_channel': true,\n    'notification.message_new': true,\n  },\n  lockChannelOrder: false,\n};\n\nexport const DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS = {\n  limit: 10,\n  offset: 0,\n};\n\n/**\n * A class that manages a list of channels and changes it based on configuration and WS events. The\n * list of channels is reactive as well as the pagination and it can be subscribed to for state updates.\n *\n * @internal\n */\nexport class ChannelManager<SCG extends ExtendableGenerics = DefaultGenerics> {\n  public readonly state: StateStore<ChannelManagerState<SCG>>;\n  private client: StreamChat<SCG>;\n  private unsubscribeFunctions: Set<() => void> = new Set();\n  private eventHandlers: Map<string, EventHandlerType<SCG>> = new Map();\n  private eventHandlerOverrides: Map<string, EventHandlerOverrideType<SCG>> = new Map();\n  private options: ChannelManagerOptions = {};\n  private stateOptions: ChannelStateOptions = {};\n\n  constructor({\n    client,\n    eventHandlerOverrides = {},\n    options = {},\n  }: {\n    client: StreamChat<SCG>;\n    eventHandlerOverrides?: ChannelManagerEventHandlerOverrides<SCG>;\n    options?: ChannelManagerOptions;\n  }) {\n    this.client = client;\n    this.state = new StateStore<ChannelManagerState<SCG>>({\n      channels: [],\n      pagination: {\n        isLoading: false,\n        isLoadingNext: false,\n        hasNext: false,\n        filters: {},\n        sort: {},\n        options: DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS,\n      },\n      initialized: false,\n    });\n    this.setEventHandlerOverrides(eventHandlerOverrides);\n    this.setOptions(options);\n    this.eventHandlers = new Map(\n      Object.entries<EventHandlerType<SCG>>({\n        channelDeletedHandler: this.channelDeletedHandler,\n        channelHiddenHandler: this.channelHiddenHandler,\n        channelVisibleHandler: this.channelVisibleHandler,\n        memberUpdatedHandler: this.memberUpdatedHandler,\n        newMessageHandler: this.newMessageHandler,\n        notificationAddedToChannelHandler: this.notificationAddedToChannelHandler,\n        notificationNewMessageHandler: this.notificationNewMessageHandler,\n        notificationRemovedFromChannelHandler: this.notificationRemovedFromChannelHandler,\n      }),\n    );\n  }\n\n  public setChannels = (valueOrFactory: ChannelSetterParameterType<SCG>) => {\n    this.state.next((current) => {\n      const { channels: currentChannels } = current;\n      const newChannels = isPatch(valueOrFactory) ? valueOrFactory(currentChannels) : valueOrFactory;\n\n      // If the references between the two values are the same, just return the\n      // current state; otherwise trigger a state change.\n      if (currentChannels === newChannels) {\n        return current;\n      }\n      return { ...current, channels: newChannels };\n    });\n  };\n\n  public setEventHandlerOverrides = (eventHandlerOverrides: ChannelManagerEventHandlerOverrides<SCG> = {}) => {\n    const truthyEventHandlerOverrides = Object.entries(eventHandlerOverrides).reduce<\n      Partial<ChannelManagerEventHandlerOverrides<SCG>>\n    >((acc, [key, value]) => {\n      if (value) {\n        acc[key as keyof ChannelManagerEventHandlerOverrides<SCG>] = value;\n      }\n      return acc;\n    }, {});\n    this.eventHandlerOverrides = new Map(Object.entries<EventHandlerOverrideType<SCG>>(truthyEventHandlerOverrides));\n  };\n\n  public setOptions = (options: ChannelManagerOptions = {}) => {\n    this.options = { ...DEFAULT_CHANNEL_MANAGER_OPTIONS, ...options };\n  };\n\n  public queryChannels = async (\n    filters: ChannelFilters<SCG>,\n    sort: ChannelSort<SCG> = [],\n    options: ChannelOptions = {},\n    stateOptions: ChannelStateOptions = {},\n  ) => {\n    const { offset, limit } = { ...DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS, ...options };\n    const {\n      pagination: { isLoading },\n    } = this.state.getLatestValue();\n\n    if (isLoading && !this.options.abortInFlightQuery) {\n      return;\n    }\n\n    try {\n      this.stateOptions = stateOptions;\n      this.state.next((currentState) => ({\n        ...currentState,\n        pagination: {\n          ...currentState.pagination,\n          isLoading: true,\n          isLoadingNext: false,\n          filters,\n          sort,\n          options,\n        },\n      }));\n\n      const channels = await this.client.queryChannels(filters, sort, options, stateOptions);\n      const newOffset = offset + (channels?.length ?? 0);\n      const newOptions = { ...options, offset: newOffset };\n      const { pagination } = this.state.getLatestValue();\n\n      this.state.partialNext({\n        channels,\n        pagination: {\n          ...pagination,\n          hasNext: (channels?.length ?? 0) >= limit,\n          isLoading: false,\n          options: newOptions,\n        },\n        initialized: true,\n      });\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((currentState) => ({\n        ...currentState,\n        pagination: { ...currentState.pagination, isLoading: false },\n      }));\n      throw error;\n    }\n  };\n\n  public loadNext = async () => {\n    const { pagination, initialized } = this.state.getLatestValue();\n    const { filters, sort, options, isLoadingNext, hasNext } = pagination;\n\n    if (!initialized || isLoadingNext || !hasNext) {\n      return;\n    }\n\n    try {\n      const { offset, limit } = { ...DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS, ...options };\n      this.state.partialNext({\n        pagination: { ...pagination, isLoading: false, isLoadingNext: true },\n      });\n      const nextChannels = await this.client.queryChannels(filters, sort, options, this.stateOptions);\n      const { channels } = this.state.getLatestValue();\n      const newOffset = offset + (nextChannels?.length ?? 0);\n      const newOptions = { ...options, offset: newOffset };\n\n      this.state.partialNext({\n        channels: uniqBy<Channel<SCG>>([...(channels || []), ...nextChannels], 'cid'),\n        pagination: {\n          ...pagination,\n          hasNext: (nextChannels?.length ?? 0) >= limit,\n          isLoading: false,\n          isLoadingNext: false,\n          options: newOptions,\n        },\n      });\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((currentState) => ({\n        ...currentState,\n        pagination: { ...currentState.pagination, isLoadingNext: false },\n      }));\n      throw error;\n    }\n  };\n\n  private notificationAddedToChannelHandler = async (event: Event<SCG>) => {\n    const { id, type, members } = event?.channel ?? {};\n\n    if (!type || !this.options.allowNotLoadedChannelPromotionForEvent?.['notification.added_to_channel']) {\n      return;\n    }\n\n    const channel = await getAndWatchChannel({\n      client: this.client,\n      id,\n      members: members?.reduce<string[]>((acc, { user, user_id }) => {\n        const userId = user_id || user?.id;\n        if (userId) {\n          acc.push(userId);\n        }\n        return acc;\n      }, []),\n      type,\n    });\n\n    const { pagination, channels } = this.state.getLatestValue();\n    if (!channels) {\n      return;\n    }\n\n    const { sort } = pagination ?? {};\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort,\n      }),\n    );\n  };\n\n  private channelDeletedHandler = (event: Event<SCG>) => {\n    const { channels } = this.state.getLatestValue();\n    if (!channels) {\n      return;\n    }\n\n    const newChannels = [...channels];\n    const channelIndex = newChannels.findIndex((channel) => channel.cid === (event.cid || event.channel?.cid));\n\n    if (channelIndex < 0) {\n      return;\n    }\n\n    newChannels.splice(channelIndex, 1);\n    this.setChannels(newChannels);\n  };\n\n  private channelHiddenHandler = this.channelDeletedHandler;\n\n  private newMessageHandler = (event: Event<SCG>) => {\n    const { pagination, channels } = this.state.getLatestValue();\n    if (!channels) {\n      return;\n    }\n    const { filters, sort } = pagination ?? {};\n\n    const channelType = event.channel_type;\n    const channelId = event.channel_id;\n\n    if (!channelType || !channelId) {\n      return;\n    }\n\n    const targetChannel = this.client.channel(channelType, channelId);\n    const targetChannelIndex = channels.indexOf(targetChannel);\n    const targetChannelExistsWithinList = targetChannelIndex >= 0;\n\n    const isTargetChannelPinned = isChannelPinned(targetChannel);\n    const isTargetChannelArchived = isChannelArchived(targetChannel);\n\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n\n    if (\n      // filter is defined, target channel is archived and filter option is set to false\n      (considerArchivedChannels && isTargetChannelArchived && !filters.archived) ||\n      // filter is defined, target channel isn't archived and filter option is set to true\n      (considerArchivedChannels && !isTargetChannelArchived && filters.archived) ||\n      // sort option is defined, target channel is pinned\n      (considerPinnedChannels && isTargetChannelPinned) ||\n      // list order is locked\n      this.options.lockChannelOrder ||\n      // target channel is not within the loaded list and loading from cache is disallowed\n      (!targetChannelExistsWithinList && !this.options.allowNotLoadedChannelPromotionForEvent?.['message.new'])\n    ) {\n      return;\n    }\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: targetChannel,\n        channelToMoveIndexWithinChannels: targetChannelIndex,\n        sort,\n      }),\n    );\n  };\n\n  private notificationNewMessageHandler = async (event: Event<SCG>) => {\n    const { id, type } = event?.channel ?? {};\n\n    if (!id || !type) {\n      return;\n    }\n\n    const channel = await getAndWatchChannel({\n      client: this.client,\n      id,\n      type,\n    });\n\n    const { channels, pagination } = this.state.getLatestValue();\n    const { filters, sort } = pagination ?? {};\n\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const isTargetChannelArchived = isChannelArchived(channel);\n\n    if (\n      !channels ||\n      (considerArchivedChannels && isTargetChannelArchived && !filters.archived) ||\n      (considerArchivedChannels && !isTargetChannelArchived && filters.archived) ||\n      !this.options.allowNotLoadedChannelPromotionForEvent?.['notification.message_new']\n    ) {\n      return;\n    }\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort,\n      }),\n    );\n  };\n\n  private channelVisibleHandler = async (event: Event<SCG>) => {\n    const { channel_type: channelType, channel_id: channelId } = event;\n\n    if (!channelType || !channelId) {\n      return;\n    }\n\n    const channel = await getAndWatchChannel({\n      client: this.client,\n      id: event.channel_id,\n      type: event.channel_type,\n    });\n\n    const { channels, pagination } = this.state.getLatestValue();\n    const { sort, filters } = pagination ?? {};\n\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const isTargetChannelArchived = isChannelArchived(channel);\n\n    if (\n      !channels ||\n      (considerArchivedChannels && isTargetChannelArchived && !filters.archived) ||\n      (considerArchivedChannels && !isTargetChannelArchived && filters.archived) ||\n      !this.options.allowNotLoadedChannelPromotionForEvent?.['channel.visible']\n    ) {\n      return;\n    }\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort,\n      }),\n    );\n  };\n\n  private notificationRemovedFromChannelHandler = this.channelDeletedHandler;\n\n  private memberUpdatedHandler = (event: Event<SCG>) => {\n    const { pagination, channels } = this.state.getLatestValue();\n    const { filters, sort } = pagination;\n    if (\n      !event.member?.user ||\n      event.member.user.id !== this.client.userID ||\n      !event.channel_type ||\n      !event.channel_id\n    ) {\n      return;\n    }\n    const channelType = event.channel_type;\n    const channelId = event.channel_id;\n\n    const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const pinnedAtSort = extractSortValue({ atIndex: 0, sort, targetKey: 'pinned_at' });\n\n    if (!channels || (!considerPinnedChannels && !considerArchivedChannels) || this.options.lockChannelOrder) {\n      return;\n    }\n\n    const targetChannel = this.client.channel(channelType, channelId);\n    // assumes that channel instances are not changing\n    const targetChannelIndex = channels.indexOf(targetChannel);\n    const targetChannelExistsWithinList = targetChannelIndex >= 0;\n\n    const isTargetChannelPinned = isChannelPinned(targetChannel);\n    const isTargetChannelArchived = isChannelArchived(targetChannel);\n\n    const newChannels = [...channels];\n\n    if (targetChannelExistsWithinList) {\n      newChannels.splice(targetChannelIndex, 1);\n    }\n\n    // handle archiving (remove channel)\n    if (\n      // When archived filter true, and channel is unarchived\n      (considerArchivedChannels && !isTargetChannelArchived && filters?.archived) ||\n      // When archived filter false, and channel is archived\n      (considerArchivedChannels && isTargetChannelArchived && !filters?.archived)\n    ) {\n      this.setChannels(newChannels);\n      return;\n    }\n\n    // handle pinning\n    let lastPinnedChannelIndex: number | null = null;\n\n    if (pinnedAtSort === 1 || (pinnedAtSort === -1 && !isTargetChannelPinned)) {\n      lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });\n    }\n    const newTargetChannelIndex = typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0;\n\n    // skip state update if the position of the channel does not change\n    if (channels[newTargetChannelIndex] === targetChannel) {\n      return;\n    }\n\n    newChannels.splice(newTargetChannelIndex, 0, targetChannel);\n    this.setChannels(newChannels);\n  };\n\n  private subscriptionOrOverride = (event: Event<SCG>) => {\n    const handlerName = channelManagerEventToHandlerMapping[event.type as ChannelManagerEventTypes];\n    const defaultEventHandler = this.eventHandlers.get(handlerName);\n    const eventHandlerOverride = this.eventHandlerOverrides.get(handlerName);\n    if (eventHandlerOverride && typeof eventHandlerOverride === 'function') {\n      eventHandlerOverride(this.setChannels, event);\n      return;\n    }\n\n    if (defaultEventHandler && typeof defaultEventHandler === 'function') {\n      defaultEventHandler(event);\n    }\n  };\n\n  public registerSubscriptions = () => {\n    if (this.unsubscribeFunctions.size) {\n      // Already listening for events and changes\n      return;\n    }\n\n    for (const eventType of Object.keys(channelManagerEventToHandlerMapping)) {\n      this.unsubscribeFunctions.add(this.client.on(eventType, this.subscriptionOrOverride).unsubscribe);\n    }\n  };\n\n  public unregisterSubscriptions = () => {\n    this.unsubscribeFunctions.forEach((cleanupFunction) => cleanupFunction());\n    this.unsubscribeFunctions.clear();\n  };\n}\n","/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport https from 'https';\nimport WebSocket from 'isomorphic-ws';\n\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\nimport { CheckSignature, DevToken, JWTUserToken } from './signing';\nimport { TokenManager } from './token_manager';\nimport { WSConnectionFallback } from './connection_fallback';\nimport { Campaign } from './campaign';\nimport { Segment } from './segment';\nimport { isErrorResponse, isWSFailure } from './errors';\nimport {\n  addFileToFormData,\n  axiosParamsSerializer,\n  chatCodes,\n  generateChannelTempCid,\n  isFunction,\n  isOnline,\n  isOwnUserBaseProperty,\n  messageSetPagination,\n  normalizeQuerySort,\n  randomId,\n  retryInterval,\n  sleep,\n} from './utils';\n\nimport {\n  APIErrorResponse,\n  APIResponse,\n  AppSettings,\n  AppSettingsAPIResponse,\n  BannedUsersFilters,\n  BannedUsersPaginationOptions,\n  BannedUsersResponse,\n  BannedUsersSort,\n  BanUserOptions,\n  BaseDeviceFields,\n  BlockList,\n  BlockListResponse,\n  BlockUserAPIResponse,\n  CampaignData,\n  CampaignFilters,\n  CampaignQueryOptions,\n  CampaignResponse,\n  CampaignSort,\n  CastVoteAPIResponse,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMute,\n  ChannelOptions,\n  ChannelResponse,\n  ChannelSort,\n  ChannelStateOptions,\n  CheckPushResponse,\n  CheckSNSResponse,\n  CheckSQSResponse,\n  Configs,\n  ConnectAPIResponse,\n  CreateChannelOptions,\n  CreateChannelResponse,\n  CreateCommandOptions,\n  CreateCommandResponse,\n  CreateImportOptions,\n  CreateImportResponse,\n  CreateImportURLResponse,\n  CreatePollAPIResponse,\n  CreatePollData,\n  CreatePollOptionAPIResponse,\n  CustomPermissionOptions,\n  DeactivateUsersOptions,\n  DefaultGenerics,\n  DeleteChannelsResponse,\n  DeleteCommandResponse,\n  DeleteUserOptions,\n  Device,\n  DeviceIdentifier,\n  EndpointName,\n  ErrorFromResponse,\n  Event,\n  EventHandler,\n  ExportChannelOptions,\n  ExportChannelRequest,\n  ExportChannelResponse,\n  ExportChannelStatusResponse,\n  ExportUsersRequest,\n  ExportUsersResponse,\n  ExtendableGenerics,\n  FlagMessageResponse,\n  FlagReportsFilters,\n  FlagReportsPaginationOptions,\n  FlagReportsResponse,\n  FlagsFilters,\n  FlagsPaginationOptions,\n  FlagsResponse,\n  FlagUserResponse,\n  GetBlockedUsersAPIResponse,\n  GetCallTokenResponse,\n  GetCampaignOptions,\n  GetChannelTypeResponse,\n  GetCommandResponse,\n  GetImportResponse,\n  GetMessageAPIResponse,\n  GetMessageOptions,\n  GetPollAPIResponse,\n  GetPollOptionAPIResponse,\n  GetRateLimitsResponse,\n  GetThreadAPIResponse,\n  GetThreadOptions,\n  GetUnreadCountAPIResponse,\n  GetUnreadCountBatchAPIResponse,\n  ListChannelResponse,\n  ListCommandsResponse,\n  ListImportsPaginationOptions,\n  ListImportsResponse,\n  Logger,\n  MarkChannelsReadOptions,\n  Message,\n  MessageFilters,\n  MessageFlagsFilters,\n  MessageFlagsPaginationOptions,\n  MessageFlagsResponse,\n  MessageResponse,\n  Mute,\n  MuteUserOptions,\n  MuteUserResponse,\n  NewMemberPayload,\n  OGAttachment,\n  OwnUserResponse,\n  PartialMessageUpdate,\n  PartialPollUpdate,\n  PartialThreadUpdate,\n  PartialUserUpdate,\n  PermissionAPIResponse,\n  PermissionsAPIResponse,\n  PollAnswersAPIResponse,\n  PollData,\n  PollOptionData,\n  PollSort,\n  PollVote,\n  PollVoteData,\n  PollVotesAPIResponse,\n  PushPreference,\n  PushProvider,\n  PushProviderConfig,\n  PushProviderID,\n  PushProviderListResponse,\n  PushProviderUpsertResponse,\n  QueryChannelsAPIResponse,\n  QueryMessageHistoryFilters,\n  QueryMessageHistoryOptions,\n  QueryMessageHistoryResponse,\n  QueryMessageHistorySort,\n  QueryPollsFilters,\n  QueryPollsOptions,\n  QueryPollsResponse,\n  QueryReactionsAPIResponse,\n  QueryReactionsOptions,\n  QuerySegmentsOptions,\n  QuerySegmentTargetsFilter,\n  QueryThreadsAPIResponse,\n  QueryThreadsOptions,\n  QueryVotesFilters,\n  QueryVotesOptions,\n  ReactionFilters,\n  ReactionResponse,\n  ReactionSort,\n  ReactivateUserOptions,\n  ReactivateUsersOptions,\n  ReservedMessageFields,\n  ReviewFlagReportOptions,\n  ReviewFlagReportResponse,\n  SdkIdentifier,\n  SearchAPIResponse,\n  SearchMessageSortBase,\n  SearchOptions,\n  SearchPayload,\n  SegmentData,\n  SegmentResponse,\n  SegmentTargetsResponse,\n  SegmentType,\n  SendFileAPIResponse,\n  SortParam,\n  StreamChatOptions,\n  SyncOptions,\n  SyncResponse,\n  TaskResponse,\n  TaskStatus,\n  TestPushDataInput,\n  TestSNSDataInput,\n  TestSQSDataInput,\n  TokenOrProvider,\n  TranslateResponse,\n  UnBanUserOptions,\n  UpdateChannelOptions,\n  UpdateChannelResponse,\n  UpdateCommandOptions,\n  UpdateCommandResponse,\n  UpdatedMessage,\n  UpdateMessageAPIResponse,\n  UpdateMessageOptions,\n  UpdatePollAPIResponse,\n  UpdatePollOptionAPIResponse,\n  UpdateSegmentData,\n  UpsertPushPreferencesResponse,\n  UserCustomEvent,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n  VoteSort,\n} from './types';\nimport { InsightMetrics, postInsights } from './insights';\nimport { Thread } from './thread';\nimport { Moderation } from './moderation';\nimport { ThreadManager } from './thread_manager';\nimport { DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE } from './constants';\nimport { PollManager } from './poll_manager';\nimport { ChannelManager, ChannelManagerEventHandlerOverrides, ChannelManagerOptions } from './channel_manager';\n\nfunction isString(x: unknown): x is string {\n  return typeof x === 'string' || x instanceof String;\n}\n\nexport class StreamChat<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  private static _instance?: unknown | StreamChat; // type is undefined|StreamChat, unknown is due to TS limitations with statics\n\n  _user?: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>;\n  activeChannels: {\n    [key: string]: Channel<StreamChatGenerics>;\n  };\n  threads: ThreadManager<StreamChatGenerics>;\n  polls: PollManager<StreamChatGenerics>;\n  anonymous: boolean;\n  persistUserOnConnectionFailure?: boolean;\n  axiosInstance: AxiosInstance;\n  baseURL?: string;\n  browser: boolean;\n  cleaningIntervalRef?: NodeJS.Timeout;\n  clientID?: string;\n  configs: Configs<StreamChatGenerics>;\n  key: string;\n  listeners: Record<string, Array<(event: Event<StreamChatGenerics>) => void>>;\n  logger: Logger;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guaranteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't rely on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  moderation: Moderation<StreamChatGenerics>;\n  mutedChannels: ChannelMute<StreamChatGenerics>[];\n  mutedUsers: Mute<StreamChatGenerics>[];\n  node: boolean;\n  options: StreamChatOptions;\n  secret?: string;\n  setUserPromise: ConnectAPIResponse<StreamChatGenerics> | null;\n  state: ClientState<StreamChatGenerics>;\n  tokenManager: TokenManager<StreamChatGenerics>;\n  user?: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>;\n  userAgent?: string;\n  userID?: string;\n  wsBaseURL?: string;\n  wsConnection: StableWSConnection<StreamChatGenerics> | null;\n  wsFallback?: WSConnectionFallback<StreamChatGenerics>;\n  wsPromise: ConnectAPIResponse<StreamChatGenerics> | null;\n  consecutiveFailures: number;\n  insightMetrics: InsightMetrics;\n  defaultWSTimeoutWithFallback: number;\n  defaultWSTimeout: number;\n  sdkIdentifier?: SdkIdentifier;\n  deviceIdentifier?: DeviceIdentifier;\n  private nextRequestAbortController: AbortController | null = null;\n\n  /**\n   * Initialize a client\n   *\n   * **Only use constructor for advanced usages. It is strongly advised to use `StreamChat.getInstance()` instead of `new StreamChat()` to reduce integration issues due to multiple WebSocket connections**\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * new StreamChat('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * new StreamChat('api_key', { warmUp:true, timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * new StreamChat('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  constructor(key: string, options?: StreamChatOptions);\n  constructor(key: string, secret?: string, options?: StreamChatOptions);\n  constructor(key: string, secretOrOptions?: StreamChatOptions | string, options?: StreamChatOptions) {\n    // set the key\n    this.key = key;\n    this.listeners = {};\n    this.state = new ClientState<StreamChatGenerics>({ client: this });\n    // a list of channels to hide ws events from\n    this.mutedChannels = [];\n    this.mutedUsers = [];\n\n    this.moderation = new Moderation(this);\n\n    // set the secret\n    if (secretOrOptions && isString(secretOrOptions)) {\n      this.secret = secretOrOptions;\n    }\n\n    // set the options... and figure out defaults...\n    const inputOptions = options ? options : secretOrOptions && !isString(secretOrOptions) ? secretOrOptions : {};\n\n    this.browser = typeof inputOptions.browser !== 'undefined' ? inputOptions.browser : typeof window !== 'undefined';\n    this.node = !this.browser;\n\n    this.options = {\n      timeout: 3000,\n      withCredentials: false, // making sure cookies are not sent\n      warmUp: false,\n      recoverStateOnReconnect: true,\n      disableCache: false,\n      ...inputOptions,\n    };\n\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000,\n      });\n    }\n\n    this.axiosInstance = axios.create(this.options);\n\n    this.setBaseURL(this.options.baseURL || 'https://chat.stream-io-api.com');\n\n    if (typeof process !== 'undefined' && 'env' in process && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL('http://localhost:3030');\n    }\n\n    if (typeof process !== 'undefined' && 'env' in process && process.env.STREAM_LOCAL_TEST_HOST) {\n      this.setBaseURL('http://' + process.env.STREAM_LOCAL_TEST_HOST);\n    }\n\n    // WS connection is initialized when setUser is called\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null;\n    // keeps a reference to all the channels that are in use\n    this.activeChannels = {};\n\n    // mapping between channel groups and configs\n    this.configs = {};\n    this.anonymous = false;\n    this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n\n    // If its a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n    this.insightMetrics = new InsightMetrics();\n\n    this.defaultWSTimeoutWithFallback = 6 * 1000;\n    this.defaultWSTimeout = 15 * 1000;\n\n    this.axiosInstance.defaults.paramsSerializer = axiosParamsSerializer;\n\n    /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */\n    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : () => null;\n    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n    this.threads = new ThreadManager({ client: this });\n    this.polls = new PollManager({ client: this });\n  }\n\n  /**\n   * Get a client instance\n   *\n   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections\n   *\n   * **After the first call, the client configuration will not change if the key or options parameters change**\n   *\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * StreamChat.getInstance('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * StreamChat.getInstance('api_key', { timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * StreamChat.getInstance('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  public static getInstance<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n    key: string,\n    options?: StreamChatOptions,\n  ): StreamChat<StreamChatGenerics>;\n  public static getInstance<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n    key: string,\n    secret?: string,\n    options?: StreamChatOptions,\n  ): StreamChat<StreamChatGenerics>;\n  public static getInstance<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n    key: string,\n    secretOrOptions?: StreamChatOptions | string,\n    options?: StreamChatOptions,\n  ): StreamChat<StreamChatGenerics> {\n    if (!StreamChat._instance) {\n      if (typeof secretOrOptions === 'string') {\n        StreamChat._instance = new StreamChat<StreamChatGenerics>(key, secretOrOptions, options);\n      } else {\n        StreamChat._instance = new StreamChat<StreamChatGenerics>(key, secretOrOptions);\n      }\n    }\n\n    return StreamChat._instance as StreamChat<StreamChatGenerics>;\n  }\n\n  devToken(userID: string) {\n    return DevToken(userID);\n  }\n\n  getAuthType() {\n    return this.anonymous ? 'anonymous' : 'jwt';\n  }\n\n  setBaseURL(baseURL: string) {\n    this.baseURL = baseURL;\n    this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n  }\n\n  _getConnectionID = () => this.wsConnection?.connectionID || this.wsFallback?.connectionID;\n\n  _hasConnectionID = () => Boolean(this._getConnectionID());\n\n  /**\n   * connectUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n   */\n  connectUser = async (\n    user: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>,\n    userTokenOrProvider: TokenOrProvider,\n  ) => {\n    if (!user.id) {\n      throw new Error('The \"id\" field on the user is missing');\n    }\n\n    /**\n     * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n     * If the user id remains the same we don't throw error\n     */\n    if (this.userID === user.id && this.setUserPromise) {\n      console.warn(\n        'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.',\n      );\n      return this.setUserPromise;\n    }\n\n    if (this.userID) {\n      throw new Error(\n        'Use client.disconnect() before trying to connect as a different user. connectUser was called twice.',\n      );\n    }\n\n    if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    // we generate the client id client side\n    this.userID = user.id;\n    this.anonymous = false;\n\n    const setTokenPromise = this._setToken(user, userTokenOrProvider);\n    this._setUser(user);\n\n    const wsPromise = this.openConnection();\n\n    this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(\n      (result) => result[1], // We only return connection promise;\n    );\n\n    try {\n      return await this.setUserPromise;\n    } catch (err) {\n      if (this.persistUserOnConnectionFailure) {\n        // cleanup client to allow the user to retry connectUser again\n        this.closeConnection();\n      } else {\n        this.disconnectUser();\n      }\n      throw err;\n    }\n  };\n\n  /**\n   * @deprecated Please use connectUser() function instead. Its naming is more consistent with its functionality.\n   *\n   * setUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n   */\n  setUser = this.connectUser;\n\n  _setToken = (user: UserResponse<StreamChatGenerics>, userTokenOrProvider: TokenOrProvider) =>\n    this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n\n  _setUser(user: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>) {\n    /**\n     * This one is used by the frontend. This is a copy of the current user object stored on backend.\n     * It contains reserved properties and own user properties which are not present in `this._user`.\n     */\n    this.user = user;\n    this.userID = user.id;\n    // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n    this._user = { ...user };\n  }\n\n  /**\n   * Disconnects the websocket connection, without removing the user set on client.\n   * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n   * to call client.openConnection to reconnect to websocket.\n   *\n   * This is mainly useful on mobile side. You can only receive push notifications\n   * if you don't have active websocket connection.\n   * So when your app goes to background, you can call `client.closeConnection`.\n   * And when app comes back to foreground, call `client.openConnection`.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  closeConnection = async (timeout?: number) => {\n    if (this.cleaningIntervalRef != null) {\n      clearInterval(this.cleaningIntervalRef);\n      this.cleaningIntervalRef = undefined;\n    }\n\n    await Promise.all([this.wsConnection?.disconnect(timeout), this.wsFallback?.disconnect(timeout)]);\n    return Promise.resolve();\n  };\n\n  /**\n   * Creates an instance of ChannelManager.\n   *\n   * @internal\n   *\n   * @param eventHandlerOverrides - the overrides for event handlers to be used\n   * @param options - the options used for the channel manager\n   */\n  createChannelManager = ({\n    eventHandlerOverrides = {},\n    options = {},\n  }: {\n    eventHandlerOverrides?: ChannelManagerEventHandlerOverrides<StreamChatGenerics>;\n    options?: ChannelManagerOptions;\n  }) => {\n    return new ChannelManager({ client: this, eventHandlerOverrides, options });\n  };\n\n  /**\n   * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n   */\n  openConnection = async () => {\n    if (!this.userID) {\n      throw Error('User is not set on client, use client.connectUser or client.connectAnonymousUser instead');\n    }\n\n    if (this.wsConnection?.isConnecting && this.wsPromise) {\n      this.logger('info', 'client:openConnection() - connection already in progress', {\n        tags: ['connection', 'client'],\n      });\n      return this.wsPromise;\n    }\n\n    if ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID()) {\n      this.logger('info', 'client:openConnection() - openConnection called twice, healthy connection already exists', {\n        tags: ['connection', 'client'],\n      });\n\n      return;\n    }\n\n    this.clientID = `${this.userID}--${randomId()}`;\n    this.wsPromise = this.connect();\n    this._startCleaning();\n    return this.wsPromise;\n  };\n\n  /**\n   * @deprecated Please use client.openConnction instead.\n   * @private\n   *\n   * Creates a new websocket connection with current user.\n   */\n  _setupConnection = this.openConnection;\n\n  /**\n   * updateAppSettings - updates application settings\n   *\n   * @param {AppSettings} options App settings.\n   * IE: {\n      'apn_config': {\n        'auth_type': 'token',\n        'auth_key\": fs.readFileSync(\n          './apn-push-auth-key.p8',\n          'utf-8',\n        ),\n        'key_id': 'keyid',\n        'team_id': 'teamid',\n        'notification_template\": 'notification handlebars template',\n        'bundle_id': 'com.apple.your.app',\n        'development': true\n      },\n      'firebase_config': {\n        'server_key': 'server key from fcm',\n        'notification_template': 'notification handlebars template',\n        'data_template': 'data handlebars template',\n        'apn_template': 'apn notification handlebars template under v2'\n      },\n      'webhook_url': 'https://acme.com/my/awesome/webhook/'\n    }\n   */\n  async updateAppSettings(options: AppSettings) {\n    const apn_config = options.apn_config;\n    if (apn_config?.p12_cert) {\n      options = {\n        ...options,\n        apn_config: {\n          ...apn_config,\n          p12_cert: Buffer.from(apn_config.p12_cert).toString('base64'),\n        },\n      };\n    }\n    return await this.patch<APIResponse>(this.baseURL + '/app', options);\n  }\n\n  _normalizeDate = (before: Date | string | null): string | null => {\n    if (before instanceof Date) {\n      before = before.toISOString();\n    }\n\n    if (before === '') {\n      throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n    }\n\n    return before;\n  };\n\n  /**\n   * Revokes all tokens on application level issued before given time\n   */\n  async revokeTokens(before: Date | string | null) {\n    return await this.updateAppSettings({\n      revoke_tokens_issued_before: this._normalizeDate(before),\n    });\n  }\n\n  /**\n   * Revokes token for a user issued before given time\n   */\n  async revokeUserToken(userID: string, before?: Date | string | null) {\n    return await this.revokeUsersToken([userID], before);\n  }\n\n  /**\n   * Revokes tokens for a list of users issued before given time\n   */\n  async revokeUsersToken(userIDs: string[], before?: Date | string | null) {\n    if (before === undefined) {\n      before = new Date().toISOString();\n    } else {\n      before = this._normalizeDate(before);\n    }\n\n    const users: PartialUserUpdate<StreamChatGenerics>[] = [];\n    for (const userID of userIDs) {\n      users.push({\n        id: userID,\n        set: <Partial<UserResponse<StreamChatGenerics>>>{\n          revoke_tokens_issued_before: before,\n        },\n      });\n    }\n\n    return await this.partialUpdateUsers(users);\n  }\n\n  /**\n   * getAppSettings - retrieves application settings\n   */\n  async getAppSettings() {\n    return await this.get<AppSettingsAPIResponse<StreamChatGenerics>>(this.baseURL + '/app');\n  }\n\n  /**\n   * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n   *\n   * @param {string} userID User ID. If user has no devices, it will error\n   * @param {TestPushDataInput} [data] Overrides for push templates/message used\n   *  IE: {\n        messageID: 'id-of-message', // will error if message does not exist\n        apnTemplate: '{}', // if app doesn't have apn configured it will error\n        firebaseTemplate: '{}', // if app doesn't have firebase configured it will error\n        firebaseDataTemplate: '{}', // if app doesn't have firebase configured it will error\n        skipDevices: true, // skip config/device checks and sending to real devices\n        pushProviderName: 'staging' // one of your configured push providers\n        pushProviderType: 'apn' // one of supported provider types\n      }\n  */\n  async testPushSettings(userID: string, data: TestPushDataInput = {}) {\n    return await this.post<CheckPushResponse>(this.baseURL + '/check_push', {\n      user_id: userID,\n      ...(data.messageID ? { message_id: data.messageID } : {}),\n      ...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n      ...(data.firebaseTemplate ? { firebase_template: data.firebaseTemplate } : {}),\n      ...(data.firebaseDataTemplate ? { firebase_data_template: data.firebaseDataTemplate } : {}),\n      ...(data.skipDevices ? { skip_devices: true } : {}),\n      ...(data.pushProviderName ? { push_provider_name: data.pushProviderName } : {}),\n      ...(data.pushProviderType ? { push_provider_type: data.pushProviderType } : {}),\n    });\n  }\n\n  /**\n   * testSQSSettings - Tests that the given or configured SQS configuration is valid\n   *\n   * @param {TestSQSDataInput} [data] Overrides SQS settings for testing if needed\n   *  IE: {\n        sqs_key: 'auth_key',\n        sqs_secret: 'auth_secret',\n        sqs_url: 'url_to_queue',\n      }\n   */\n  async testSQSSettings(data: TestSQSDataInput = {}) {\n    return await this.post<CheckSQSResponse>(this.baseURL + '/check_sqs', data);\n  }\n\n  /**\n   * testSNSSettings - Tests that the given or configured SNS configuration is valid\n   *\n   * @param {TestSNSDataInput} [data] Overrides SNS settings for testing if needed\n   *  IE: {\n        sns_key: 'auth_key',\n        sns_secret: 'auth_secret',\n        sns_topic_arn: 'topic_to_publish_to',\n      }\n   */\n  async testSNSSettings(data: TestSNSDataInput = {}) {\n    return await this.post<CheckSNSResponse>(this.baseURL + '/check_sns', data);\n  }\n\n  /**\n   * Disconnects the websocket and removes the user from client.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  disconnectUser = async (timeout?: number) => {\n    this.logger('info', 'client:disconnect() - Disconnecting the client', {\n      tags: ['connection', 'client'],\n    });\n\n    // remove the user specific fields\n    delete this.user;\n    delete this._user;\n    delete this.userID;\n\n    this.anonymous = false;\n\n    const closePromise = this.closeConnection(timeout);\n\n    for (const channel of Object.values(this.activeChannels)) {\n      channel._disconnect();\n    }\n    // ensure we no longer return inactive channels\n    this.activeChannels = {};\n    // reset client state\n    this.state = new ClientState({ client: this });\n    // reset thread manager\n    this.threads.resetState();\n    // reset token manager\n    setTimeout(this.tokenManager.reset); // delay reseting to use token for disconnect calls\n\n    // close the WS connection\n    return closePromise;\n  };\n\n  /**\n   *\n   * @deprecated Please use client.disconnectUser instead.\n   *\n   * Disconnects the websocket and removes the user from client.\n   */\n  disconnect = this.disconnectUser;\n\n  /**\n   * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n   */\n  connectAnonymousUser = () => {\n    if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    this.anonymous = true;\n    this.userID = randomId();\n    const anonymousUser = {\n      id: this.userID,\n      anon: true,\n    } as UserResponse<StreamChatGenerics>;\n\n    this._setToken(anonymousUser, '');\n    this._setUser(anonymousUser);\n\n    return this._setupConnection();\n  };\n\n  /**\n   * @deprecated Please use connectAnonymousUser. Its naming is more consistent with its functionality.\n   */\n  setAnonymousUser = this.connectAnonymousUser;\n\n  /**\n   * setGuestUser - Setup a temporary guest user\n   *\n   * @param {UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n   *\n   * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n   */\n  async setGuestUser(user: UserResponse<StreamChatGenerics>) {\n    let response: { access_token: string; user: UserResponse<StreamChatGenerics> } | undefined;\n    this.anonymous = true;\n    try {\n      response = await this.post<\n        APIResponse & {\n          access_token: string;\n          user: UserResponse<StreamChatGenerics>;\n        }\n      >(this.baseURL + '/guest', { user });\n    } catch (e) {\n      this.anonymous = false;\n      throw e;\n    }\n    this.anonymous = false;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { created_at, updated_at, last_active, online, ...guestUser } = response.user;\n    return await this.connectUser(guestUser as UserResponse<StreamChatGenerics>, response.access_token);\n  }\n\n  /**\n   * createToken - Creates a token to authenticate this user. This function is used server side.\n   * The resulting token should be passed to the client side when the users registers or logs in.\n   *\n   * @param {string} userID The User ID\n   * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n   *\n   * @return {string} Returns a token\n   */\n  createToken(userID: string, exp?: number, iat?: number) {\n    if (this.secret == null) {\n      throw Error(`tokens can only be created server-side using the API Secret`);\n    }\n    const extra: { exp?: number; iat?: number } = {};\n\n    if (exp) {\n      extra.exp = exp;\n    }\n\n    if (iat) {\n      extra.iat = iat;\n    }\n\n    return JWTUserToken(this.secret, userID, extra, {});\n  }\n\n  /**\n   * on - Listen to events on all channels and users your watching\n   *\n   * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * client.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<StreamChatGenerics> | string} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call\n   *\n   * @return {{ unsubscribe: () => void }} Description\n   */\n  on(callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(eventType: string, callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(\n    callbackOrString: EventHandler<StreamChatGenerics> | string,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : (callbackOrString as EventHandler<StreamChatGenerics>);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this.logger('info', `Attaching listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key].push(callback);\n    return {\n      unsubscribe: () => {\n        this.logger('info', `Removing listener for ${key} event`, {\n          tags: ['event', 'client'],\n        });\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(callback: EventHandler<StreamChatGenerics>): void;\n  off(eventType: string, callback: EventHandler<StreamChatGenerics>): void;\n  off(\n    callbackOrString: EventHandler<StreamChatGenerics> | string,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ) {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : (callbackOrString as EventHandler<StreamChatGenerics>);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this.logger('info', `Removing listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  _logApiRequest(\n    type: string,\n    url: string,\n    data: unknown,\n    config: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    },\n  ) {\n    this.logger('info', `client: ${type} - Request - ${url}`, {\n      tags: ['api', 'api_request', 'client'],\n      url,\n      payload: data,\n      config,\n    });\n  }\n\n  _logApiResponse<T>(type: string, url: string, response: AxiosResponse<T>) {\n    this.logger('info', `client:${type} - Response - url: ${url} > status ${response.status}`, {\n      tags: ['api', 'api_response', 'client'],\n      url,\n      response,\n    });\n  }\n\n  _logApiError(type: string, url: string, error: unknown) {\n    this.logger('error', `client:${type} - Error - url: ${url}`, {\n      tags: ['api', 'api_response', 'client'],\n      url,\n      error,\n    });\n  }\n\n  doAxiosRequest = async <T>(\n    type: string,\n    url: string,\n    data?: unknown,\n    options: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    } = {},\n  ): Promise<T> => {\n    await this.tokenManager.tokenReady();\n    const requestConfig = this._enrichAxiosOptions(options);\n    try {\n      let response: AxiosResponse<T>;\n      this._logApiRequest(type, url, data, requestConfig);\n      switch (type) {\n        case 'get':\n          response = await this.axiosInstance.get(url, requestConfig);\n          break;\n        case 'delete':\n          response = await this.axiosInstance.delete(url, requestConfig);\n          break;\n        case 'post':\n          response = await this.axiosInstance.post(url, data, requestConfig);\n          break;\n        case 'postForm':\n          response = await this.axiosInstance.postForm(url, data, requestConfig);\n          break;\n        case 'put':\n          response = await this.axiosInstance.put(url, data, requestConfig);\n          break;\n        case 'patch':\n          response = await this.axiosInstance.patch(url, data, requestConfig);\n          break;\n        case 'options':\n          response = await this.axiosInstance.options(url, requestConfig);\n          break;\n        default:\n          throw new Error('Invalid request type');\n      }\n      this._logApiResponse<T>(type, url, response);\n      this.consecutiveFailures = 0;\n      return this.handleResponse(response);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any /**TODO: generalize error types  */) {\n      e.client_request_id = requestConfig.headers?.['x-client-request-id'];\n      this._logApiError(type, url, e);\n      this.consecutiveFailures += 1;\n      if (e.response) {\n        /** connection_fallback depends on this token expiration logic */\n        if (e.response.data.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n          if (this.consecutiveFailures > 1) {\n            await sleep(retryInterval(this.consecutiveFailures));\n          }\n          this.tokenManager.loadToken();\n          return await this.doAxiosRequest<T>(type, url, data, options);\n        }\n        return this.handleResponse(e.response);\n      } else {\n        throw e as AxiosError<APIErrorResponse>;\n      }\n    }\n  };\n\n  get<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('get', url, null, { params });\n  }\n\n  put<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('put', url, data);\n  }\n\n  post<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('post', url, data);\n  }\n\n  patch<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('patch', url, data);\n  }\n\n  delete<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('delete', url, null, { params });\n  }\n\n  sendFile(\n    url: string,\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<StreamChatGenerics>,\n  ) {\n    const data = addFileToFormData(uri, name, contentType || 'multipart/form-data');\n    if (user != null) data.append('user', JSON.stringify(user));\n\n    return this.doAxiosRequest<SendFileAPIResponse>('postForm', url, data, {\n      headers: data.getHeaders ? data.getHeaders() : {}, // node vs browser\n      config: {\n        timeout: 0,\n        maxContentLength: Infinity,\n        maxBodyLength: Infinity,\n      },\n    });\n  }\n\n  errorFromResponse(response: AxiosResponse<APIErrorResponse>): ErrorFromResponse<APIErrorResponse> {\n    let err: ErrorFromResponse<APIErrorResponse>;\n    err = new ErrorFromResponse(`StreamChat error HTTP code: ${response.status}`);\n    if (response.data && response.data.code) {\n      err = new Error(`StreamChat error code ${response.data.code}: ${response.data.message}`);\n      err.code = response.data.code;\n    }\n    err.response = response;\n    err.status = response.status;\n    return err;\n  }\n\n  handleResponse<T>(response: AxiosResponse<T>) {\n    const data = response.data;\n    if (isErrorResponse(response)) {\n      throw this.errorFromResponse(response);\n    }\n    return data;\n  }\n\n  dispatchEvent = (event: Event<StreamChatGenerics>) => {\n    if (!event.received_at) event.received_at = new Date();\n\n    // client event handlers\n    const postListenerCallbacks = this._handleClientEvent(event);\n\n    // channel event handlers\n    const cid = event.cid;\n    const channel = cid ? this.activeChannels[cid] : undefined;\n    if (channel) {\n      channel._handleChannelEvent(event);\n    }\n\n    this._callClientListeners(event);\n\n    if (channel) {\n      channel._callChannelListeners(event);\n    }\n\n    postListenerCallbacks.forEach((c) => c());\n  };\n\n  handleEvent = (messageEvent: WebSocket.MessageEvent) => {\n    // dispatch the event to the channel listeners\n    const jsonString = messageEvent.data as string;\n    const event = JSON.parse(jsonString) as Event<StreamChatGenerics>;\n    this.dispatchEvent(event);\n  };\n\n  /**\n   * Updates the members, watchers and read references of the currently active channels that contain this user\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  _updateMemberWatcherReferences = (user: UserResponse<StreamChatGenerics>) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      if (channel?.state) {\n        if (channel.state.members[user.id]) {\n          channel.state.members[user.id].user = user;\n        }\n        if (channel.state.watchers[user.id]) {\n          channel.state.watchers[user.id] = user;\n        }\n        if (channel.state.read[user.id]) {\n          channel.state.read[user.id].user = user;\n        }\n      }\n    }\n  };\n\n  /**\n   * @deprecated Please _updateMemberWatcherReferences instead.\n   * @private\n   */\n  _updateUserReferences = this._updateMemberWatcherReferences;\n\n  /**\n   * @private\n   *\n   * Updates the messages from the currently active channels that contain this user,\n   * with updated user object.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  _updateUserMessageReferences = (user: UserResponse<StreamChatGenerics>) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n\n      if (!channel) continue;\n\n      const state = channel.state;\n\n      /** update the messages from this user. */\n      state?.updateUserMessages(user);\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Deletes the messages from the currently active channels that contain this user\n   *\n   * If hardDelete is true, all the content of message will be stripped down.\n   * Otherwise, only 'message.type' will be set as 'deleted'.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   * @param {boolean} hardDelete\n   */\n  _deleteUserMessageReference = (user: UserResponse<StreamChatGenerics>, hardDelete = false) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      if (channel) {\n        const state = channel.state;\n\n        /** deleted the messages from this user. */\n        state?.deleteUserMessages(user, hardDelete);\n      }\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Handle following user related events:\n   * - user.presence.changed\n   * - user.updated\n   * - user.deleted\n   *\n   * @param {Event} event\n   */\n  _handleUserEvent = (event: Event<StreamChatGenerics>) => {\n    if (!event.user) {\n      return;\n    }\n\n    /** update the client.state with any changes to users */\n    if (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n      if (event.user.id === this.userID) {\n        const user = { ...(this.user || {}) };\n        const _user = { ...(this._user || {}) };\n\n        // Remove deleted properties from user objects.\n        for (const key in this.user) {\n          if (key in event.user || isOwnUserBaseProperty(key)) {\n            continue;\n          }\n\n          delete user[key];\n          delete _user[key];\n        }\n\n        /** Updating only available properties in _user object. */\n        for (const key in event.user) {\n          if (_user && key in _user) {\n            _user[key] = event.user[key];\n          }\n        }\n\n        // @ts-expect-error\n        this._user = { ..._user };\n        this.user = { ...user, ...event.user };\n      }\n\n      this.state.updateUser(event.user);\n      this._updateMemberWatcherReferences(event.user);\n    }\n\n    if (event.type === 'user.updated') {\n      this._updateUserMessageReferences(event.user);\n    }\n\n    if (event.type === 'user.deleted' && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {\n      this._deleteUserMessageReference(event.user, event.hard_delete);\n    }\n  };\n\n  _handleClientEvent(event: Event<StreamChatGenerics>) {\n    const client = this;\n    const postListenerCallbacks = [];\n    this.logger('info', `client:_handleClientEvent - Received event of type { ${event.type} }`, {\n      tags: ['event', 'client'],\n      event,\n    });\n\n    if (event.type === 'user.presence.changed' || event.type === 'user.updated' || event.type === 'user.deleted') {\n      this._handleUserEvent(event);\n    }\n\n    if (event.type === 'health.check' && event.me) {\n      client.user = event.me;\n      client.state.updateUser(event.me);\n      client.mutedChannels = event.me.channel_mutes;\n      client.mutedUsers = event.me.mutes;\n    }\n\n    if (event.channel && event.type === 'notification.message_new') {\n      this._addChannelConfig(event.channel);\n    }\n\n    if (event.type === 'notification.channel_mutes_updated' && event.me?.channel_mutes) {\n      this.mutedChannels = event.me.channel_mutes;\n    }\n\n    if (event.type === 'notification.mutes_updated' && event.me?.mutes) {\n      this.mutedUsers = event.me.mutes;\n    }\n\n    if (event.type === 'notification.mark_read' && event.unread_channels === 0) {\n      const activeChannelKeys = Object.keys(this.activeChannels);\n      activeChannelKeys.forEach((activeChannelKey) => (this.activeChannels[activeChannelKey].state.unreadCount = 0));\n    }\n\n    if ((event.type === 'channel.deleted' || event.type === 'notification.channel_deleted') && event.cid) {\n      client.state.deleteAllChannelReference(event.cid);\n      this.activeChannels[event.cid]?._disconnect();\n\n      postListenerCallbacks.push(() => {\n        if (!event.cid) return;\n\n        delete this.activeChannels[event.cid];\n      });\n    }\n\n    return postListenerCallbacks;\n  }\n\n  _muteStatus(cid: string) {\n    let muteStatus;\n    for (let i = 0; i < this.mutedChannels.length; i++) {\n      const mute = this.mutedChannels[i];\n      if (mute.channel?.cid === cid) {\n        muteStatus = {\n          muted: mute.expires ? new Date(mute.expires).getTime() > new Date().getTime() : true,\n          createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n          expiresAt: mute.expires ? new Date(mute.expires) : null,\n        };\n        break;\n      }\n    }\n\n    if (muteStatus) {\n      return muteStatus;\n    }\n\n    return {\n      muted: false,\n      createdAt: null,\n      expiresAt: null,\n    };\n  }\n\n  _callClientListeners = (event: Event<StreamChatGenerics>) => {\n    const client = this;\n    // gather and call the listeners\n    const listeners: Array<(event: Event<StreamChatGenerics>) => void> = [];\n    if (client.listeners.all) {\n      listeners.push(...client.listeners.all);\n    }\n    if (client.listeners[event.type]) {\n      listeners.push(...client.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      listener(event);\n    }\n  };\n\n  recoverState = async () => {\n    this.logger('info', `client:recoverState() - Start of recoverState with connectionID ${this._getConnectionID()}`, {\n      tags: ['connection'],\n    });\n\n    const cids = Object.keys(this.activeChannels);\n    if (cids.length && this.recoverStateOnReconnect) {\n      this.logger('info', `client:recoverState() - Start the querying of ${cids.length} channels`, {\n        tags: ['connection', 'client'],\n      });\n\n      await this.queryChannels(\n        { cid: { $in: cids } } as ChannelFilters<StreamChatGenerics>,\n        { last_message_at: -1 },\n        { limit: 30 },\n      );\n\n      this.logger('info', 'client:recoverState() - Querying channels finished', { tags: ['connection', 'client'] });\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<StreamChatGenerics>);\n    } else {\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<StreamChatGenerics>);\n    }\n\n    this.wsPromise = Promise.resolve();\n    this.setUserPromise = Promise.resolve();\n  };\n\n  /**\n   * @private\n   */\n  async connect() {\n    if (!this.userID || !this._user) {\n      throw Error('Call connectUser or connectAnonymousUser before starting the connection');\n    }\n    if (!this.wsBaseURL) {\n      throw Error('Websocket base url not set');\n    }\n    if (!this.clientID) {\n      throw Error('clientID is not set');\n    }\n\n    if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n      this._sayHi();\n    }\n    // The StableWSConnection handles all the reconnection logic.\n    if (this.options.wsConnection && this.node) {\n      // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n      ((this.options.wsConnection as unknown) as StableWSConnection<StreamChatGenerics>).setClient(this);\n      this.wsConnection = (this.options.wsConnection as unknown) as StableWSConnection<StreamChatGenerics>;\n    } else {\n      this.wsConnection = new StableWSConnection<StreamChatGenerics>({\n        client: this,\n      });\n    }\n\n    try {\n      // if fallback is used before, continue using it instead of waiting for WS to fail\n      if (this.wsFallback) {\n        return await this.wsFallback.connect();\n      }\n\n      // if WSFallback is enabled, ws connect should timeout faster so fallback can try\n      return await this.wsConnection.connect(\n        this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout,\n      );\n    } catch (err) {\n      // run fallback only if it's WS/Network error and not a normal API error\n      // make sure browser is online before even trying the longpoll\n      if (this.options.enableWSFallback && isWSFailure(err) && isOnline()) {\n        this.logger('info', 'client:connect() - WS failed, fallback to longpoll', { tags: ['connection', 'client'] });\n        this.dispatchEvent({ type: 'transport.changed', mode: 'longpoll' });\n\n        this.wsConnection._destroyCurrentWSConnection();\n        this.wsConnection.disconnect().then(); // close WS so no retry\n        this.wsFallback = new WSConnectionFallback<StreamChatGenerics>({\n          client: this,\n        });\n        return await this.wsFallback.connect();\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Check the connectivity with server for warmup purpose.\n   *\n   * @private\n   */\n  _sayHi() {\n    const client_request_id = randomId();\n    const opts = { headers: { 'x-client-request-id': client_request_id } };\n    this.doAxiosRequest('get', this.baseURL + '/hi', null, opts).catch((e) => {\n      if (this.options.enableInsights) {\n        postInsights('http_hi_failed', {\n          api_key: this.key,\n          err: e,\n          client_request_id,\n        });\n      }\n    });\n  }\n\n  /**\n   * queryUsers - Query users and watch user presence\n   *\n   * @param {UserFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions\n   * @param {UserSort<StreamChatGenerics>} sort Sort options, for instance [{last_active: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {UserOptions} options Option object, {presence: true}\n   *\n   * @return {Promise<{ users: Array<UserResponse<StreamChatGenerics>> }>} User Query Response\n   */\n  async queryUsers(\n    filterConditions: UserFilters<StreamChatGenerics>,\n    sort: UserSort<StreamChatGenerics> = [],\n    options: UserOptions = {},\n  ) {\n    const defaultOptions = {\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    if (!this._hasConnectionID()) {\n      defaultOptions.presence = false;\n    }\n\n    // Return a list of users\n    const data = await this.get<APIResponse & { users: Array<UserResponse<StreamChatGenerics>> }>(\n      this.baseURL + '/users',\n      {\n        payload: {\n          filter_conditions: filterConditions,\n          sort: normalizeQuerySort(sort),\n          ...defaultOptions,\n          ...options,\n        },\n      },\n    );\n\n    this.state.updateUsers(data.users);\n\n    return data;\n  }\n\n  /**\n   * queryBannedUsers - Query user bans\n   *\n   * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions\n   * @param {BannedUsersSort} sort Sort options [{created_at: 1}].\n   * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0, exclude_expired_bans: true}\n   *\n   * @return {Promise<BannedUsersResponse<StreamChatGenerics>>} Ban Query Response\n   */\n  async queryBannedUsers(\n    filterConditions: BannedUsersFilters = {},\n    sort: BannedUsersSort = [],\n    options: BannedUsersPaginationOptions = {},\n  ) {\n    // Return a list of user bans\n    return await this.get<BannedUsersResponse<StreamChatGenerics>>(this.baseURL + '/query_banned_users', {\n      payload: {\n        filter_conditions: filterConditions,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    });\n  }\n\n  /**\n   * queryMessageFlags - Query message flags\n   *\n   * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<MessageFlagsResponse<StreamChatGenerics>>} Message Flags Response\n   */\n  async queryMessageFlags(filterConditions: MessageFlagsFilters = {}, options: MessageFlagsPaginationOptions = {}) {\n    // Return a list of message flags\n    return await this.get<MessageFlagsResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flags/message', {\n      payload: { filter_conditions: filterConditions, ...options },\n    });\n  }\n\n  /**\n   * queryChannels - Query channels\n   *\n   * @param {ChannelFilters<StreamChatGenerics>} filterConditions object MongoDB style filters\n   * @param {ChannelSort<StreamChatGenerics>} [sort] Sort options, for instance {created_at: -1}.\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n   * @param {ChannelOptions} [options] Options object\n   * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.\n   * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.\n   *\n   * @return {Promise<{ channels: Array<ChannelAPIResponse<AStreamChatGenerics>>}> } search channels response\n   */\n  async queryChannels(\n    filterConditions: ChannelFilters<StreamChatGenerics>,\n    sort: ChannelSort<StreamChatGenerics> = [],\n    options: ChannelOptions = {},\n    stateOptions: ChannelStateOptions = {},\n  ) {\n    const defaultOptions: ChannelOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n    if (!this._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    // Return a list of channels\n    const payload = {\n      filter_conditions: filterConditions,\n      sort: normalizeQuerySort(sort),\n      ...defaultOptions,\n      ...options,\n    };\n\n    const data = await this.post<QueryChannelsAPIResponse<StreamChatGenerics>>(this.baseURL + '/channels', payload);\n\n    this.dispatchEvent({\n      type: 'channels.queried',\n      queriedChannels: {\n        channels: data.channels,\n        isLatestMessageSet: true,\n      },\n    });\n\n    return this.hydrateActiveChannels(data.channels, stateOptions, options);\n  }\n\n  /**\n   * queryReactions - Query reactions\n   *\n   * @param {ReactionFilters<StreamChatGenerics>} filter object MongoDB style filters\n   * @param {ReactionSort<StreamChatGenerics>} [sort] Sort options, for instance {created_at: -1}.\n   * @param {QueryReactionsOptions} [options] Pagination object\n   *\n   * @return {Promise<{ QueryReactionsAPIResponse } search channels response\n   */\n  async queryReactions(\n    messageID: string,\n    filter: ReactionFilters<StreamChatGenerics>,\n    sort: ReactionSort<StreamChatGenerics> = [],\n    options: QueryReactionsOptions = {},\n  ) {\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    // Return a list of channels\n    const payload = {\n      filter,\n      sort: normalizeQuerySort(sort),\n      ...options,\n    };\n\n    return await this.post<QueryReactionsAPIResponse<StreamChatGenerics>>(\n      this.baseURL + '/messages/' + encodeURIComponent(messageID) + '/reactions',\n      payload,\n    );\n  }\n\n  hydrateActiveChannels(\n    channelsFromApi: ChannelAPIResponse<StreamChatGenerics>[] = [],\n    stateOptions: ChannelStateOptions = {},\n    queryChannelsOptions?: ChannelOptions,\n  ) {\n    const { skipInitialization, offlineMode = false } = stateOptions;\n    const channels: Channel<StreamChatGenerics>[] = [];\n\n    for (const channelState of channelsFromApi) {\n      this._addChannelConfig(channelState.channel);\n      const c = this.channel(channelState.channel.type, channelState.channel.id);\n      c.data = channelState.channel;\n      c.offlineMode = offlineMode;\n      c.initialized = !offlineMode;\n      c.push_preferences = channelState.push_preferences;\n\n      let updatedMessagesSet;\n      if (skipInitialization === undefined) {\n        const { messageSet } = c._initializeState(channelState, 'latest');\n        updatedMessagesSet = messageSet;\n      } else if (!skipInitialization.includes(channelState.channel.id)) {\n        c.state.clearMessages();\n        const { messageSet } = c._initializeState(channelState, 'latest');\n        updatedMessagesSet = messageSet;\n      }\n\n      if (updatedMessagesSet) {\n        updatedMessagesSet.pagination = {\n          ...updatedMessagesSet.pagination,\n          ...messageSetPagination({\n            parentSet: updatedMessagesSet,\n            requestedPageSize: queryChannelsOptions?.message_limit || DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE,\n            returnedPage: channelState.messages,\n            logger: this.logger,\n          }),\n        };\n        this.polls.hydratePollCache(channelState.messages, true);\n      }\n\n      channels.push(c);\n    }\n\n    return channels;\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {ChannelFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions\n   * @param {MessageFilters<StreamChatGenerics> | string} query search query or object MongoDB style filters\n   * @param {SearchOptions<StreamChatGenerics>} [options] Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response\n   */\n  async search(\n    filterConditions: ChannelFilters<StreamChatGenerics>,\n    query: string | MessageFilters<StreamChatGenerics>,\n    options: SearchOptions<StreamChatGenerics> = {},\n  ) {\n    if (options.offset && options.next) {\n      throw Error(`Cannot specify offset with next`);\n    }\n    const payload: SearchPayload<StreamChatGenerics> = {\n      filter_conditions: filterConditions,\n      ...options,\n      sort: options.sort ? normalizeQuerySort<SearchMessageSortBase<StreamChatGenerics>>(options.sort) : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    return await this.get<SearchAPIResponse<StreamChatGenerics>>(this.baseURL + '/search', { payload });\n  }\n\n  /**\n   * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically\n   *\n   * @param {BaseDeviceFields} device the device object\n   * @param {string} device.id device id\n   * @param {string} device.push_provider the push provider\n   *\n   */\n  setLocalDevice(device: BaseDeviceFields) {\n    if (\n      (this.wsConnection?.isConnecting && this.wsPromise) ||\n      ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID())\n    ) {\n      throw new Error('you can only set device before opening a websocket connection');\n    }\n\n    this.options.device = device;\n  }\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {PushProvider} push_provider the push provider\n   * @param {string} [userID] the user id (defaults to current user)\n   * @param {string} [push_provider_name] user provided push provider name for multi bundle support\n   *\n   */\n  async addDevice(id: string, push_provider: PushProvider, userID?: string, push_provider_name?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/devices', {\n      id,\n      push_provider,\n      ...(userID != null ? { user_id: userID } : {}),\n      ...(push_provider_name != null ? { push_provider_name } : {}),\n    });\n  }\n\n  /**\n   * getDevices - Returns the devices associated with a current user\n   *\n   * @param {string} [userID] User ID. Only works on serverside\n   *\n   * @return {Device<StreamChatGenerics>[]} Array of devices\n   */\n  async getDevices(userID?: string) {\n    return await this.get<APIResponse & { devices?: Device<StreamChatGenerics>[] }>(\n      this.baseURL + '/devices',\n      userID ? { user_id: userID } : {},\n    );\n  }\n\n  /**\n   * getUnreadCount - Returns unread counts for a single user\n   *\n   * @param {string} [userID] User ID.\n   *\n   * @return {<GetUnreadCountAPIResponse>}\n   */\n  async getUnreadCount(userID?: string) {\n    return await this.get<GetUnreadCountAPIResponse>(this.baseURL + '/unread', userID ? { user_id: userID } : {});\n  }\n\n  /**\n   * getUnreadCountBatch - Returns unread counts for multiple users at once. Only works server side.\n   *\n   * @param {string[]} [userIDs] List of user IDs to fetch unread counts for.\n   *\n   * @return {<GetUnreadCountBatchAPIResponse>}\n   */\n  async getUnreadCountBatch(userIDs: string[]) {\n    return await this.post<GetUnreadCountBatchAPIResponse>(this.baseURL + '/unread_batch', { user_ids: userIDs });\n  }\n\n  /**\n   * setPushPreferences - Applies the list of push preferences.\n   *\n   * @param {PushPreference[]} A list of push preferences.\n   *\n   * @return {<UpsertPushPreferencesResponse>}\n   */\n  async setPushPreferences(preferences: PushPreference[]) {\n    return await this.post<UpsertPushPreferencesResponse>(this.baseURL + '/push_preferences', { preferences });\n  }\n\n  /**\n   * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n   *\n   * @param {string} id The device id\n   * @param {string} [userID] The user id. Only specify this for serverside requests\n   *\n   */\n  async removeDevice(id: string, userID?: string) {\n    return await this.delete<APIResponse>(this.baseURL + '/devices', {\n      id,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  }\n\n  /**\n   * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.\n   * Only available server-side.\n   *\n   * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.\n   * @returns {Promise<GetRateLimitsResponse>}\n   */\n  async getRateLimits(params?: {\n    android?: boolean;\n    endpoints?: EndpointName[];\n    ios?: boolean;\n    serverSide?: boolean;\n    web?: boolean;\n  }) {\n    const { serverSide, web, android, ios, endpoints } = params || {};\n    return this.get<GetRateLimitsResponse>(this.baseURL + '/rate_limits', {\n      server_side: serverSide,\n      web,\n      android,\n      ios,\n      endpoints: endpoints ? endpoints.join(',') : undefined,\n    });\n  }\n\n  _addChannelConfig({ cid, config }: ChannelResponse<StreamChatGenerics>) {\n    if (this._cacheEnabled()) {\n      this.configs[cid] = config;\n    }\n  }\n\n  /**\n   * channel - Returns a new channel with the given type, id and custom data\n   *\n   * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.\n   * Make sure to await channel.create() or channel.watch() before accessing channel functions:\n   * ie. channel = client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n   * await channel.create() to assign an ID to channel\n   *\n   * @param {string} channelType The channel type\n   * @param {string | ChannelData<StreamChatGenerics> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  channel(\n    channelType: string,\n    channelID?: string | null,\n    custom?: ChannelData<StreamChatGenerics>,\n  ): Channel<StreamChatGenerics>;\n  channel(channelType: string, custom?: ChannelData<StreamChatGenerics>): Channel<StreamChatGenerics>;\n  channel(\n    channelType: string,\n    channelIDOrCustom?: string | ChannelData<StreamChatGenerics> | null,\n    custom: ChannelData<StreamChatGenerics> = {} as ChannelData<StreamChatGenerics>,\n  ) {\n    if (!this.userID && !this._isUsingServerAuth()) {\n      throw Error('Call connectUser or connectAnonymousUser before creating a channel');\n    }\n\n    if (~channelType.indexOf(':')) {\n      throw Error(`Invalid channel group ${channelType}, can't contain the : character`);\n    }\n\n    // support channel(\"messaging\", {options})\n    if (channelIDOrCustom && typeof channelIDOrCustom === 'object') {\n      return this.getChannelByMembers(channelType, channelIDOrCustom);\n    }\n\n    // // support channel(\"messaging\", undefined, {options})\n    if (!channelIDOrCustom && typeof custom === 'object' && custom.members?.length) {\n      return this.getChannelByMembers(channelType, custom);\n    }\n\n    // support channel(\"messaging\", null, {options})\n    // support channel(\"messaging\", undefined, {options})\n    // support channel(\"messaging\", \"\", {options})\n    if (!channelIDOrCustom) {\n      return new Channel<StreamChatGenerics>(this, channelType, undefined, custom);\n    }\n\n    return this.getChannelById(channelType, channelIDOrCustom, custom);\n  }\n\n  /**\n   * It's a helper method for `client.channel()` method, used to create unique conversation or\n   * channel based on member list instead of id.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelByMembers = (channelType: string, custom: ChannelData<StreamChatGenerics>) => {\n    // Check if the channel already exists.\n    // Only allow 1 channel object per cid\n    const memberIds = (custom.members ?? []).map((member: string | NewMemberPayload<StreamChatGenerics>) =>\n      typeof member === 'string' ? member : member.user_id ?? '',\n    );\n    const membersStr = memberIds.sort().join(',');\n    const tempCid = generateChannelTempCid(channelType, memberIds);\n\n    if (!tempCid) {\n      throw Error('Please specify atleast one member when creating unique conversation');\n    }\n\n    // channel could exist in `activeChannels` list with either one of the following two keys:\n    // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create\n    // 2. Sorted membersStr - E.g., \"messaging:amin,vishal\" OR \"messaging:amin,jaap,tom\"\n    //                        This is set when you create a channel, but haven't queried yet. After query,\n    //                        we will replace it with `cid`\n    for (const key in this.activeChannels) {\n      const channel = this.activeChannels[key];\n      if (channel.disconnected) {\n        continue;\n      }\n\n      if (key === tempCid) {\n        return channel;\n      }\n\n      if (key.indexOf(`${channelType}:!members-`) === 0) {\n        const membersStrInExistingChannel = Object.keys(channel.state.members).sort().join(',');\n        if (membersStrInExistingChannel === membersStr) {\n          return channel;\n        }\n      }\n    }\n\n    const channel = new Channel<StreamChatGenerics>(this, channelType, undefined, custom);\n\n    // For the time being set the key as membersStr, since we don't know the cid yet.\n    // In channel.query, we will replace it with 'cid'.\n    if (this._cacheEnabled()) {\n      this.activeChannels[tempCid] = channel;\n    }\n\n    return channel;\n  };\n\n  /**\n   * Its a helper method for `client.channel()` method, used to channel given the id of channel.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {string} [channelID] The channel ID\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelById = (channelType: string, channelID: string, custom: ChannelData<StreamChatGenerics>) => {\n    if (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n      throw Error(`Invalid channel id ${channelID}, can't contain the : character`);\n    }\n\n    // only allow 1 channel object per cid\n    const cid = `${channelType}:${channelID}`;\n    if (cid in this.activeChannels && this.activeChannels[cid] && !this.activeChannels[cid].disconnected) {\n      const channel = this.activeChannels[cid];\n      if (Object.keys(custom).length > 0) {\n        channel.data = { ...channel.data, ...custom };\n        channel._data = { ...channel._data, ...custom };\n      }\n      return channel;\n    }\n    const channel = new Channel<StreamChatGenerics>(this, channelType, channelID, custom);\n    if (this._cacheEnabled()) {\n      this.activeChannels[channel.cid] = channel;\n    }\n\n    return channel;\n  };\n\n  /**\n   * partialUpdateUser - Update the given user object\n   *\n   * @param {PartialUserUpdate<StreamChatGenerics>} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n   * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>} list of updated users\n   */\n  async partialUpdateUser(partialUserObject: PartialUserUpdate<StreamChatGenerics>) {\n    return await this.partialUpdateUsers([partialUserObject]);\n  }\n\n  /**\n   * upsertUsers - Batch upsert the list of users\n   *\n   * @param {UserResponse<StreamChatGenerics>[]} users list of users\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  async upsertUsers(users: UserResponse<StreamChatGenerics>[]) {\n    const userMap: { [key: string]: UserResponse<StreamChatGenerics> } = {};\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n      userMap[userObject.id] = userObject;\n    }\n\n    return await this.post<\n      APIResponse & {\n        users: { [key: string]: UserResponse<StreamChatGenerics> };\n      }\n    >(this.baseURL + '/users', { users: userMap });\n  }\n\n  /**\n   * @deprecated Please use upsertUsers() function instead.\n   *\n   * updateUsers - Batch update the list of users\n   *\n   * @param {UserResponse<StreamChatGenerics>[]} users list of users\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  updateUsers = this.upsertUsers;\n\n  /**\n   * upsertUser - Update or Create the given user object\n   *\n   * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  upsertUser(userObject: UserResponse<StreamChatGenerics>) {\n    return this.upsertUsers([userObject]);\n  }\n\n  /**\n   * @deprecated Please use upsertUser() function instead.\n   *\n   * updateUser - Update or Create the given user object\n   *\n   * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  updateUser = this.upsertUser;\n\n  /**\n   * partialUpdateUsers - Batch partial update of users\n   *\n   * @param {PartialUserUpdate<StreamChatGenerics>[]} users list of partial update requests\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  async partialUpdateUsers(users: PartialUserUpdate<StreamChatGenerics>[]) {\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n    }\n\n    return await this.patch<\n      APIResponse & {\n        users: { [key: string]: UserResponse<StreamChatGenerics> };\n      }\n    >(this.baseURL + '/users', { users });\n  }\n\n  async deleteUser(\n    userID: string,\n    params?: {\n      delete_conversation_channels?: boolean;\n      hard_delete?: boolean;\n      mark_messages_deleted?: boolean;\n    },\n  ) {\n    return await this.delete<\n      APIResponse & { user: UserResponse<StreamChatGenerics> } & {\n        task_id?: string;\n      }\n    >(this.baseURL + `/users/${encodeURIComponent(userID)}`, params);\n  }\n\n  /**\n   * restoreUsers - Restore soft deleted users\n   *\n   * @param {string[]} user_ids which users to restore\n   *\n   * @return {APIResponse} An API response\n   */\n  async restoreUsers(user_ids: string[]) {\n    return await this.post<APIResponse>(this.baseURL + `/users/restore`, {\n      user_ids,\n    });\n  }\n\n  /**\n   * reactivateUser - Reactivate one user\n   *\n   * @param {string} userID which user to reactivate\n   * @param {ReactivateUserOptions} [options]\n   *\n   * @return {UserResponse} Reactivated user\n   */\n  async reactivateUser(userID: string, options?: ReactivateUserOptions) {\n    return await this.post<APIResponse & { user: UserResponse<StreamChatGenerics> }>(\n      this.baseURL + `/users/${encodeURIComponent(userID)}/reactivate`,\n      { ...options },\n    );\n  }\n\n  /**\n   * reactivateUsers - Reactivate many users asynchronously\n   *\n   * @param {string[]} user_ids which users to reactivate\n   * @param {ReactivateUsersOptions} [options]\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async reactivateUsers(user_ids: string[], options?: ReactivateUsersOptions) {\n    return await this.post<APIResponse & TaskResponse>(this.baseURL + `/users/reactivate`, { user_ids, ...options });\n  }\n\n  /**\n   * deactivateUser - Deactivate one user\n   *\n   * @param {string} userID which user to deactivate\n   * @param {DeactivateUsersOptions} [options]\n   *\n   * @return {UserResponse} Deactivated user\n   */\n  async deactivateUser(userID: string, options?: DeactivateUsersOptions) {\n    return await this.post<APIResponse & { user: UserResponse<StreamChatGenerics> }>(\n      this.baseURL + `/users/${encodeURIComponent(userID)}/deactivate`,\n      { ...options },\n    );\n  }\n\n  /**\n   * deactivateUsers - Deactivate many users asynchronously\n   *\n   * @param {string[]} user_ids which users to deactivate\n   * @param {DeactivateUsersOptions} [options]\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async deactivateUsers(user_ids: string[], options?: DeactivateUsersOptions) {\n    return await this.post<APIResponse & TaskResponse>(this.baseURL + `/users/deactivate`, { user_ids, ...options });\n  }\n\n  async exportUser(userID: string, options?: Record<string, string>) {\n    return await this.get<\n      APIResponse & {\n        messages: MessageResponse<StreamChatGenerics>[];\n        reactions: ReactionResponse<StreamChatGenerics>[];\n        user: UserResponse<StreamChatGenerics>;\n      }\n    >(this.baseURL + `/users/${encodeURIComponent(userID)}/export`, { ...options });\n  }\n\n  /** banUser - bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options?: BanUserOptions<StreamChatGenerics>) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** unbanUser - revoke global ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.delete<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** shadowBan - shadow bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options?: BanUserOptions<StreamChatGenerics>) {\n    return await this.banUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** removeShadowBan - revoke global shadow ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.unbanUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n  async blockUser(blockedUserID: string, user_id?: string) {\n    return await this.post<BlockUserAPIResponse>(this.baseURL + '/users/block', {\n      blocked_user_id: blockedUserID,\n      ...(user_id ? { user_id } : {}),\n    });\n  }\n\n  async getBlockedUsers(user_id?: string) {\n    return await this.get<GetBlockedUsersAPIResponse>(this.baseURL + '/users/block', {\n      ...(user_id ? { user_id } : {}),\n    });\n  }\n  async unBlockUser(blockedUserID: string, userID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/users/unblock', {\n      blocked_user_id: blockedUserID,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  }\n  /** muteUser - mutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [userID] Only used with serverside auth\n   * @param {MuteUserOptions<StreamChatGenerics>} [options]\n   * @returns {Promise<MuteUserResponse<StreamChatGenerics>>}\n   */\n  async muteUser(targetID: string, userID?: string, options: MuteUserOptions<StreamChatGenerics> = {}) {\n    return await this.post<MuteUserResponse<StreamChatGenerics>>(this.baseURL + '/moderation/mute', {\n      target_id: targetID,\n      ...(userID ? { user_id: userID } : {}),\n      ...options,\n    });\n  }\n\n  /** unmuteUser - unmutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [currentUserID] Only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unmuteUser(targetID: string, currentUserID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unmute', {\n      target_id: targetID,\n      ...(currentUserID ? { user_id: currentUserID } : {}),\n    });\n  }\n\n  /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called\n   *\n   * @param {string} targetID\n   * @returns {boolean}\n   */\n  userMuteStatus(targetID: string) {\n    if (!this.user || !this.wsPromise) {\n      throw new Error('Make sure to await connectUser() first.');\n    }\n\n    for (let i = 0; i < this.mutedUsers.length; i += 1) {\n      if (this.mutedUsers[i].target.id === targetID) return true;\n    }\n    return false;\n  }\n\n  /**\n   * flagMessage - flag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagMessage(targetMessageID: string, options: { reason?: string; user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flag', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n\n  /**\n   * flagUser - flag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagUser(targetID: string, options: { reason?: string; user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flag', {\n      target_user_id: targetID,\n      ...options,\n    });\n  }\n\n  /**\n   * unflagMessage - unflag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<StreamChatGenerics>>(this.baseURL + '/moderation/unflag', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n\n  /**\n   * unflagUser - unflag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<StreamChatGenerics>>(this.baseURL + '/moderation/unflag', {\n      target_user_id: targetID,\n      ...options,\n    });\n  }\n\n  /**\n   * getCallToken - retrieves the auth token needed to join a call\n   *\n   * @param {string} callID\n   * @param {object} options\n   * @returns {Promise<GetCallTokenResponse>}\n   */\n  async getCallToken(callID: string, options: { user_id?: string } = {}) {\n    return await this.post<GetCallTokenResponse>(this.baseURL + `/calls/${encodeURIComponent(callID)}`, { ...options });\n  }\n\n  /**\n   * _queryFlags - Query flags.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {FlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {FlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<FlagsResponse<StreamChatGenerics>>} Flags Response\n   */\n  async _queryFlags(filterConditions: FlagsFilters = {}, options: FlagsPaginationOptions = {}) {\n    // Return a list of flags\n    return await this.post<FlagsResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flags', {\n      filter_conditions: filterConditions,\n      ...options,\n    });\n  }\n\n  /**\n   * _queryFlagReports - Query flag reports.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {FlagReportsFilters} filterConditions MongoDB style filter conditions\n   * @param {FlagReportsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<FlagReportsResponse<StreamChatGenerics>>} Flag Reports Response\n   */\n  async _queryFlagReports(filterConditions: FlagReportsFilters = {}, options: FlagReportsPaginationOptions = {}) {\n    // Return a list of message flags\n    return await this.post<FlagReportsResponse<StreamChatGenerics>>(this.baseURL + '/moderation/reports', {\n      filter_conditions: filterConditions,\n      ...options,\n    });\n  }\n\n  /**\n   * _reviewFlagReport - review flag report\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} [id] flag report to review\n   * @param {string} [reviewResult] flag report review result\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @param {string} [options.review_details] custom information about review result\n   * @returns {Promise<ReviewFlagReportResponse>>}\n   */\n  async _reviewFlagReport(id: string, reviewResult: string, options: ReviewFlagReportOptions = {}) {\n    return await this.patch<ReviewFlagReportResponse<StreamChatGenerics>>(\n      this.baseURL + `/moderation/reports/${encodeURIComponent(id)}`,\n      {\n        review_result: reviewResult,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * unblockMessage - unblocks message blocked by automod\n   *\n   *\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unblockMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unblock_message', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n  // alias for backwards compatibility\n  _unblockMessage = this.unblockMessage;\n\n  /**\n   * @deprecated use markChannelsRead instead\n   *\n   * markAllRead - marks all channels for this user as read\n   * @param {MarkAllReadOptions<StreamChatGenerics>} [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  markAllRead = this.markChannelsRead;\n\n  /**\n   * markChannelsRead - marks channels read -\n   * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read\n   *\n   * @param {MarkChannelsReadOptions <StreamChatGenerics>} [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  async markChannelsRead(data: MarkChannelsReadOptions<StreamChatGenerics> = {}) {\n    await this.post<APIResponse>(this.baseURL + '/channels/read', { ...data });\n  }\n\n  createCommand(data: CreateCommandOptions<StreamChatGenerics>) {\n    return this.post<CreateCommandResponse<StreamChatGenerics>>(this.baseURL + '/commands', data);\n  }\n\n  getCommand(name: string) {\n    return this.get<GetCommandResponse<StreamChatGenerics>>(this.baseURL + `/commands/${encodeURIComponent(name)}`);\n  }\n\n  updateCommand(name: string, data: UpdateCommandOptions<StreamChatGenerics>) {\n    return this.put<UpdateCommandResponse<StreamChatGenerics>>(\n      this.baseURL + `/commands/${encodeURIComponent(name)}`,\n      data,\n    );\n  }\n\n  deleteCommand(name: string) {\n    return this.delete<DeleteCommandResponse<StreamChatGenerics>>(\n      this.baseURL + `/commands/${encodeURIComponent(name)}`,\n    );\n  }\n\n  listCommands() {\n    return this.get<ListCommandsResponse<StreamChatGenerics>>(this.baseURL + `/commands`);\n  }\n\n  createChannelType(data: CreateChannelOptions<StreamChatGenerics>) {\n    const channelData = Object.assign({}, { commands: ['all'] }, data);\n    return this.post<CreateChannelResponse<StreamChatGenerics>>(this.baseURL + '/channeltypes', channelData);\n  }\n\n  getChannelType(channelType: string) {\n    return this.get<GetChannelTypeResponse<StreamChatGenerics>>(\n      this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`,\n    );\n  }\n\n  updateChannelType(channelType: string, data: UpdateChannelOptions<StreamChatGenerics>) {\n    return this.put<UpdateChannelResponse<StreamChatGenerics>>(\n      this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`,\n      data,\n    );\n  }\n\n  deleteChannelType(channelType: string) {\n    return this.delete<APIResponse>(this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`);\n  }\n\n  listChannelTypes() {\n    return this.get<ListChannelResponse<StreamChatGenerics>>(this.baseURL + `/channeltypes`);\n  }\n\n  /**\n   * translateMessage - adds the translation to the message\n   *\n   * @param {string} messageId\n   * @param {string} language\n   *\n   * @return {MessageResponse<StreamChatGenerics>} Response that includes the message\n   */\n  async translateMessage(messageId: string, language: string) {\n    return await this.post<APIResponse & MessageResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${encodeURIComponent(messageId)}/translate`,\n      { language },\n    );\n  }\n\n  /**\n   * translate - translates the given text to provided language\n   *\n   * @param {string} text\n   * @param {string} destination_language\n   * @param {string} source_language\n   *\n   * @return {TranslateResponse} Response that includes the message\n   */\n  async translate(text: string, destination_language: string, source_language: string) {\n    return await this.post<APIResponse & TranslateResponse>(this.baseURL + `/translate`, {\n      text,\n      source_language,\n      destination_language,\n    });\n  }\n\n  /**\n   * _normalizeExpiration - transforms expiration value into ISO string\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   */\n  _normalizeExpiration(timeoutOrExpirationDate?: null | number | string | Date) {\n    let pinExpires: null | string = null;\n    if (typeof timeoutOrExpirationDate === 'number') {\n      const now = new Date();\n      now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n      pinExpires = now.toISOString();\n    } else if (isString(timeoutOrExpirationDate)) {\n      pinExpires = timeoutOrExpirationDate;\n    } else if (timeoutOrExpirationDate instanceof Date) {\n      pinExpires = timeoutOrExpirationDate.toISOString();\n    }\n    return pinExpires;\n  }\n\n  /**\n   * _messageId - extracts string message id from either message object or message id\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string} errorText error message to report in case of message id absence\n   */\n  _validateAndGetMessageId(messageOrMessageId: string | { id: string }, errorText: string) {\n    let messageId: string;\n    if (typeof messageOrMessageId === 'string') {\n      messageId = messageOrMessageId;\n    } else {\n      if (!messageOrMessageId.id) {\n        throw Error(errorText);\n      }\n      messageId = messageOrMessageId.id;\n    }\n    return messageId;\n  }\n\n  /**\n   * pinMessage - pins the message\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   * @param {undefined|string | { id: string }} [pinnedBy] who will appear as a user who pinned a message. Only for server-side use. Provide `undefined` when pinning message client-side\n   * @param {undefined|number|string|Date} pinnedAt date when message should be pinned. It affects the order of pinned messages. Use negative number to set relative time in the past, string or Date to set exact date of pin\n   */\n  pinMessage(\n    messageOrMessageId: string | { id: string },\n    timeoutOrExpirationDate?: null | number | string | Date,\n    pinnedBy?: string | { id: string },\n    pinnedAt?: number | string | Date,\n  ) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      ({\n        set: {\n          pinned: true,\n          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),\n          pinned_at: this._normalizeExpiration(pinnedAt),\n        },\n      } as unknown) as PartialMessageUpdate<StreamChatGenerics>,\n      pinnedBy,\n    );\n  }\n\n  /**\n   * unpinMessage - unpins the message that was previously pinned\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string | { id: string }} [userId]\n   */\n  unpinMessage(messageOrMessageId: string | { id: string }, userId?: string | { id: string }) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      ({\n        set: { pinned: false },\n      } as unknown) as PartialMessageUpdate<StreamChatGenerics>,\n      userId,\n    );\n  }\n\n  /**\n   * updateMessage - Update the given message\n   *\n   * @param {Omit<MessageResponse<StreamChatGenerics>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified\n   * @param {string | { id: string }} [userId]\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   *\n   * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the message\n   */\n  async updateMessage(\n    message: UpdatedMessage<StreamChatGenerics>,\n    userId?: string | { id: string },\n    options?: UpdateMessageOptions,\n  ) {\n    if (!message.id) {\n      throw Error('Please specify the message id when calling updateMessage');\n    }\n\n    const clonedMessage: Message = Object.assign({}, message);\n    delete clonedMessage.id;\n\n    const reservedMessageFields: Array<ReservedMessageFields> = [\n      'command',\n      'created_at',\n      'html',\n      'latest_reactions',\n      'own_reactions',\n      'quoted_message',\n      'reaction_counts',\n      'reply_count',\n      'type',\n      'updated_at',\n      'user',\n      'pinned_at',\n      '__html',\n    ];\n\n    reservedMessageFields.forEach(function (item) {\n      if (clonedMessage[item] != null) {\n        delete clonedMessage[item];\n      }\n    });\n\n    if (userId != null) {\n      if (isString(userId)) {\n        clonedMessage.user_id = userId;\n      } else {\n        clonedMessage.user = {\n          id: userId.id,\n        } as UserResponse<StreamChatGenerics>;\n      }\n    }\n\n    /**\n     * Server always expects mentioned_users to be array of string. We are adding extra check, just in case\n     * SDK missed this conversion.\n     */\n    if (Array.isArray(clonedMessage.mentioned_users) && !isString(clonedMessage.mentioned_users[0])) {\n      clonedMessage.mentioned_users = clonedMessage.mentioned_users.map((mu) => ((mu as unknown) as UserResponse).id);\n    }\n\n    return await this.post<UpdateMessageAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${encodeURIComponent(message.id as string)}`,\n      {\n        message: clonedMessage,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * partialUpdateMessage - Update the given message id while retaining additional properties\n   *\n   * @param {string} id the message id\n   *\n   * @param {PartialUpdateMessage<StreamChatGenerics>}  partialMessageObject which should contain id and any of \"set\" or \"unset\" params;\n   *         example: {id: \"user1\", set:{text: \"hi\"}, unset:[\"color\"]}\n   * @param {string | { id: string }} [userId]\n   *\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   *\n   * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the updated message\n   */\n  async partialUpdateMessage(\n    id: string,\n    partialMessageObject: PartialMessageUpdate<StreamChatGenerics>,\n    userId?: string | { id: string },\n    options?: UpdateMessageOptions,\n  ) {\n    if (!id) {\n      throw Error('Please specify the message id when calling partialUpdateMessage');\n    }\n    let user = userId;\n    if (userId != null && isString(userId)) {\n      user = { id: userId };\n    }\n    return await this.put<UpdateMessageAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${encodeURIComponent(id)}`,\n      {\n        ...partialMessageObject,\n        ...options,\n        user,\n      },\n    );\n  }\n\n  async deleteMessage(messageID: string, hardDelete?: boolean) {\n    let params = {};\n    if (hardDelete) {\n      params = { hard: true };\n    }\n    return await this.delete<APIResponse & { message: MessageResponse<StreamChatGenerics> }>(\n      this.baseURL + `/messages/${encodeURIComponent(messageID)}`,\n      params,\n    );\n  }\n\n  /**\n   * undeleteMessage - Undelete a message\n   *\n   * undeletes a message that was previous soft deleted. Hard deleted messages\n   * cannot be undeleted. This is only allowed to be called from server-side\n   * clients.\n   *\n   * @param {string} messageID The id of the message to undelete\n   * @param {string} userID The id of the user who undeleted the message\n   *\n   * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the message\n   */\n  async undeleteMessage(messageID: string, userID: string) {\n    return await this.post<APIResponse & { message: MessageResponse<StreamChatGenerics> }>(\n      this.baseURL + `/messages/${encodeURIComponent(messageID)}/undelete`,\n      { undeleted_by: userID },\n    );\n  }\n\n  async getMessage(messageID: string, options?: GetMessageOptions) {\n    return await this.get<GetMessageAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${encodeURIComponent(messageID)}`,\n      { ...options },\n    );\n  }\n\n  /**\n   * queryThreads - returns the list of threads of current user.\n   *\n   * @param {QueryThreadsOptions} options Options object for pagination and limiting the participants and replies.\n   * @param {number}  options.limit Limits the number of threads to be returned.\n   * @param {boolean} options.watch Subscribes the user to the channels of the threads.\n   * @param {number}  options.participant_limit Limits the number of participants returned per threads.\n   * @param {number}  options.reply_limit Limits the number of replies returned per threads.\n   *\n   * @returns {{ threads: Thread<StreamChatGenerics>[], next: string }} Returns the list of threads and the next cursor.\n   */\n  async queryThreads(options: QueryThreadsOptions = {}) {\n    const optionsWithDefaults = {\n      limit: 10,\n      participant_limit: 10,\n      reply_limit: 3,\n      watch: true,\n      ...options,\n    };\n\n    const response = await this.post<QueryThreadsAPIResponse<StreamChatGenerics>>(\n      `${this.baseURL}/threads`,\n      optionsWithDefaults,\n    );\n\n    return {\n      threads: response.threads.map(\n        (thread) => new Thread<StreamChatGenerics>({ client: this, threadData: thread }),\n      ),\n      next: response.next,\n    };\n  }\n\n  /**\n   * getThread - returns the thread of a message by its id.\n   *\n   * @param {string}            messageId The message id\n   * @param {GetThreadOptions}  options Options object for pagination and limiting the participants and replies.\n   * @param {boolean}           options.watch Subscribes the user to the channel of the thread.\n   * @param {number}            options.participant_limit Limits the number of participants returned per threads.\n   * @param {number}            options.reply_limit Limits the number of replies returned per threads.\n   *\n   * @returns {Thread<StreamChatGenerics>} Returns the thread.\n   */\n  async getThread(messageId: string, options: GetThreadOptions = {}) {\n    if (!messageId) {\n      throw Error('Please specify the messageId when calling getThread');\n    }\n\n    const optionsWithDefaults = {\n      participant_limit: 100,\n      reply_limit: 3,\n      watch: true,\n      ...options,\n    };\n\n    const response = await this.get<GetThreadAPIResponse<StreamChatGenerics>>(\n      `${this.baseURL}/threads/${encodeURIComponent(messageId)}`,\n      optionsWithDefaults,\n    );\n\n    return new Thread<StreamChatGenerics>({ client: this, threadData: response.thread });\n  }\n\n  /**\n   * partialUpdateThread - updates the given thread\n   *\n   * @param {string}              messageId The id of the thread message which needs to be updated.\n   * @param {PartialThreadUpdate} partialThreadObject should contain \"set\" or \"unset\" params for any of the thread's non-reserved fields.\n   *\n   * @returns {GetThreadAPIResponse<StreamChatGenerics>} Returns the updated thread.\n   */\n  async partialUpdateThread(messageId: string, partialThreadObject: PartialThreadUpdate) {\n    if (!messageId) {\n      throw Error('Please specify the message id when calling partialUpdateThread');\n    }\n\n    // check for reserved fields from ThreadResponse type within partialThreadObject's set and unset.\n    // Throw error if any of the reserved field is found.\n    const reservedThreadFields = [\n      'created_at',\n      'id',\n      'last_message_at',\n      'type',\n      'updated_at',\n      'user',\n      'reply_count',\n      'participants',\n      'channel',\n      'custom',\n    ];\n\n    for (const key in { ...partialThreadObject.set, ...partialThreadObject.unset }) {\n      if (reservedThreadFields.includes(key)) {\n        throw Error(\n          `You cannot set ${key} field on Thread object. ${key} is reserved for server-side use. Please omit ${key} from your set object.`,\n        );\n      }\n    }\n\n    return await this.patch<GetThreadAPIResponse<StreamChatGenerics>>(\n      `${this.baseURL}/threads/${encodeURIComponent(messageId)}`,\n      partialThreadObject,\n    );\n  }\n\n  getUserAgent() {\n    if (this.userAgent) {\n      return this.userAgent;\n    }\n\n    const version = process.env.PKG_VERSION;\n    const clientBundle = process.env.CLIENT_BUNDLE;\n\n    let userAgentString = '';\n    if (this.sdkIdentifier) {\n      userAgentString = `stream-chat-${this.sdkIdentifier.name}-v${this.sdkIdentifier.version}-llc-v${version}`;\n    } else {\n      userAgentString = `stream-chat-js-v${version}-${this.node ? 'node' : 'browser'}`;\n    }\n\n    const { os, model } = this.deviceIdentifier ?? {};\n\n    return ([\n      // reports the device OS, if provided\n      ['os', os],\n      // reports the device model, if provided\n      ['device_model', model],\n      // reports which bundle is being picked from the exports\n      ['client_bundle', clientBundle],\n    ] as const).reduce(\n      (withArguments, [key, value]) =>\n        value && value.length > 0 ? withArguments.concat(`|${key}=${value}`) : withArguments,\n      userAgentString,\n    );\n  }\n\n  /**\n   * @deprecated use sdkIdentifier instead\n   * @param userAgent\n   */\n  setUserAgent(userAgent: string) {\n    this.userAgent = userAgent;\n  }\n\n  /**\n   * _isUsingServerAuth - Returns true if we're using server side auth\n   */\n  _isUsingServerAuth = () => !!this.secret;\n\n  _cacheEnabled = () => !this._isUsingServerAuth() || !this.options.disableCache;\n\n  _enrichAxiosOptions(\n    options: AxiosRequestConfig & { config?: AxiosRequestConfig } = {\n      params: {},\n      headers: {},\n      config: {},\n    },\n  ): AxiosRequestConfig {\n    const token = this._getToken();\n    const authorization = token ? { Authorization: token } : undefined;\n    let signal: AbortSignal | null = null;\n    if (this.nextRequestAbortController !== null) {\n      signal = this.nextRequestAbortController.signal;\n      this.nextRequestAbortController = null;\n    }\n\n    if (!options.headers?.['x-client-request-id']) {\n      options.headers = {\n        ...options.headers,\n        'x-client-request-id': randomId(),\n      };\n    }\n\n    const { params: axiosRequestConfigParams, headers: axiosRequestConfigHeaders, ...axiosRequestConfigRest } =\n      this.options.axiosRequestConfig || {};\n\n    return {\n      params: {\n        user_id: this.userID,\n        connection_id: this._getConnectionID(),\n        api_key: this.key,\n        ...options.params,\n        ...(axiosRequestConfigParams || {}),\n      },\n      headers: {\n        ...authorization,\n        'stream-auth-type': this.getAuthType(),\n        'X-Stream-Client': this.getUserAgent(),\n        ...options.headers,\n        ...(axiosRequestConfigHeaders || {}),\n      },\n      ...(signal ? { signal } : {}),\n      ...options.config,\n      ...(axiosRequestConfigRest || {}),\n    };\n  }\n\n  _getToken() {\n    if (!this.tokenManager || this.anonymous) return null;\n\n    return this.tokenManager.getToken();\n  }\n\n  _startCleaning() {\n    const that = this;\n    if (this.cleaningIntervalRef != null) {\n      return;\n    }\n    this.cleaningIntervalRef = setInterval(() => {\n      // call clean on the channel, used for calling the stop.typing event etc.\n      for (const channel of Object.values(that.activeChannels)) {\n        channel.clean();\n      }\n    }, 500);\n  }\n\n  /**\n   * encode ws url payload\n   * @private\n   * @returns json string\n   */\n  _buildWSPayload = (client_request_id?: string) => {\n    return JSON.stringify({\n      user_id: this.userID,\n      user_details: this._user,\n      device: this.options.device,\n      client_request_id,\n    });\n  };\n\n  /**\n   * checks signature of a request\n   * @param {string | Buffer} rawBody\n   * @param {string} signature from HTTP header\n   * @returns {boolean}\n   */\n  verifyWebhook(requestBody: string | Buffer, xSignature: string) {\n    return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n  }\n\n  /** getPermission - gets the definition for a permission\n   *\n   * @param {string} name\n   * @returns {Promise<PermissionAPIResponse>}\n   */\n  getPermission(name: string) {\n    return this.get<PermissionAPIResponse>(`${this.baseURL}/permissions/${encodeURIComponent(name)}`);\n  }\n\n  /** createPermission - creates a custom permission\n   *\n   * @param {CustomPermissionOptions} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  createPermission(permissionData: CustomPermissionOptions) {\n    return this.post<APIResponse>(`${this.baseURL}/permissions`, {\n      ...permissionData,\n    });\n  }\n\n  /** updatePermission - updates an existing custom permission\n   *\n   * @param {string} id\n   * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  updatePermission(id: string, permissionData: Omit<CustomPermissionOptions, 'id'>) {\n    return this.put<APIResponse>(`${this.baseURL}/permissions/${encodeURIComponent(id)}`, {\n      ...permissionData,\n    });\n  }\n\n  /** deletePermission - deletes a custom permission\n   *\n   * @param {string} name\n   * @returns {Promise<APIResponse>}\n   */\n  deletePermission(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/permissions/${encodeURIComponent(name)}`);\n  }\n\n  /** listPermissions - returns the list of all permissions for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listPermissions() {\n    return this.get<PermissionsAPIResponse>(`${this.baseURL}/permissions`);\n  }\n\n  /** createRole - creates a custom role\n   *\n   * @param {string} name the new role name\n   * @returns {Promise<APIResponse>}\n   */\n  createRole(name: string) {\n    return this.post<APIResponse>(`${this.baseURL}/roles`, { name });\n  }\n\n  /** listRoles - returns the list of all roles for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listRoles() {\n    return this.get<APIResponse>(`${this.baseURL}/roles`);\n  }\n\n  /** deleteRole - deletes a custom role\n   *\n   * @param {string} name the role name\n   * @returns {Promise<APIResponse>}\n   */\n  deleteRole(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/roles/${encodeURIComponent(name)}`);\n  }\n\n  /** sync - returns all events that happened for a list of channels since last sync\n   * @param {string[]} channel_cids list of channel CIDs\n   * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n   * @param {SyncOptions} options See JSDoc in the type fields for more info\n   *\n   * @returns {Promise<SyncResponse>}\n   */\n  sync(channel_cids: string[], last_sync_at: string, options: SyncOptions = {}) {\n    return this.post<SyncResponse>(`${this.baseURL}/sync`, {\n      channel_cids,\n      last_sync_at,\n      ...options,\n    });\n  }\n\n  /**\n   * sendUserCustomEvent - Send a custom event to a user\n   *\n   * @param {string} targetUserID target user id\n   * @param {UserCustomEvent} event for example {type: 'friendship-request'}\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async sendUserCustomEvent(targetUserID: string, event: UserCustomEvent) {\n    return await this.post<APIResponse>(`${this.baseURL}/users/${encodeURIComponent(targetUserID)}/event`, {\n      event,\n    });\n  }\n\n  /**\n   * Creates a new block list\n   *\n   * @param {BlockList} blockList - The block list to create\n   * @param {string} blockList.name - The name of the block list\n   * @param {string[]} blockList.words - List of words to block\n   * @param {string} [blockList.team] - Team ID the block list belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  createBlockList(blockList: BlockList) {\n    return this.post<APIResponse>(`${this.baseURL}/blocklists`, blockList);\n  }\n\n  /**\n   * Lists all block lists\n   *\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID to filter block lists by\n   *\n   * @returns {Promise<APIResponse & {blocklists: BlockListResponse[]}>} Response containing array of block lists\n   */\n  listBlockLists(data?: { team?: string }) {\n    return this.get<APIResponse & { blocklists: BlockListResponse[] }>(`${this.baseURL}/blocklists`, data);\n  }\n\n  /**\n   * Gets a specific block list\n   *\n   * @param {string} name - The name of the block list to retrieve\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse & {blocklist: BlockListResponse}>} Response containing the block list\n   */\n  getBlockList(name: string, data?: { team?: string }) {\n    return this.get<APIResponse & { blocklist: BlockListResponse }>(\n      `${this.baseURL}/blocklists/${encodeURIComponent(name)}`,\n      data,\n    );\n  }\n\n  /**\n   * Updates an existing block list\n   *\n   * @param {string} name - The name of the block list to update\n   * @param {Object} data - The update data\n   * @param {string[]} data.words - New list of words to block\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  updateBlockList(name: string, data: { words: string[]; team?: string }) {\n    return this.put<APIResponse>(`${this.baseURL}/blocklists/${encodeURIComponent(name)}`, data);\n  }\n\n  /**\n   * Deletes a block list\n   *\n   * @param {string} name - The name of the block list to delete\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  deleteBlockList(name: string, data?: { team?: string }) {\n    return this.delete<APIResponse>(`${this.baseURL}/blocklists/${encodeURIComponent(name)}`, data);\n  }\n\n  exportChannels(request: Array<ExportChannelRequest>, options: ExportChannelOptions = {}) {\n    const payload = { channels: request, ...options };\n    return this.post<APIResponse & ExportChannelResponse>(`${this.baseURL}/export_channels`, payload);\n  }\n\n  exportUsers(request: ExportUsersRequest) {\n    return this.post<APIResponse & ExportUsersResponse>(`${this.baseURL}/export/users`, request);\n  }\n\n  exportChannel(request: ExportChannelRequest, options?: ExportChannelOptions) {\n    return this.exportChannels([request], options);\n  }\n\n  getExportChannelStatus(id: string) {\n    return this.get<APIResponse & ExportChannelStatusResponse>(\n      `${this.baseURL}/export_channels/${encodeURIComponent(id)}`,\n    );\n  }\n\n  campaign(idOrData: string | CampaignData, data?: CampaignData) {\n    if (idOrData && typeof idOrData === 'object') {\n      return new Campaign(this, null, idOrData);\n    }\n\n    return new Campaign(this, idOrData, data);\n  }\n\n  segment(type: SegmentType, idOrData: string | SegmentData, data?: SegmentData) {\n    if (typeof idOrData === 'string') {\n      return new Segment(this, type, idOrData, data);\n    }\n\n    return new Segment(this, type, null, idOrData);\n  }\n\n  validateServerSideAuth() {\n    if (!this.secret) {\n      throw new Error(\n        'Campaigns is a server-side only feature. Please initialize the client with a secret to use this feature.',\n      );\n    }\n  }\n\n  /**\n   * createSegment - Creates a segment\n   *\n   * @private\n   * @param {SegmentType} type Segment type\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} params Segment data\n   *\n   * @return {{segment: SegmentResponse} & APIResponse} The created Segment\n   */\n  async createSegment(type: SegmentType, id: string | null, data?: SegmentData) {\n    this.validateServerSideAuth();\n    const body = {\n      id,\n      type,\n      ...data,\n    };\n    return this.post<{ segment: SegmentResponse }>(this.baseURL + `/segments`, body);\n  }\n\n  /**\n   * createUserSegment - Creates a user segment\n   *\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} data Segment data\n   *\n   * @return {Segment} The created Segment\n   */\n  async createUserSegment(id: string | null, data?: SegmentData) {\n    this.validateServerSideAuth();\n    return this.createSegment('user', id, data);\n  }\n\n  /**\n   * createChannelSegment - Creates a channel segment\n   *\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} data Segment data\n   *\n   * @return {Segment} The created Segment\n   */\n  async createChannelSegment(id: string | null, data?: SegmentData) {\n    this.validateServerSideAuth();\n    return this.createSegment('channel', id, data);\n  }\n\n  async getSegment(id: string) {\n    this.validateServerSideAuth();\n    return this.get<{ segment: SegmentResponse } & APIResponse>(this.baseURL + `/segments/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * updateSegment - Update a segment\n   *\n   * @param {string} id Segment ID\n   * @param {Partial<UpdateSegmentData>} data Data to update\n   *\n   * @return {Segment} Updated Segment\n   */\n  async updateSegment(id: string, data: Partial<UpdateSegmentData>) {\n    this.validateServerSideAuth();\n    return this.put<{ segment: SegmentResponse }>(this.baseURL + `/segments/${encodeURIComponent(id)}`, data);\n  }\n\n  /**\n   * addSegmentTargets - Add targets to a segment\n   *\n   * @param {string} id Segment ID\n   * @param {string[]} targets Targets to add to the segment\n   *\n   * @return {APIResponse} API response\n   */\n  async addSegmentTargets(id: string, targets: string[]) {\n    this.validateServerSideAuth();\n    const body = { target_ids: targets };\n    return this.post<APIResponse>(this.baseURL + `/segments/${encodeURIComponent(id)}/addtargets`, body);\n  }\n\n  async querySegmentTargets(\n    id: string,\n    filter: QuerySegmentTargetsFilter | null = {},\n    sort: SortParam[] | null | [] = [],\n    options = {},\n  ) {\n    this.validateServerSideAuth();\n    return this.post<{ targets: SegmentTargetsResponse[]; next?: string } & APIResponse>(\n      this.baseURL + `/segments/${encodeURIComponent(id)}/targets/query`,\n      {\n        filter: filter || {},\n        sort: sort || [],\n        ...options,\n      },\n    );\n  }\n  /**\n   * removeSegmentTargets - Remove targets from a segment\n   *\n   * @param {string} id Segment ID\n   * @param {string[]} targets Targets to add to the segment\n   *\n   * @return {APIResponse} API response\n   */\n  async removeSegmentTargets(id: string, targets: string[]) {\n    this.validateServerSideAuth();\n    const body = { target_ids: targets };\n    return this.post<APIResponse>(this.baseURL + `/segments/${encodeURIComponent(id)}/deletetargets`, body);\n  }\n\n  /**\n   * querySegments - Query Segments\n   *\n   * @param {filter} filter MongoDB style filter conditions\n   * @param {QuerySegmentsOptions} options Options for sorting/paginating the results\n   *\n   * @return {Segment[]} Segments\n   */\n  async querySegments(filter: {}, sort?: SortParam[], options: QuerySegmentsOptions = {}) {\n    this.validateServerSideAuth();\n    return this.post<\n      {\n        segments: SegmentResponse[];\n        next?: string;\n        prev?: string;\n      } & APIResponse\n    >(this.baseURL + `/segments/query`, {\n      filter,\n      sort,\n      ...options,\n    });\n  }\n\n  /**\n   * deleteSegment - Delete a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async deleteSegment(id: string) {\n    this.validateServerSideAuth();\n    return this.delete<APIResponse>(this.baseURL + `/segments/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * segmentTargetExists - Check if a target exists in a segment\n   *\n   * @param {string} segmentId Segment ID\n   * @param {string} targetId Target ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async segmentTargetExists(segmentId: string, targetId: string) {\n    this.validateServerSideAuth();\n    return this.get<APIResponse>(\n      this.baseURL + `/segments/${encodeURIComponent(segmentId)}/target/${encodeURIComponent(targetId)}`,\n    );\n  }\n\n  /**\n   * createCampaign - Creates a Campaign\n   *\n   * @param {CampaignData} params Campaign data\n   *\n   * @return {Campaign} The Created Campaign\n   */\n  async createCampaign(params: CampaignData) {\n    this.validateServerSideAuth();\n    return this.post<\n      {\n        campaign: CampaignResponse;\n        users: {\n          next?: string;\n          prev?: string;\n        };\n      } & APIResponse\n    >(this.baseURL + `/campaigns`, { ...params });\n  }\n\n  async getCampaign(id: string, options?: GetCampaignOptions) {\n    this.validateServerSideAuth();\n    return this.get<\n      {\n        campaign: CampaignResponse;\n        users: {\n          next?: string;\n          prev?: string;\n        };\n      } & APIResponse\n    >(this.baseURL + `/campaigns/${encodeURIComponent(id)}`, { ...options?.users });\n  }\n\n  async startCampaign(id: string, options?: { scheduledFor?: string; stopAt?: string }) {\n    this.validateServerSideAuth();\n    return this.post<\n      {\n        campaign: CampaignResponse;\n        users: {\n          next?: string;\n          prev?: string;\n        };\n      } & APIResponse\n    >(this.baseURL + `/campaigns/${encodeURIComponent(id)}/start`, {\n      scheduled_for: options?.scheduledFor,\n      stop_at: options?.stopAt,\n    });\n  }\n  /**\n   * queryCampaigns - Query Campaigns\n   *\n   *\n   * @return {Campaign[]} Campaigns\n   */\n  async queryCampaigns(filter: CampaignFilters, sort?: CampaignSort, options?: CampaignQueryOptions) {\n    this.validateServerSideAuth();\n    return await this.post<\n      {\n        campaigns: CampaignResponse[];\n        next?: string;\n        prev?: string;\n      } & APIResponse\n    >(this.baseURL + `/campaigns/query`, {\n      filter,\n      sort,\n      ...(options || {}),\n    });\n  }\n\n  /**\n   * updateCampaign - Update a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {Partial<CampaignData>} params Campaign data\n   *\n   * @return {Campaign} Updated Campaign\n   */\n  async updateCampaign(id: string, params: Partial<CampaignData>) {\n    this.validateServerSideAuth();\n    return this.put<{\n      campaign: CampaignResponse;\n      users: {\n        next?: string;\n        prev?: string;\n      };\n    }>(this.baseURL + `/campaigns/${encodeURIComponent(id)}`, params);\n  }\n\n  /**\n   * deleteCampaign - Delete a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async deleteCampaign(id: string) {\n    this.validateServerSideAuth();\n    return this.delete<APIResponse>(this.baseURL + `/campaigns/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * stopCampaign - Stop a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} Stopped Campaign\n   */\n  async stopCampaign(id: string) {\n    this.validateServerSideAuth();\n    return this.post<{ campaign: CampaignResponse }>(this.baseURL + `/campaigns/${encodeURIComponent(id)}/stop`);\n  }\n\n  /**\n   * enrichURL - Get OpenGraph data of the given link\n   *\n   * @param {string} url link\n   * @return {OGAttachment} OG Attachment\n   */\n  async enrichURL(url: string) {\n    return this.get<APIResponse & OGAttachment>(this.baseURL + `/og`, { url });\n  }\n\n  /**\n   * getTask - Gets status of a long running task\n   *\n   * @param {string} id Task ID\n   *\n   * @return {TaskStatus} The task status\n   */\n  async getTask(id: string) {\n    return this.get<APIResponse & TaskStatus>(`${this.baseURL}/tasks/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * deleteChannels - Deletes a list of channel\n   *\n   * @param {string[]} cids Channel CIDs\n   * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n   *\n   * @return {DeleteChannelsResponse} Result of the soft deletion, if server-side, it holds the task ID as well\n   */\n  async deleteChannels(cids: string[], options: { hard_delete?: boolean } = {}) {\n    return await this.post<APIResponse & DeleteChannelsResponse>(this.baseURL + `/channels/delete`, {\n      cids,\n      ...options,\n    });\n  }\n\n  /**\n   * deleteUsers - Batch Delete Users\n   *\n   * @param {string[]} user_ids which users to delete\n   * @param {DeleteUserOptions} options Configuration how to delete users\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async deleteUsers(user_ids: string[], options: DeleteUserOptions = {}) {\n    if (typeof options.user !== 'undefined' && !['soft', 'hard', 'pruning'].includes(options.user)) {\n      throw new Error('Invalid delete user options. user must be one of [soft hard pruning]');\n    }\n    if (typeof options.conversations !== 'undefined' && !['soft', 'hard'].includes(options.conversations)) {\n      throw new Error('Invalid delete user options. conversations must be one of [soft hard]');\n    }\n    if (typeof options.messages !== 'undefined' && !['soft', 'hard', 'pruning'].includes(options.messages)) {\n      throw new Error('Invalid delete user options. messages must be one of [soft hard pruning]');\n    }\n    return await this.post<APIResponse & TaskResponse>(this.baseURL + `/users/delete`, {\n      user_ids,\n      ...options,\n    });\n  }\n\n  /**\n   * _createImportURL - Create an Import upload url.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} filename filename of uploaded data\n   * @return {APIResponse & CreateImportResponse} An ImportTask\n   */\n  async _createImportURL(filename: string) {\n    return await this.post<APIResponse & CreateImportURLResponse>(this.baseURL + `/import_urls`, {\n      filename,\n    });\n  }\n\n  /**\n   * _createImport - Create an Import Task.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} path path of uploaded data\n   * @param {CreateImportOptions} options import options\n   * @return {APIResponse & CreateImportResponse} An ImportTask\n   */\n  async _createImport(path: string, options: CreateImportOptions = { mode: 'upsert' }) {\n    return await this.post<APIResponse & CreateImportResponse>(this.baseURL + `/imports`, {\n      path,\n      ...options,\n    });\n  }\n\n  /**\n   * _getImport - Get an Import Task.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} id id of Import Task\n   *\n   * @return {APIResponse & GetImportResponse} An ImportTask\n   */\n  async _getImport(id: string) {\n    return await this.get<APIResponse & GetImportResponse>(this.baseURL + `/imports/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * _listImports - Lists Import Tasks.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {ListImportsPaginationOptions} options pagination options\n   *\n   * @return {APIResponse & ListImportsResponse} An ImportTask\n   */\n  async _listImports(options: ListImportsPaginationOptions) {\n    return await this.get<APIResponse & ListImportsResponse>(this.baseURL + `/imports`, options);\n  }\n\n  /**\n   * upsertPushProvider - Create or Update a push provider\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @param {PushProviderConfig} configuration of the provider you want to create or update\n   *\n   * @return {APIResponse & PushProviderUpsertResponse} A push provider\n   */\n  async upsertPushProvider(pushProvider: PushProviderConfig) {\n    return await this.post<APIResponse & PushProviderUpsertResponse>(this.baseURL + `/push_providers`, {\n      push_provider: pushProvider,\n    });\n  }\n\n  /**\n   * deletePushProvider - Delete a push provider\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @param {PushProviderID} type and foreign id of the push provider to be deleted\n   *\n   * @return {APIResponse} An API response\n   */\n  async deletePushProvider({ type, name }: PushProviderID) {\n    return await this.delete<APIResponse>(\n      this.baseURL + `/push_providers/${encodeURIComponent(type)}/${encodeURIComponent(name)}`,\n    );\n  }\n\n  /**\n   * listPushProviders - Get all push providers in the app\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @return {APIResponse & PushProviderListResponse} A push provider\n   */\n  async listPushProviders() {\n    return await this.get<APIResponse & PushProviderListResponse>(this.baseURL + `/push_providers`);\n  }\n\n  /**\n   * creates an abort controller that will be used by the next HTTP Request.\n   */\n  createAbortControllerForNextRequest() {\n    return (this.nextRequestAbortController = new AbortController());\n  }\n\n  /**\n   * commits a pending message, making it visible in the channel and for other users\n   * @param id the message id\n   *\n   * @return {APIResponse & MessageResponse} The message\n   */\n  async commitMessage(id: string) {\n    return await this.post<APIResponse & MessageResponse>(this.baseURL + `/messages/${encodeURIComponent(id)}/commit`);\n  }\n\n  /**\n   * Creates a poll\n   * @param poll PollData The poll that will be created\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & CreatePollAPIResponse} The poll\n   */\n  async createPoll(poll: CreatePollData<StreamChatGenerics>, userId?: string) {\n    return await this.post<APIResponse & CreatePollAPIResponse<StreamChatGenerics>>(this.baseURL + `/polls`, {\n      ...poll,\n      ...(userId ? { user_id: userId } : {}),\n    });\n  }\n\n  /**\n   * Retrieves a poll\n   * @param id string The poll id\n   *  @param userId string The user id (only serverside)\n   * @returns {APIResponse & GetPollAPIResponse} The poll\n   */\n  async getPoll(id: string, userId?: string): Promise<APIResponse & GetPollAPIResponse<StreamChatGenerics>> {\n    return await this.get<APIResponse & GetPollAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(id)}`,\n      userId ? { user_id: userId } : {},\n    );\n  }\n\n  /**\n   * Updates a poll\n   * @param poll PollData The poll that will be updated\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollResponse} The poll\n   */\n  async updatePoll(poll: PollData<StreamChatGenerics>, userId?: string) {\n    return await this.put<APIResponse & UpdatePollAPIResponse<StreamChatGenerics>>(this.baseURL + `/polls`, {\n      ...poll,\n      ...(userId ? { user_id: userId } : {}),\n    });\n  }\n\n  /**\n   * Partially updates a poll\n   * @param id string The poll id\n   * @param {PartialPollUpdate<StreamChatGenerics>} partialPollObject which should contain id and any of \"set\" or \"unset\" params;\n   * @param userId string The user id (only serverside)\n   * example: {id: \"44f26af5-f2be-4fa7-9dac-71cf893781de\", set:{field: value}, unset:[\"field2\"]}\n   * @returns {APIResponse & UpdatePollAPIResponse} The poll\n   */\n  async partialUpdatePoll(\n    id: string,\n    partialPollObject: PartialPollUpdate<StreamChatGenerics>,\n    userId?: string,\n  ): Promise<APIResponse & UpdatePollAPIResponse<StreamChatGenerics>> {\n    return await this.patch<APIResponse & UpdatePollAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(id)}`,\n      {\n        ...partialPollObject,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Delete a poll\n   * @param id string The poll id\n   * @param userId string The user id (only serverside)\n   * @returns\n   */\n  async deletePoll(id: string, userId?: string): Promise<APIResponse> {\n    return await this.delete<APIResponse>(this.baseURL + `/polls/${encodeURIComponent(id)}`, {\n      ...(userId ? { user_id: userId } : {}),\n    });\n  }\n\n  /**\n   * Close a poll\n   * @param id string The poll id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & UpdatePollAPIResponse} The poll\n   */\n  async closePoll(id: string, userId?: string): Promise<APIResponse & UpdatePollAPIResponse<StreamChatGenerics>> {\n    return this.partialUpdatePoll(\n      id,\n      {\n        set: {\n          is_closed: true,\n        } as PartialPollUpdate<StreamChatGenerics>['set'],\n      },\n      userId,\n    );\n  }\n\n  /**\n   * Creates a poll option\n   * @param pollId string The poll id\n   * @param option PollOptionData The poll option that will be created\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollOptionResponse} The poll option\n   */\n  async createPollOption(pollId: string, option: PollOptionData<StreamChatGenerics>, userId?: string) {\n    return await this.post<APIResponse & CreatePollOptionAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/options`,\n      {\n        ...option,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Retrieves a poll option\n   * @param pollId string The poll id\n   * @param optionId string The poll option id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollOptionResponse} The poll option\n   */\n  async getPollOption(pollId: string, optionId: string, userId?: string) {\n    return await this.get<APIResponse & GetPollOptionAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/options/${encodeURIComponent(optionId)}`,\n      userId ? { user_id: userId } : {},\n    );\n  }\n\n  /**\n   * Updates a poll option\n   * @param pollId string The poll id\n   * @param option PollOptionData The poll option that will be updated\n   * @param userId string The user id (only serverside)\n   * @returns\n   */\n  async updatePollOption(pollId: string, option: PollOptionData<StreamChatGenerics>, userId?: string) {\n    return await this.put<APIResponse & UpdatePollOptionAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/options`,\n      {\n        ...option,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Delete a poll option\n   * @param pollId string The poll id\n   * @param optionId string The poll option id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse} The poll option\n   */\n  async deletePollOption(pollId: string, optionId: string, userId?: string) {\n    return await this.delete<APIResponse>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/options/${encodeURIComponent(optionId)}`,\n      userId ? { user_id: userId } : {},\n    );\n  }\n\n  /**\n   * Cast vote on a poll\n   * @param messageId string The message id\n   * @param pollId string The poll id\n   * @param vote PollVoteData The vote that will be casted\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & CastVoteAPIResponse} The poll vote\n   */\n  async castPollVote(messageId: string, pollId: string, vote: PollVoteData, userId?: string) {\n    return await this.post<APIResponse & CastVoteAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${encodeURIComponent(messageId)}/polls/${encodeURIComponent(pollId)}/vote`,\n      {\n        vote,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Add a poll answer\n   * @param messageId string The message id\n   * @param pollId string The poll id\n   * @param answerText string The answer text\n   * @param userId string The user id (only serverside)\n   */\n  async addPollAnswer(messageId: string, pollId: string, answerText: string, userId?: string) {\n    return this.castPollVote(\n      messageId,\n      pollId,\n      {\n        answer_text: answerText,\n      },\n      userId,\n    );\n  }\n\n  async removePollVote(messageId: string, pollId: string, voteId: string, userId?: string) {\n    return await this.delete<APIResponse & { vote: PollVote }>(\n      this.baseURL +\n        `/messages/${encodeURIComponent(messageId)}/polls/${encodeURIComponent(pollId)}/vote/${encodeURIComponent(\n          voteId,\n        )}`,\n      {\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Queries polls\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & QueryPollsResponse} The polls\n   */\n  async queryPolls(\n    filter: QueryPollsFilters = {},\n    sort: PollSort = [],\n    options: QueryPollsOptions = {},\n    userId?: string,\n  ): Promise<APIResponse & QueryPollsResponse<StreamChatGenerics>> {\n    const q = userId ? `?user_id=${userId}` : '';\n    return await this.post<APIResponse & QueryPollsResponse<StreamChatGenerics>>(this.baseURL + `/polls/query${q}`, {\n      filter,\n      sort: normalizeQuerySort(sort),\n      ...options,\n    });\n  }\n\n  /**\n   * Queries poll votes\n   * @param pollId\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollVotesAPIResponse} The poll votes\n   */\n  async queryPollVotes(\n    pollId: string,\n    filter: QueryVotesFilters = {},\n    sort: VoteSort = [],\n    options: QueryVotesOptions = {},\n    userId?: string,\n  ): Promise<APIResponse & PollVotesAPIResponse<StreamChatGenerics>> {\n    const q = userId ? `?user_id=${userId}` : '';\n    return await this.post<APIResponse & PollVotesAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/votes${q}`,\n      {\n        filter,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Queries poll answers\n   * @param pollId\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollAnswersAPIResponse} The poll votes\n   */\n  async queryPollAnswers(\n    pollId: string,\n    filter: QueryVotesFilters = {},\n    sort: VoteSort = [],\n    options: QueryVotesOptions = {},\n    userId?: string,\n  ): Promise<APIResponse & PollAnswersAPIResponse<StreamChatGenerics>> {\n    const q = userId ? `?user_id=${userId}` : '';\n    return await this.post<APIResponse & PollAnswersAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/votes${q}`,\n      {\n        filter: { ...filter, is_answer: true },\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Query message history\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10}\n   * @returns {APIResponse & QueryMessageHistoryResponse} The message histories\n   */\n  async queryMessageHistory(\n    filter: QueryMessageHistoryFilters = {},\n    sort: QueryMessageHistorySort = [],\n    options: QueryMessageHistoryOptions = {},\n  ): Promise<APIResponse & QueryMessageHistoryResponse<StreamChatGenerics>> {\n    return await this.post<APIResponse & QueryMessageHistoryResponse<StreamChatGenerics>>(\n      this.baseURL + '/messages/history',\n      {\n        filter,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * updateFlags - reviews/unflags flagged message\n   *\n   * @param {string[]} message_ids list of message IDs\n   * @param {string} options Option object in case user ID is set to review all the flagged messages by the user\n   * @param {string} reviewed_by user ID who reviewed the flagged message\n   * @returns {APIResponse}\n   */\n  async updateFlags(message_ids: string[], reviewed_by: string, options: { user_id?: string } = {}) {\n    return await this.post<APIResponse>(this.baseURL + '/automod/v1/moderation/update_flags', {\n      message_ids,\n      reviewed_by,\n      ...options,\n    });\n  }\n}\n","export const EVENT_MAP = {\n  'channel.created': true,\n  'channel.deleted': true,\n  'channel.hidden': true,\n  'channel.kicked': true,\n  'channel.muted': true,\n  'channel.truncated': true,\n  'channel.unmuted': true,\n  'channel.updated': true,\n  'channel.visible': true,\n  'health.check': true,\n  'member.added': true,\n  'member.removed': true,\n  'member.updated': true,\n  'message.deleted': true,\n  'message.new': true,\n  'message.read': true,\n  'message.updated': true,\n  'message.undeleted': true,\n  'notification.added_to_channel': true,\n  'notification.channel_deleted': true,\n  'notification.channel_mutes_updated': true,\n  'notification.channel_truncated': true,\n  'notification.invite_accepted': true,\n  'notification.invite_rejected': true,\n  'notification.invited': true,\n  'notification.mark_read': true,\n  'notification.mark_unread': true,\n  'notification.message_new': true,\n  'notification.mutes_updated': true,\n  'notification.removed_from_channel': true,\n  'notification.thread_message_new': true,\n  'poll.closed': true,\n  'poll.updated': true,\n  'poll.vote_casted': true,\n  'poll.vote_changed': true,\n  'poll.vote_removed': true,\n  'reaction.deleted': true,\n  'reaction.new': true,\n  'reaction.updated': true,\n  'thread.updated': true,\n  'typing.start': true,\n  'typing.stop': true,\n  'user.banned': true,\n  'user.deleted': true,\n  'user.presence.changed': true,\n  'user.unbanned': true,\n  'user.unread_message_reminder': true,\n  'user.updated': true,\n  'user.watching.start': true,\n  'user.watching.stop': true,\n  // AI events\n  'ai_indicator.update': true,\n  'ai_indicator.stop': true,\n  'ai_indicator.clear': true,\n\n  // local events\n  'channels.queried': true,\n  'connection.changed': true,\n  'connection.recovered': true,\n  'transport.changed': true,\n  'capabilities.changed': true,\n};\n","import { PermissionObject } from './types';\n\ntype RequiredPermissionObject = Required<PermissionObject>;\n\nexport const Allow = 'Allow';\nexport const Deny = 'Deny';\nexport const AnyResource = ['*'];\nexport const AnyRole = ['*'];\nexport const MaxPriority = 999;\nexport const MinPriority = 1;\n\n// deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\n\nexport class Permission {\n  name: RequiredPermissionObject['name'];\n  action: RequiredPermissionObject['action'];\n  owner: RequiredPermissionObject['owner'];\n  priority: RequiredPermissionObject['priority'];\n  resources: RequiredPermissionObject['resources'];\n  roles: RequiredPermissionObject['roles'];\n  constructor(\n    name: string,\n    priority: number,\n    resources = AnyResource,\n    roles = AnyRole,\n    owner = false,\n    action: RequiredPermissionObject['action'] = Allow,\n  ) {\n    this.name = name;\n    this.action = action;\n    this.owner = owner;\n    this.priority = priority;\n    this.resources = resources;\n    this.roles = roles;\n  }\n}\n\n// deprecated\nexport const AllowAll = new Permission('Allow all', MaxPriority, AnyResource, AnyRole, false, Allow);\n\n// deprecated\nexport const DenyAll = new Permission('Deny all', MinPriority, AnyResource, AnyRole, false, Deny);\n\nexport type Role = 'admin' | 'user' | 'guest' | 'anonymous' | 'channel_member' | 'channel_moderator' | string;\n\nexport const BuiltinRoles = {\n  Admin: 'admin',\n  Anonymous: 'anonymous',\n  ChannelMember: 'channel_member',\n  ChannelModerator: 'channel_moderator',\n  Guest: 'guest',\n  User: 'user',\n};\n\nexport const BuiltinPermissions = {\n  AddLinks: 'Add Links',\n  BanUser: 'Ban User',\n  CreateChannel: 'Create Channel',\n  CreateMessage: 'Create Message',\n  CreateReaction: 'Create Reaction',\n  DeleteAnyAttachment: 'Delete Any Attachment',\n  DeleteAnyChannel: 'Delete Any Channel',\n  DeleteAnyMessage: 'Delete Any Message',\n  DeleteAnyReaction: 'Delete Any Reaction',\n  DeleteOwnAttachment: 'Delete Own Attachment',\n  DeleteOwnChannel: 'Delete Own Channel',\n  DeleteOwnMessage: 'Delete Own Message',\n  DeleteOwnReaction: 'Delete Own Reaction',\n  ReadAnyChannel: 'Read Any Channel',\n  ReadOwnChannel: 'Read Own Channel',\n  RunMessageAction: 'Run Message Action',\n  UpdateAnyChannel: 'Update Any Channel',\n  UpdateAnyMessage: 'Update Any Message',\n  UpdateMembersAnyChannel: 'Update Members Any Channel',\n  UpdateMembersOwnChannel: 'Update Members Own Channel',\n  UpdateOwnChannel: 'Update Own Channel',\n  UpdateOwnMessage: 'Update Own Message',\n  UploadAttachment: 'Upload Attachment',\n  UseFrozenChannel: 'Send messages and reactions to frozen channels',\n};\n","import { debounce, DebouncedFunc } from './utils';\nimport { StateStore } from './store';\nimport type { Channel } from './channel';\nimport type { StreamChat } from './client';\nimport type {\n  ChannelFilters,\n  ChannelOptions,\n  ChannelSort,\n  DefaultGenerics,\n  ExtendableGenerics,\n  MessageFilters,\n  MessageResponse,\n  SearchMessageSort,\n  SearchOptions,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n} from './types';\n\nexport type SearchSourceType = 'channels' | 'users' | 'messages' | (string & {});\nexport type QueryReturnValue<T> = { items: T[]; next?: string };\nexport type DebounceOptions = {\n  debounceMs: number;\n};\ntype DebouncedExecQueryFunction = DebouncedFunc<(searchString?: string) => Promise<void>>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface SearchSource<T = any> {\n  activate(): void;\n  deactivate(): void;\n  readonly hasNext: boolean;\n  readonly hasResults: boolean;\n  readonly initialState: SearchSourceState<T>;\n  readonly isActive: boolean;\n  readonly isLoading: boolean;\n  readonly items: T[] | undefined;\n  readonly lastQueryError: Error | undefined;\n  readonly next: string | undefined;\n  readonly offset: number | undefined;\n  resetState(): void;\n  search(text?: string): void;\n  searchDebounced: DebouncedExecQueryFunction;\n  readonly searchQuery: string;\n  setDebounceOptions(options: DebounceOptions): void;\n  readonly state: StateStore<SearchSourceState<T>>;\n  readonly type: SearchSourceType;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type SearchSourceState<T = any> = {\n  hasNext: boolean;\n  isActive: boolean;\n  isLoading: boolean;\n  items: T[] | undefined;\n  searchQuery: string;\n  lastQueryError?: Error;\n  next?: string;\n  offset?: number;\n};\n\nexport type SearchSourceOptions = {\n  /** The number of milliseconds to debounce the search query. The default interval is 300ms. */\n  debounceMs?: number;\n  pageSize?: number;\n};\n\nconst DEFAULT_SEARCH_SOURCE_OPTIONS: Required<SearchSourceOptions> = {\n  debounceMs: 300,\n  pageSize: 10,\n} as const;\n\nexport abstract class BaseSearchSource<T> implements SearchSource<T> {\n  state: StateStore<SearchSourceState<T>>;\n  protected pageSize: number;\n  abstract readonly type: SearchSourceType;\n  searchDebounced!: DebouncedExecQueryFunction;\n\n  protected constructor(options?: SearchSourceOptions) {\n    const { debounceMs, pageSize } = { ...DEFAULT_SEARCH_SOURCE_OPTIONS, ...options };\n    this.pageSize = pageSize;\n    this.state = new StateStore<SearchSourceState<T>>(this.initialState);\n    this.setDebounceOptions({ debounceMs });\n  }\n\n  get lastQueryError() {\n    return this.state.getLatestValue().lastQueryError;\n  }\n\n  get hasNext() {\n    return this.state.getLatestValue().hasNext;\n  }\n\n  get hasResults() {\n    return Array.isArray(this.state.getLatestValue().items);\n  }\n\n  get isActive() {\n    return this.state.getLatestValue().isActive;\n  }\n\n  get isLoading() {\n    return this.state.getLatestValue().isLoading;\n  }\n\n  get initialState() {\n    return {\n      hasNext: true,\n      isActive: false,\n      isLoading: false,\n      items: undefined,\n      lastQueryError: undefined,\n      next: undefined,\n      offset: 0,\n      searchQuery: '',\n    };\n  }\n\n  get items() {\n    return this.state.getLatestValue().items;\n  }\n\n  get next() {\n    return this.state.getLatestValue().next;\n  }\n\n  get offset() {\n    return this.state.getLatestValue().offset;\n  }\n\n  get searchQuery() {\n    return this.state.getLatestValue().searchQuery;\n  }\n\n  protected abstract query(searchQuery: string): Promise<QueryReturnValue<T>>;\n\n  protected abstract filterQueryResults(items: T[]): T[] | Promise<T[]>;\n\n  setDebounceOptions = ({ debounceMs }: DebounceOptions) => {\n    this.searchDebounced = debounce(this.executeQuery.bind(this), debounceMs);\n  };\n\n  activate = () => {\n    if (this.isActive) return;\n    this.state.partialNext({ isActive: true });\n  };\n\n  deactivate = () => {\n    if (!this.isActive) return;\n    this.state.partialNext({ isActive: false });\n  };\n\n  async executeQuery(newSearchString?: string) {\n    const hasNewSearchQuery = typeof newSearchString !== 'undefined';\n    const searchString = newSearchString ?? this.searchQuery;\n    if (!this.isActive || this.isLoading || (!this.hasNext && !hasNewSearchQuery) || !searchString) return;\n\n    if (hasNewSearchQuery) {\n      this.state.next({\n        ...this.initialState,\n        isActive: this.isActive,\n        isLoading: true,\n        searchQuery: newSearchString ?? '',\n      });\n    } else {\n      this.state.partialNext({ isLoading: true });\n    }\n\n    const stateUpdate: Partial<SearchSourceState<T>> = {};\n    try {\n      const results = await this.query(searchString);\n      if (!results) return;\n      const { items, next } = results;\n\n      if (next) {\n        stateUpdate.next = next;\n        stateUpdate.hasNext = !!next;\n      } else {\n        stateUpdate.offset = (this.offset ?? 0) + items.length;\n        stateUpdate.hasNext = items.length === this.pageSize;\n      }\n\n      stateUpdate.items = await this.filterQueryResults(items);\n    } catch (e) {\n      stateUpdate.lastQueryError = e as Error;\n    } finally {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      this.state.next(({ lastQueryError, ...current }: SearchSourceState<T>) => ({\n        ...current,\n        ...stateUpdate,\n        isLoading: false,\n        items: [...(current.items ?? []), ...(stateUpdate.items || [])],\n      }));\n    }\n  }\n\n  search = (searchQuery?: string) => {\n    this.searchDebounced(searchQuery);\n  };\n\n  resetState() {\n    this.state.next(this.initialState);\n  }\n}\n\nexport class UserSearchSource<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> extends BaseSearchSource<\n  UserResponse<StreamChatGenerics>\n> {\n  readonly type = 'users';\n  private client: StreamChat<StreamChatGenerics>;\n  filters: UserFilters<StreamChatGenerics> | undefined;\n  sort: UserSort<StreamChatGenerics> | undefined;\n  searchOptions: Omit<UserOptions, 'limit' | 'offset'> | undefined;\n\n  constructor(client: StreamChat<StreamChatGenerics>, options?: SearchSourceOptions) {\n    super(options);\n    this.client = client;\n  }\n\n  protected async query(searchQuery: string) {\n    const filters = {\n      $or: [{ id: { $autocomplete: searchQuery } }, { name: { $autocomplete: searchQuery } }],\n      ...this.filters,\n    } as UserFilters<StreamChatGenerics>;\n    const sort = { id: 1, ...this.sort } as UserSort<StreamChatGenerics>;\n    const options = { ...this.searchOptions, limit: this.pageSize, offset: this.offset };\n    const { users } = await this.client.queryUsers(filters, sort, options);\n    return { items: users };\n  }\n\n  protected filterQueryResults(items: UserResponse<StreamChatGenerics>[]) {\n    return items.filter((u) => u.id !== this.client.user?.id);\n  }\n}\n\nexport class ChannelSearchSource<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> extends BaseSearchSource<Channel<StreamChatGenerics>> {\n  readonly type = 'channels';\n  private client: StreamChat<StreamChatGenerics>;\n  filters: ChannelFilters<StreamChatGenerics> | undefined;\n  sort: ChannelSort<StreamChatGenerics> | undefined;\n  searchOptions: Omit<ChannelOptions, 'limit' | 'offset'> | undefined;\n\n  constructor(client: StreamChat<StreamChatGenerics>, options?: SearchSourceOptions) {\n    super(options);\n    this.client = client;\n  }\n\n  protected async query(searchQuery: string) {\n    const filters = {\n      members: { $in: [this.client.userID] },\n      name: { $autocomplete: searchQuery },\n      ...this.filters,\n    } as ChannelFilters<StreamChatGenerics>;\n    const sort = this.sort ?? {};\n    const options = { ...this.searchOptions, limit: this.pageSize, offset: this.offset };\n    const items = await this.client.queryChannels(filters, sort, options);\n    return { items };\n  }\n\n  protected filterQueryResults(items: Channel<StreamChatGenerics>[]) {\n    return items;\n  }\n}\n\nexport class MessageSearchSource<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> extends BaseSearchSource<MessageResponse<StreamChatGenerics>> {\n  readonly type = 'messages';\n  private client: StreamChat<StreamChatGenerics>;\n  messageSearchChannelFilters: ChannelFilters<StreamChatGenerics> | undefined;\n  messageSearchFilters: MessageFilters<StreamChatGenerics> | undefined;\n  messageSearchSort: SearchMessageSort<StreamChatGenerics> | undefined;\n  channelQueryFilters: ChannelFilters<StreamChatGenerics> | undefined;\n  channelQuerySort: ChannelSort<StreamChatGenerics> | undefined;\n  channelQueryOptions: Omit<ChannelOptions, 'limit' | 'offset'> | undefined;\n\n  constructor(client: StreamChat<StreamChatGenerics>, options?: SearchSourceOptions) {\n    super(options);\n    this.client = client;\n  }\n\n  protected async query(searchQuery: string) {\n    if (!this.client.userID) return { items: [] };\n\n    const channelFilters: ChannelFilters<StreamChatGenerics> = {\n      members: { $in: [this.client.userID] },\n      ...this.messageSearchChannelFilters,\n    } as ChannelFilters<StreamChatGenerics>;\n\n    const messageFilters: MessageFilters<StreamChatGenerics> = {\n      text: searchQuery,\n      type: 'regular', // FIXME: type: 'reply' resp. do not filter by type and allow to jump to a message in a thread - missing support\n      ...this.messageSearchFilters,\n    } as MessageFilters<StreamChatGenerics>;\n\n    const sort: SearchMessageSort<StreamChatGenerics> = {\n      created_at: -1,\n      ...this.messageSearchSort,\n    };\n\n    const options = {\n      limit: this.pageSize,\n      next: this.next,\n      sort,\n    } as SearchOptions<StreamChatGenerics>;\n\n    const { next, results } = await this.client.search(channelFilters, messageFilters, options);\n    const items = results.map(({ message }) => message);\n\n    const cids = Array.from(\n      items.reduce((acc, message) => {\n        if (message.cid && !this.client.activeChannels[message.cid]) acc.add(message.cid);\n        return acc;\n      }, new Set<string>()), // keep the cids unique\n    );\n    const allChannelsLoadedLocally = cids.length === 0;\n    if (!allChannelsLoadedLocally) {\n      await this.client.queryChannels(\n        {\n          cid: { $in: cids },\n          ...this.channelQueryFilters,\n        } as ChannelFilters<StreamChatGenerics>,\n        {\n          last_message_at: -1,\n          ...this.channelQuerySort,\n        },\n        this.channelQueryOptions,\n      );\n    }\n\n    return { items, next };\n  }\n\n  protected filterQueryResults(items: MessageResponse<StreamChatGenerics>[]) {\n    return items;\n  }\n}\n\nexport type DefaultSearchSources<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = [\n  UserSearchSource<StreamChatGenerics>,\n  ChannelSearchSource<StreamChatGenerics>,\n  MessageSearchSource<StreamChatGenerics>,\n];\n\nexport type SearchControllerState = {\n  isActive: boolean;\n  searchQuery: string;\n  sources: SearchSource[];\n};\n\nexport type InternalSearchControllerState<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  // FIXME: focusedMessage should live in a MessageListController class that does not exist yet.\n  //  This state prop should be then removed\n  focusedMessage?: MessageResponse<StreamChatGenerics>;\n};\n\nexport type SearchControllerConfig = {\n  // The controller will make sure there is always exactly one active source. Enabled by default.\n  keepSingleActiveSource: boolean;\n};\n\nexport type SearchControllerOptions = {\n  config?: Partial<SearchControllerConfig>;\n  sources?: SearchSource[];\n};\n\nexport class SearchController<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  /**\n   * Not intended for direct use by integrators, might be removed without notice resulting in\n   * broken integrations.\n   */\n  _internalState: StateStore<InternalSearchControllerState<StreamChatGenerics>>;\n  state: StateStore<SearchControllerState>;\n  config: SearchControllerConfig;\n\n  constructor({ config, sources }: SearchControllerOptions = {}) {\n    this.state = new StateStore<SearchControllerState>({\n      isActive: false,\n      searchQuery: '',\n      sources: sources ?? [],\n    });\n    this._internalState = new StateStore<InternalSearchControllerState<StreamChatGenerics>>({});\n    this.config = { keepSingleActiveSource: true, ...config };\n  }\n  get hasNext() {\n    return this.sources.some((source) => source.hasNext);\n  }\n\n  get sources() {\n    return this.state.getLatestValue().sources;\n  }\n\n  get activeSources() {\n    return this.state.getLatestValue().sources.filter((s) => s.isActive);\n  }\n\n  get isActive() {\n    return this.state.getLatestValue().isActive;\n  }\n\n  get searchQuery() {\n    return this.state.getLatestValue().searchQuery;\n  }\n\n  get searchSourceTypes(): Array<SearchSource['type']> {\n    return this.sources.map((s) => s.type);\n  }\n\n  addSource = (source: SearchSource) => {\n    this.state.partialNext({\n      sources: [...this.sources, source],\n    });\n  };\n\n  getSource = (sourceType: SearchSource['type']) => this.sources.find((s) => s.type === sourceType);\n\n  removeSource = (sourceType: SearchSource['type']) => {\n    const newSources = this.sources.filter((s) => s.type !== sourceType);\n    if (newSources.length === this.sources.length) return;\n    this.state.partialNext({ sources: newSources });\n  };\n\n  activateSource = (sourceType: SearchSource['type']) => {\n    const source = this.getSource(sourceType);\n    if (!source || source.isActive) return;\n    if (this.config.keepSingleActiveSource) {\n      this.sources.forEach((s) => {\n        if (s.type !== sourceType) {\n          s.deactivate();\n        }\n      });\n    }\n    source.activate();\n    this.state.partialNext({ sources: [...this.sources] });\n  };\n\n  deactivateSource = (sourceType: SearchSource['type']) => {\n    const source = this.getSource(sourceType);\n    if (!source?.isActive) return;\n    if (this.activeSources.length === 1) return;\n    source.deactivate();\n    this.state.partialNext({ sources: [...this.sources] });\n  };\n\n  activate = () => {\n    if (!this.activeSources.length) {\n      const sourcesToActivate = this.config.keepSingleActiveSource ? this.sources.slice(0, 1) : this.sources;\n      sourcesToActivate.forEach((s) => s.activate());\n    }\n    if (this.isActive) return;\n    this.state.partialNext({ isActive: true });\n  };\n\n  search = async (searchQuery?: string) => {\n    const searchedSources = this.activeSources;\n    this.state.partialNext({\n      searchQuery,\n    });\n    await Promise.all(searchedSources.map((source) => source.search(searchQuery)));\n  };\n\n  cancelSearchQueries = () => {\n    this.activeSources.forEach((s) => s.searchDebounced.cancel());\n  };\n\n  clear = () => {\n    this.cancelSearchQueries();\n    this.sources.forEach((source) => source.state.next({ ...source.initialState, isActive: source.isActive }));\n    this.state.next((current) => ({\n      ...current,\n      isActive: true,\n      queriesInProgress: [],\n      searchQuery: '',\n    }));\n  };\n\n  exit = () => {\n    this.cancelSearchQueries();\n    this.sources.forEach((source) => source.state.next({ ...source.initialState, isActive: source.isActive }));\n    this.state.next((current) => ({\n      ...current,\n      isActive: false,\n      queriesInProgress: [],\n      searchQuery: '',\n    }));\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}